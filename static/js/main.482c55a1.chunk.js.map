{"version":3,"sources":["logic/firebase.ts","logic/api/access.ts","logic/reducer/eventUser.ts","logic/reducer/bathUser.ts","logic/store.ts","logic/type.ts","component/NameTag/index.tsx","component/Calendar/index.tsx","component/EventUser/index.tsx","component/EventLog/index.tsx","component/HomeNavigation/index.tsx","component/Layout/index.tsx","pages/Bath/index.tsx","logic/api/wordTest.ts","component/WordTestView/FillTheBlanks/index.tsx","component/WordTestView/Dictation/index.tsx","component/WordTestView/index.tsx","logic/api/ox.ts","component/WordTestWordRegist/WordInputCardFormItem/index.tsx","component/WordTestWordRegist/index.tsx","pages/WordTest/index.tsx","component/WordTestList/index.tsx","component/WordCard/index.tsx","component/WordSearch/index.tsx","pages/WordTestHome/index.tsx","pages/Home/index.tsx","index.tsx"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","getCollectionSnapshot","collection","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","eventLogIndex","getEventLogSnapshot","storeCollection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","undefined","getEventLog","eventDateLog","convertedDataform","log","date","Date","EventTime","seconds","text","EventLog","length","getEventState","list","eventDate","EventDate","eventName","EventName","addEvent","currentDate","userName","stateLogDocRef","setDoc","eventLogDocRef","name","initialEventUserState","getTime","fetchEventUser","eventUserThuck","createAsyncThunk","eventUserSlice","createSlice","initialState","reducers","extraReducers","pending","type","state","fulfilled","action","payload","rejected","console","countingDays","from","fromDay","toLocaleDateString","diff","sign","Math","floor","abs","getBathUser","days","initialBathUserState","dayPassed","bathUserSlice","getTodayBathUser","newState","eventUser","bathUserReducer","actions","rootReducers","combineReducers","eventUserReducer","bathUser","configureStore","reducer","UserName","james","henry","Text","Typography","Title","NameTag","props","useSelector","level","pickDate","color","Calendar","className","fullscreen","onSelect","setNewDate","onDateChanged","toDate","EventUser","intent","Fragment","useState","logState","setLogState","useEffect","then","defaultActiveKey","Panel","header","e","i","Item","toLocaleString","NaviMenu","to","CalendarOutlined","CheckSquareOutlined","HomeNavigation","HomeOutlined","overlay","Header","L","Sider","Content","Footer","Layout","children","style","minHeight","theme","mode","Bath","setDate","dispatch","useDispatch","updateTodayUser","useCallback","onClick","addToast","message","success","background","getTestLevelList","Array","forEach","push","id","getWordTestSnapshot","getWordTest","testObject","test","Object","keys","key","addWordTest","docData","word","desc","BlankWords","WordExample","answerVisiblity","example","replace","FillTheBlanks","Dictation","italic","partOfSpeech","definition","WordTestView","part1","setPart1","part2","setPart2","showAnswer","testList","wordType","JSON","parse","q","array","randomIndex","currentIndex","random","shuffle","count","round","slice","fromEnties","lexicalCategory","entries","entry","pronunciations","audioFile","definitions","senses","sense","examples","getPronunciations","fetchWordFromOx","word_id","options","method","headers","app_id","app_key","apiurl","toLowerCase","crosproxy","fetch","result","json","results","searchWord","wordDefinition","enties","lexicalEntries","cov","fetchPronunciations","WordInputCardFormItem","index","Option","Select","labels","label","rules","required","placeholder","allowClear","initialValue","value","WordTestWordRegist","initialWord","testlist","setTestlist","saveTest","values","docName","completed","saveForm","pos","pronunce","override","stringify","alert","display","alignItems","padding","onFinish","layout","htmlType","PlusCircleTwoTone","WordTest","params","useParams","WordTestList","setList","WordCard","audio","Audio","play","title","extra","PlayCircleTwoTone","direction","WordSearch","setstate","inputRef","useRef","ref","current","input","trim","WordTestHome","Home","ReactDOM","render","StrictMode","element","path","document","getElementById"],"mappings":"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","file":"static/js/main.482c55a1.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nimport { getFirestore, doc, getDoc } from \"firebase/firestore/lite\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const store = getFirestore(firebaseApp);\r\n\r\nexport const getCollectionSnapshot = async (\r\n  collection: string,\r\n  documentName: string\r\n) => {\r\n  const docRef = doc(store, collection, documentName);\r\n  const docSnapshot = await getDoc(docRef);\r\n  if (docSnapshot.exists()) {\r\n    return docSnapshot.data();\r\n  }\r\n};\r\n\r\n// export const getCollectionSnapshot = async (collectionName: string) => {\r\n//   const storeCollection = collection(store, collectionName);\r\n//   const storeSnapshot = await getDocs(storeCollection);\r\n//   return storeSnapshot.docs.map((doc) => doc.data());\r\n// };\r\n\r\nexport default store;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  doc,\r\n  setDoc,\r\n  orderBy,\r\n} from \"firebase/firestore/lite\";\r\n\r\nlet eventLogIndex = 0;\r\n\r\nconst getAppStateSnapshot = (documentName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      documentName\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst getEventLogSnapshot = async () => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data());\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  try {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const convertedDataform = eventDateLog.map((log) => {\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          text: log.EventLog,\r\n        };\r\n      });\r\n\r\n      eventLogIndex = convertedDataform.length + 1;\r\n      return convertedDataform;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getEventState = async () => {\r\n  try {\r\n    let list = await getAppStateSnapshot(\"stateLog\");\r\n    if (list) {\r\n      return {\r\n        eventDate: new Date(list.EventDate.seconds * 1000),\r\n        eventName: list.EventName,\r\n      };\r\n    } else {\r\n      return {\r\n        eventDate: new Date(\"1917-1-1\"),\r\n        eventName: \"undefined\",\r\n      };\r\n    }\r\n  } catch {\r\n    return {\r\n      eventDate: new Date(\"2021-11-29\"),\r\n      eventName: \"james\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const queryDocument = async (eventId: number) => {\r\n  if (process.env.REACT_APP_COLLECTION_NAME) {\r\n    const collectionStore = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_NAME\r\n    );\r\n    const queried = query(collectionStore, where(\"eventId\", \"==\", eventId));\r\n\r\n    const querySnapshot = await getDocs(queried);\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      console.log(doc.id, \"=>\", data);\r\n    });\r\n  }\r\n};\r\n\r\nexport const addEvent = async (currentDate: Date, userName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    const stateLogDocRef = doc(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      \"stateLog\"\r\n    );\r\n    await setDoc(stateLogDocRef, {\r\n      EventDate: currentDate,\r\n      EventName: userName,\r\n    });\r\n\r\n    if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n      const eventLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_EVENT_LOG,\r\n        `event${eventLogIndex}`\r\n      );\r\n      await setDoc(eventLogDocRef, {\r\n        EventTime: currentDate,\r\n        EventLog: `set ${userName}`,\r\n      });\r\n    }\r\n\r\n    return { date: currentDate, name: userName };\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getEventState } from \"logic/api/access\";\r\nimport { EventUser } from \"logic/type\";\r\n\r\n// eventUser 는 일단 fetch 를 사용하므로 슬라이스를 사용하는 것에 적당하다.\r\n\r\nconst initialEventUserState: EventUser = {\r\n  date: new Date(\"1917-1-1\").getTime(),\r\n  name: \"james\",\r\n};\r\n\r\nconst fetchEventUser = async (): Promise<EventUser> => {\r\n  const { eventDate, eventName } = await getEventState();\r\n  return { date: eventDate.getTime(), name: eventName };\r\n};\r\n\r\nexport const eventUserThuck = createAsyncThunk(\"request\", async () => {\r\n  return await fetchEventUser();\r\n});\r\n\r\nconst eventUserSlice = createSlice({\r\n  name: \"eventUser\",\r\n  initialState: initialEventUserState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [eventUserThuck.pending.type]: (state) => {},\r\n    [eventUserThuck.fulfilled.type]: (\r\n      state,\r\n      action: PayloadAction<EventUser>\r\n    ) => {\r\n      const payload = action.payload;\r\n      state.date = payload.date;\r\n      state.name = payload.name;\r\n    },\r\n    [eventUserThuck.rejected.type]: (state) => {\r\n      console.log(\"eventUserThuck.rejected.type\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default eventUserSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BathUser, EventUser } from \"logic/type\";\r\n\r\n// 막상 BathUserActionType 타입으로 분기하지는 않는다.\r\n// 리듀서를 모두 방문하기 때문에 결국 type 키값으로 판단하게 된다.\r\nexport interface BathUserActionType {\r\n  type: \"request/whois\";\r\n  date: number;\r\n  eventUser: EventUser;\r\n}\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const fromDay = new Date(from.toLocaleDateString());\r\n  const currentDay = new Date(date.toLocaleDateString());\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (currentDay.getTime() - fromDay.getTime()) / one_day;\r\n  const sign = Math.sign(diff);\r\n  return Math.floor(Math.abs(diff)) * sign;\r\n};\r\n\r\nconst getBathUser = (days: number, name: string): string => {\r\n  if (days % 2 === 0) {\r\n    if (name === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (name === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst initialBathUserState: BathUser = {\r\n  name: \"henry\",\r\n  dayPassed: 0\r\n}\r\n\r\nconst bathUserReducer = (state: BathUser = initialBathUserState, action: BathUserActionType) : BathUser => {\r\n  if (action.type === \"request/whois\") {\r\n    const dayPassed = countingDays(\r\n      new Date(action.date),\r\n      new Date(action.eventUser.date)\r\n    );\r\n\r\n    const userName = getBathUser(dayPassed, action.eventUser.name);\r\n\r\n    //console.log(dayPassed, userName);\r\n\r\n    return {\r\n      name: userName,\r\n      dayPassed\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst bathUserSlice = createSlice({\r\n  name: \"bathUser\",\r\n  initialState: initialBathUserState,\r\n  reducers: {\r\n    getTodayBathUser: (\r\n      state: BathUser,\r\n      action: PayloadAction<BathUserActionType>\r\n    ) => {\r\n      const newState = bathUserReducer(state, action.payload);\r\n\r\n      // 오브젝트 복사 부분이 문제가 되는 것 같다.\r\n      state.name = newState.name;\r\n      state.dayPassed = newState.dayPassed;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nexport const { getTodayBathUser } = bathUserSlice.actions;\r\n\r\nexport default bathUserSlice.reducer;\r\n","import { EventUser, BathUser } from \"./type\";\r\nimport eventUserReducer from \"./reducer/eventUser\";\r\nimport bathUserReducer from \"./reducer/bathUser\";\r\nimport { combineReducers, configureStore, Reducer } from \"@reduxjs/toolkit\";\r\n\r\nexport type RootState = {\r\n  eventUser: EventUser;\r\n  bathUser: BathUser;\r\n};\r\n\r\n// 런타임 오류는 섞어쓰는 것 때문인것 같다.\r\n\r\nconst rootReducers: Reducer<RootState> = combineReducers({\r\n  eventUser: eventUserReducer,\r\n  bathUser: bathUserReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducers,\r\n  //devTools: true,\r\n});\r\n\r\nexport default store;\r\n","export type BathUser = {\r\n  name: string;\r\n  dayPassed: number;\r\n};\r\n\r\nexport type EventUser = {\r\n  date: number;\r\n  name: \"james\" | \"henry\";\r\n};\r\n\r\nexport type EventLog = {\r\n  date: number;\r\n  log: string;\r\n};\r\n\r\ntype UserNameType = {\r\n  [index: string]: string;\r\n};\r\n\r\nexport const UserName: UserNameType = {\r\n  james: \"준우\",\r\n  henry: \"건우\",\r\n};\r\n\r\nexport type WordTestType = {\r\n  [index: string]: string;\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { UserName } from \"logic/type\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nexport const NameTag = (props: { pickDate: Date }) => {\r\n  const bathUser = useSelector((state: RootState) => state.bathUser);\r\n\r\n  return (\r\n    <div>\r\n      <Title level={4}>\r\n        {props.pickDate.toLocaleDateString()}{\" \"}\r\n        <Tag color={bathUser.name === \"james\" ? \"processing\" : \"success\"}>\r\n          {UserName[bathUser.name]}\r\n        </Tag>{\" \"}\r\n        차례 입니다.\r\n      </Title>\r\n      <Text type=\"secondary\">\r\n        마지막 확인한 날짜로부터 {bathUser.dayPassed} 일이 경과했습니다.\r\n      </Text>\r\n    </div>\r\n  );\r\n};\r\n","import { Calendar as DatePicker } from \"antd\";\r\n\r\nexport const Calendar = (props: { setNewDate: any }) => {\r\n  const onDateChanged = (date: Date) => {\r\n    props.setNewDate(date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-calendar-container\">\r\n      <DatePicker\r\n        fullscreen={false}\r\n        onSelect={(date: moment.Moment) => {\r\n          onDateChanged(date.toDate());\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tag, Typography } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { UserName } from \"logic/type\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const EventUser = () => {\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n  const intent = eventUser.name === \"james\" ? \"processing\" : \"success\";\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>\r\n        마지막으로 <Tag color={intent}>{UserName[eventUser.name]}</Tag>가{\" \"}\r\n        {new Date(eventUser.date).toLocaleDateString()} 에 사용했습니다.\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getEventLog } from \"../../logic/api/access\";\r\nimport { Collapse, Timeline } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"logic/store\";\r\n\r\nexport const EventLog = () => {\r\n  const type: { date: Date; text: string }[] = [];\r\n  const [logState, setLogState] = useState(type);\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  useEffect(() => {\r\n    getEventLog().then((log) => {\r\n      setLogState(log);\r\n    });\r\n  }, [eventUser]);\r\n\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={[1]}>\r\n        <Collapse.Panel header=\"Event Log\" key=\"1\">\r\n          <Timeline>\r\n            {logState.map((e, i: number) => {\r\n              return (\r\n                <Timeline.Item key={i++}>\r\n                  [{e.date.toLocaleString()}] {e.text}\r\n                </Timeline.Item>\r\n              );\r\n            })}\r\n          </Timeline>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Breadcrumb, Menu } from \"antd\";\r\nimport {\r\n  HomeOutlined,\r\n  CheckSquareOutlined,\r\n  CalendarOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NaviMenu = (\r\n  <Menu>\r\n    <Menu.Item>\r\n      <Link to=\"/bath\">\r\n        <CalendarOutlined /> Bath\r\n      </Link>\r\n    </Menu.Item>\r\n    <Menu.Item>\r\n      <Link to=\"/test\">\r\n        <CheckSquareOutlined /> Word Test\r\n      </Link>\r\n    </Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nexport const HomeNavigation = () => {\r\n  return (\r\n    <Breadcrumb>\r\n      <Breadcrumb.Item>\r\n        <Link to=\"/\">\r\n          <HomeOutlined /> Home Funny\r\n        </Link>\r\n      </Breadcrumb.Item>\r\n      <Breadcrumb.Item overlay={NaviMenu}>\r\n        <Link to=\"/bath\">\r\n          <CalendarOutlined /> Bath\r\n        </Link>\r\n      </Breadcrumb.Item>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Breadcrumb, Layout as L, Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserView, MobileView } from \"react-device-detect\";\r\n\r\nimport \"./style.css\";\r\nimport { HomeNavigation } from \"component/HomeNavigation\";\r\n\r\nconst { Header, Sider, Content, Footer } = L;\r\n\r\ntype Props = {};\r\n\r\nexport const Layout: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <L style={{ minHeight: \"100vh\" }}>\r\n      <Header>\r\n        <div className=\"layout-title\">Home Funny</div>\r\n      </Header>\r\n      <BrowserView>\r\n        <L>\r\n          <Sider theme=\"light\">\r\n            <Menu mode=\"vertical\">\r\n              <Menu.Item key=\"bath\">\r\n                <Link to=\"/bath\">오늘의 화장실</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"test\">\r\n                <Link to=\"/test\">정상 단어 테스트</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Content>{children}</Content>\r\n        </L>\r\n      </BrowserView>\r\n      <MobileView>\r\n        <HomeNavigation />\r\n        <Content>{children}</Content>\r\n      </MobileView>\r\n      <Footer>This is home funny, 2021</Footer>\r\n    </L>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport { HomeNavigation } from \"component/HomeNavigation\";\r\nimport { Card, Button, Divider, message, Space } from \"antd\";\r\nimport { addEvent } from \"logic/api/access\";\r\nimport { RootState } from \"logic/store\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { getTodayBathUser } from \"logic/reducer/bathUser\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport { UserName } from \"logic/type\";\r\n\r\nimport Layout from \"component/Layout\";\r\n\r\nconst Bath = () => {\r\n  const [pickDate, setDate] = useState<Date>(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  const updateTodayUser = useCallback(\r\n    (date: Date) => {\r\n      dispatch(\r\n        getTodayBathUser({\r\n          type: \"request/whois\",\r\n          date: date.getTime(),\r\n          eventUser: eventUser,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, eventUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventUserThuck());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateTodayUser(pickDate);\r\n    // 이벤트 핸들러에 해당한다.\r\n  }, [pickDate, eventUser, updateTodayUser]);\r\n\r\n  const onClick = (name: string) => {\r\n    addEvent(new Date(), name).then((e) => {\r\n      if (e) {\r\n        addToast(e.name);\r\n\r\n        dispatch(eventUserThuck());\r\n      } else {\r\n        console.log(\"add event failed\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const addToast = (name: string) => {\r\n    message.success(`오늘부터 ${UserName[name]}가 사용합니다.`);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"bath-app\">\r\n        <Card className=\"bp3-text-large bp3-running-text\">\r\n          <blockquote>\r\n            <NameTag pickDate={pickDate} />\r\n          </blockquote>\r\n          <EventUser />\r\n          <Calendar setNewDate={setDate} />\r\n        </Card>\r\n        <Space>\r\n          <Button\r\n            style={{ background: \"#1890ff\", color: \"white\" }}\r\n            onClick={() => onClick(\"james\")}\r\n          >\r\n            준우부터 다시 시작\r\n          </Button>\r\n          <Button\r\n            style={{ background: \"#52c41a\", color: \"white\" }}\r\n            onClick={() => onClick(\"henry\")}\r\n          >\r\n            건우부터 다시 시작\r\n          </Button>\r\n        </Space>\r\n\r\n        <Divider />\r\n        <EventLog />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore/lite\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const getTestLevelList = async () => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const storeCollection = collection(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST\r\n      );\r\n\r\n      const storeSnapshot = await getDocs(storeCollection);\r\n\r\n      let list = Array<string>();\r\n      storeSnapshot.forEach((e) => list.push(e.id));\r\n\r\n      return list;\r\n    } else {\r\n      return Array<string>();\r\n    }\r\n  } catch {\r\n    return Array<string>();\r\n  }\r\n};\r\n\r\nconst getWordTestSnapshot = async (level: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n      level\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getWordTest = async (level: string): Promise<WordTestType> => {\r\n  try {\r\n    let testObject = await getWordTestSnapshot(level);\r\n    if (testObject) {\r\n      let test: WordTestType = {};\r\n      for (const key of Object.keys(testObject)) {\r\n        test[key] = testObject[key];\r\n      }\r\n      return test;\r\n    }\r\n  } catch {}\r\n\r\n  return {};\r\n};\r\n\r\nexport const addWordTest = async (level: string, list: Array<WordTestType>) => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const stateLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n        level\r\n      );\r\n\r\n      let docData = {};\r\n      list.map((e) => {\r\n        docData = { ...docData, [e.word]: e.desc };\r\n        return e;\r\n      });\r\n\r\n      await setDoc(stateLogDocRef, docData);\r\n    }\r\n\r\n    return true;\r\n  } catch {}\r\n\r\n  return false;\r\n};\r\n","import { WordType } from \"logic/api/ox\";\r\nimport React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst BlankWords = ({ list }: { list: Array<WordType> }) => {\r\n  return (\r\n    <div className=\"blank-words-container\">\r\n      {list.map((word) => (\r\n        <ul key={word.word}>{word.word}</ul>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordExample = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  return (\r\n    <div>\r\n      {list.map((word) => (\r\n        <li key={word.word}>\r\n          {answerVisiblity\r\n            ? word.example\r\n            : word.example.replace(word.word, \"(    )\")}\r\n        </li>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const FillTheBlanks = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  return (\r\n    <div>\r\n      <WordExample list={list} answerVisiblity={answerVisiblity} />\r\n      <BlankWords list={list} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FillTheBlanks;\r\n","import { Typography } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const Dictation = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const pronunce = (audio: string) => {\r\n    new Audio(audio).play();\r\n  };\r\n\r\n  let displayMode = \"show def\";\r\n  // if (Math.random() < 0.5) {\r\n  //   displayMode = \"show example\";\r\n  // }\r\n\r\n  return (\r\n    <div className=\"word-test-dictation\">\r\n      {list.map((word) =>\r\n        displayMode === \"show def\" ? (\r\n          <div>\r\n            <span>\r\n              <Typography.Text type=\"secondary\" italic>\r\n                {word.partOfSpeech}\r\n              </Typography.Text>\r\n            </span>\r\n            <span>,&nbsp;&nbsp;</span>\r\n            <span>{word.definition}</span>\r\n            <span\r\n              className={`word-test-dictation-answer${\r\n                answerVisiblity ? \"\" : \"-trasnparent\"\r\n              }`}\r\n            >\r\n              {word.word}\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          // 이거 아니고 한 글 뜻으로 해야 하나?\r\n          <div>\r\n            <span>\r\n              <Typography.Text>{word.example}</Typography.Text>\r\n            </span>\r\n            <span\r\n              className={`word-test-dictation-answer${\r\n                !answerVisiblity && \"-trasnparent\"\r\n              }`}\r\n            >\r\n              {word.word}\r\n            </span>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dictation;\r\n","import { WordType } from \"logic/api/ox\";\r\nimport { getWordTest } from \"logic/api/wordTest\";\r\nimport { WordTestType } from \"logic/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport FillTheBlanks from \"./FillTheBlanks\";\r\nimport Dictation from \"./Dictation\";\r\n\r\nimport \"./style.css\";\r\nimport { Button, Typography } from \"antd\";\r\n\r\nconst shuffle = (array: any[]) => {\r\n  let currentIndex = array.length;\r\n  let randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nexport const WordTestView = ({ level }: { level?: string }) => {\r\n  const [part1, setPart1] = useState<Array<WordType>>([]);\r\n  const [part2, setPart2] = useState<Array<WordType>>([]);\r\n  const [answerVisiblity, showAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let testList = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          testList.push(wordType);\r\n        }\r\n\r\n        const q = shuffle(testList);\r\n        const count = Math.round(testList.length / 2);\r\n\r\n        setPart1(q.slice(0, count));\r\n        setPart2(q.slice(count));\r\n      });\r\n    }\r\n  }, [level]);\r\n\r\n  const onClickShowAnswer = (visible: boolean) => {\r\n    showAnswer(visible);\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-test-layout\">\r\n      <Typography.Title>{level}</Typography.Title>\r\n      <Dictation list={[...part1]} answerVisiblity={answerVisiblity} />\r\n      <FillTheBlanks list={[...part2]} answerVisiblity={answerVisiblity} />\r\n\r\n      <Button onClick={() => onClickShowAnswer(!answerVisiblity)}>\r\n        정답보기\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","export type WordType = {\r\n  word: string;\r\n  partOfSpeech: string;\r\n  definition: string;\r\n  example: string;\r\n  pronunciations: string;\r\n};\r\n\r\ntype OxEntryType = {\r\n  etymologies: Array<any>;\r\n  language: string;\r\n  pronunciations: Array<any>;\r\n  senses: Array<any>;\r\n};\r\n\r\ntype OxResultType = {\r\n  text: string;\r\n  lexicalCategory: { id: string; text: string };\r\n  entries: Array<OxEntryType>;\r\n};\r\n\r\nconst fromEnties = ({ text, lexicalCategory, entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n    const pronunciations = entry.pronunciations[\"0\"].audioFile;\r\n\r\n    let definitions = Array<{ text: string; example: string }>();\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.definitions) {\r\n        definitions.push({\r\n          text: sense.definitions[0],\r\n          example: sense.examples ? sense.examples[0].text : \"\",\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      word: text,\r\n      partOfSpeech: lexicalCategory.text,\r\n      definition: definitions[0].text,\r\n      example: definitions[0].example,\r\n      pronunciations: pronunciations,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunciations = ({\r\n  text,\r\n  lexicalCategory,\r\n  entries,\r\n}: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n    return entry.pronunciations[\"0\"].audioFile;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const fetchWordFromOx = async (text: string) => {\r\n  const app_id = \"2d5cc32e\";\r\n  const app_key = \"e3ac76a3e40c62bf1dde28d9a28274af\";\r\n  const language = \"en-gb\";\r\n  const word_id = text;\r\n\r\n  const options = {\r\n    method: \"GET\",\r\n    headers: {\r\n      app_id: app_id,\r\n      app_key: app_key,\r\n    },\r\n  };\r\n\r\n  const apiurl = `https://od-api.oxforddictionaries.com:443/api/v2/entries/${language}/${word_id.toLowerCase()}`;\r\n  const crosproxy = `https://cors-anywhere.herokuapp.com/${apiurl}`;\r\n\r\n  const result = await fetch(crosproxy, options);\r\n  const json = await result.json();\r\n\r\n  if (json.results) {\r\n    return json.results;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const searchWord = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n\r\n  let wordDefinition = Array<WordType>();\r\n\r\n  if (results) {\r\n    const enties = results[\"0\"]?.lexicalEntries;\r\n    for (const e of enties) {\r\n      const cov = fromEnties(e);\r\n      cov && wordDefinition.push(cov);\r\n    }\r\n  }\r\n\r\n  return wordDefinition;\r\n};\r\n\r\nexport const fetchPronunciations = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]?.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunciations(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n","import { Form, Input, Select, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { WordType } from \"logic/api/ox\";\r\n\r\nimport \"./style.css\";\r\n\r\ntype Props = {\r\n  index: number;\r\n  word: WordType;\r\n};\r\n\r\nconst WordInputCardFormItem = ({ index, word }: Props) => {\r\n  const { Option } = Select;\r\n\r\n  const labels = {\r\n    word: \"단어\",\r\n    pos: \"품사\",\r\n    definition: \"뜻\",\r\n    example: \"예제\",\r\n  };\r\n\r\n  return (\r\n    <Form.Item label={`Q.${index + 1}`}>\r\n      <Space>\r\n        <Form.Item name={[index, \"word\"]} rules={[{ required: true }]}>\r\n          <Input placeholder={labels[\"word\"]} allowClear />\r\n        </Form.Item>\r\n        <Form.Item name={[index, \"pos\"]} initialValue=\"Noun\">\r\n          <Select placeholder={labels[\"pos\"]}>\r\n            <Option value=\"Noun\">Noun</Option>\r\n            <Option value=\"Verb\">Verb</Option>\r\n            <Option value=\"Adjective\">Adjective</Option>\r\n            <Option value=\"Adverb\">Adverb</Option>\r\n            <Option value=\"Pronoun\">Pronoun</Option>\r\n            <Option value=\"Conjunction\">Conjunction</Option>\r\n            <Option value=\"Preposition\">Preposition</Option>\r\n            <Option value=\"Interjection\">Interjection</Option>\r\n          </Select>\r\n        </Form.Item>\r\n      </Space>\r\n      <Form.Item name={[index, \"definition\"]}>\r\n        <Input placeholder={labels[\"definition\"]} allowClear></Input>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"example\"]}>\r\n        <TextArea placeholder={labels[\"example\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default WordInputCardFormItem;\r\n","import { Button, Form, Input, Space } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\nimport { addWordTest } from \"logic/api/wordTest\";\r\nimport { fetchPronunciations, WordType } from \"logic/api/ox\";\r\nimport WordInputCardFormItem from \"./WordInputCardFormItem\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const WordTestWordRegist = () => {\r\n  const initialWord: WordType = {\r\n    word: \"\",\r\n    partOfSpeech: \"\",\r\n    definition: \"\",\r\n    example: \"\",\r\n    pronunciations: \"\",\r\n  };\r\n\r\n  const [testlist, setTestlist] = useState<Array<WordType>>([initialWord]);\r\n\r\n  const addInputWord = () => {\r\n    setTestlist((list) => [...list, initialWord]);\r\n  };\r\n\r\n  const saveTest = async (values: any) => {\r\n    console.log(values);\r\n\r\n    const docName = values[\"title\"];\r\n\r\n    let completed = true;\r\n    let saveForm = Array<WordTestType>();\r\n\r\n    for (const key in values) {\r\n      if (key === \"title\") {\r\n        continue;\r\n      }\r\n\r\n      const { word, pos, definition, example } = values[key];\r\n      if (!word) {\r\n        continue;\r\n      }\r\n\r\n      const pronunce = await fetchPronunciations(word);\r\n      if (pronunce) {\r\n        const override: WordType = {\r\n          word: word,\r\n          partOfSpeech: pos,\r\n          definition: definition,\r\n          example: example,\r\n          pronunciations: pronunce,\r\n        };\r\n\r\n        saveForm.push({\r\n          word: word,\r\n          desc: JSON.stringify(override),\r\n        });\r\n      } else {\r\n        alert(`${word} 잘못된 단어가 있습니다.`);\r\n        completed = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (completed) {\r\n      const result = await addWordTest(docName, saveForm);\r\n      if (result) {\r\n        console.log(\"done\");\r\n      } else {\r\n        alert(\"서버에 접속할 수 없습니다.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ display: \"flex\", alignItems: \"flex-end\", padding: \"1rem\" }}>\r\n        <Form onFinish={saveTest} layout=\"vertical\">\r\n          <Form.Item\r\n            name=\"title\"\r\n            rules={[{ required: true }]}\r\n            label=\"테스트이름\"\r\n          >\r\n            <Input placeholder=\"정상 레벨 또는 워크북 페이지\" />\r\n          </Form.Item>\r\n          {testlist.map((e, index) => (\r\n            <WordInputCardFormItem key={index} index={index} word={e} />\r\n          ))}\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            저장\r\n          </Button>\r\n        </Form>\r\n\r\n        <Space>\r\n          <Button onClick={addInputWord}>\r\n            <PlusCircleTwoTone />\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { WordTestView } from \"component/WordTestView\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestWordRegist } from \"component/WordTestWordRegist\";\r\n\r\nexport const WordTest = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      {params.level === \"regist\" ? (\r\n        <WordTestWordRegist />\r\n      ) : (\r\n        <WordTestView {...params} />\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTest;\r\n","import { Menu } from \"antd\";\r\nimport { getTestLevelList } from \"logic/api/wordTest\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const WordTestList = () => {\r\n  const [list, setList] = useState<Array<string>>([]);\r\n\r\n  useEffect(() => {\r\n    getTestLevelList().then((testList) => {\r\n      setList(testList);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Menu>\r\n      {list.map((level) => (\r\n        <Menu.Item key={level}>\r\n          <Link to={`/test/${level}`}>{level}</Link>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n","import { Card, Divider, Space, Typography } from \"antd\";\r\nimport { PlayCircleTwoTone } from \"@ant-design/icons\";\r\nimport { WordType } from \"logic/api/ox\";\r\n\r\nexport const WordCard = ({ word }: { word: WordType }) => {\r\n  const pronunce = (audio: string) => {\r\n    new Audio(audio).play();\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      title={word.word}\r\n      onClick={() => pronunce(word.pronunciations)}\r\n      extra={\r\n        <PlayCircleTwoTone onClick={() => pronunce(word.pronunciations)} />\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Typography.Text type=\"success\">{word.partOfSpeech}</Typography.Text>\r\n        <Space direction=\"vertical\">\r\n          <Typography.Text type=\"warning\">{word.definition}</Typography.Text>\r\n          {word.example && (\r\n            <Typography.Text italic>{word.example}</Typography.Text>\r\n          )}\r\n          <Divider />\r\n        </Space>\r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WordCard;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Button, Input } from \"antd\";\r\nimport { searchWord, WordType } from \"logic/api/ox\";\r\nimport WordCard from \"component/WordCard\";\r\n\r\nexport const WordSearch = () => {\r\n  const [state, setstate] = useState<Array<WordType>>([]);\r\n  const inputRef = useRef<Input>(null);\r\n\r\n  const search = () => {\r\n    if (inputRef.current) {\r\n      searchWord(inputRef.current.input.value.trim()).then((result) => {\r\n        if (result) {\r\n          setstate(result);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Input ref={inputRef} placeholder=\"type word\"></Input>\r\n      <Button onClick={search}>검색</Button>\r\n      {state.map((e) => (\r\n        <WordCard key={`${e.word}${e.partOfSpeech}`} word={e} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordSearch;\r\n","import React from \"react\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { WordTestList } from \"component/WordTestList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\nimport WordSearch from \"component/WordSearch\";\r\n\r\nexport const WordTestHome = () => {\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <WordTestList />\r\n      </div>\r\n      <div>\r\n        <WordSearch />\r\n      </div>\r\n      <div>\r\n        <Button>\r\n          <Link to=\"/test/regist\">시험 등록</Link>\r\n        </Button>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestHome;\r\n","import \"./style.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\n\r\nexport const Home = () => {\r\n  return <Layout>Welcome to Home Funny !</Layout>;\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"logic/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Bath from \"pages/Bath\";\r\nimport WordTest from \"pages/WordTest\";\r\nimport WordTestHome from \"pages/WordTestHome\";\r\nimport Home from \"pages/Home\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route index element={<Home />} />\r\n          <Route path=\"bath\" element={<Bath />} />\r\n          <Route path=\"test/\" element={<WordTestHome />} />\r\n          <Route path=\"test/:level\" element={<WordTest />} />\r\n          <Route path=\"*\" element={<Home />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}