{"version":3,"sources":["component/NameTag/index.tsx","component/Calendar/index.tsx","component/EventUser/index.tsx","logic/firebase.tsx","logic/access.tsx","component/EventLog/index.tsx","component/Bath/index.tsx","index.js"],"names":["NameTag","props","color","name","Calendar","Date","className","fullscreen","onSelect","date","setNewDate","onDateChanged","EventUser","intent","eventUser","Fragment","toLocaleDateString","firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","eventLogIndex","getAppStateSnapshot","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","undefined","getEventLogSnapshot","storeCollection","collection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","getEventLog","eventDateLog","convertedDataform","log","EventTime","seconds","text","EventLog","length","getEventState","list","eventDate","EventDate","eventName","EventName","addEvent","currentDate","userName","stateLogDocRef","setDoc","eventLogDocRef","useState","logState","setLogState","useEffect","then","defaultActiveKey","Panel","header","e","i","Item","toLocaleString","countingDays","from","fromDay","diff","getTime","sign","Math","floor","abs","Bath","checkDate","setDate","dayPassed","todayState","setTodayState","eventState","setEventState","getEventContext","onClick","console","addToast","message","success","style","display","margin","Content","HomeOutlined","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94f09be7.chunk.js","sourcesContent":["import { Tag } from \"antd\";\r\n\r\nexport const NameTag = (props: { name: string }) => {\r\n  return (\r\n    <div>\r\n      <span>today is </span>\r\n      <Tag color={props.name === \"james\" ? \"processing\" : \"success\"}>\r\n        {props.name}\r\n      </Tag>\r\n    </div>\r\n  );\r\n};\r\n","import { Calendar as DatePicker } from \"antd\";\r\n\r\nexport const Calendar = (props: { setNewDate: any }) => {\r\n  const onDateChanged = (date: Date) => {\r\n    if (date) {\r\n      props.setNewDate(date);\r\n    }\r\n  };\r\n\r\n  const timePickerProps = {\r\n    date: new Date(),\r\n    highlightCurrentDay: true,\r\n    reverseMonthAndYearMenus: false,\r\n    shortcuts: false,\r\n    showActionsBar: false,\r\n    showTimeArrowButtons: false,\r\n    timePrecision: undefined,\r\n    useAmPm: false,\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-calendar-container\">\r\n      <DatePicker\r\n        fullscreen={false}\r\n        onSelect={(date: any) => onDateChanged(new Date(date))}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tag } from \"antd\";\r\n\r\nexport const EventUser = (props: {\r\n  eventUser: { date: Date; name: string };\r\n}) => {\r\n  const intent = props.eventUser.name === \"james\" ? \"processing\" : \"success\";\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h5>\r\n        <Tag color={intent}>{props.eventUser.name}</Tag> was use{\" \"}\r\n        {props.eventUser.date.toLocaleDateString()}\r\n      </h5>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp, } from \"firebase/app\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nexport default firebaseApp;\r\n","import firebaseApp from \"./firebase\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  orderBy,\r\n} from \"firebase/firestore/lite\";\r\n\r\nconst store = getFirestore(firebaseApp);\r\nlet eventLogIndex = 0;\r\n\r\nconst getAppStateSnapshot = async (documentName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    const docRef = doc(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      documentName\r\n    );\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return docSnapshot.data();\r\n    }\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst getEventLogSnapshot = async () => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    //const storeSnapshot = await getDocs(storeCollection);\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data());\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  let eventDateLog = await getEventLogSnapshot();\r\n  if (eventDateLog) {\r\n    const convertedDataform = eventDateLog.map((log) => {\r\n      return {\r\n        date: new Date(log.EventTime.seconds * 1000),\r\n        text: log.EventLog,\r\n      };\r\n    });\r\n\r\n    eventLogIndex = convertedDataform.length + 1;\r\n    return convertedDataform;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getEventState = async () => {\r\n  let list = await getAppStateSnapshot(\"stateLog\");\r\n  if (list) {\r\n    return {\r\n      eventDate: new Date(list.EventDate.seconds * 1000),\r\n      eventName: list.EventName,\r\n    };\r\n  } else {\r\n    return {\r\n      eventDate: new Date(\"1917-1-1\"),\r\n      eventName: \"undefined\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const queryDocument = async (eventId: number) => {\r\n  if (process.env.REACT_APP_COLLECTION_NAME) {\r\n    const collectionStore = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_NAME\r\n    );\r\n    const queried = query(collectionStore, where(\"eventId\", \"==\", eventId));\r\n\r\n    const querySnapshot = await getDocs(queried);\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      console.log(doc.id, \"=>\", data);\r\n    });\r\n  }\r\n};\r\n\r\n// class EventLog {\r\n//   date: Date;\r\n//   log: string;\r\n\r\n//   constructor(date: Date, log: string) {\r\n//     this.date = date;\r\n//     this.log = log;\r\n//   }\r\n// }\r\n\r\n// const EventLogSerializer = {\r\n//     toFirebase: (eventLog : EventLog) => {\r\n//         return {\r\n//             date: eventLog.date,\r\n//             log: eventLog.log,\r\n//         }\r\n//     },\r\n//     fromFirebase: (snapshot: DocumentData, options: any) => {\r\n//         const data = snapshot.data(options);\r\n//         return new EventLog(data.date, data.log);\r\n//     }\r\n// };\r\n\r\nexport const addEvent = async (currentDate: Date, userName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    const stateLogDocRef = doc(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      \"stateLog\"\r\n    );\r\n    await setDoc(stateLogDocRef, {\r\n      EventDate: currentDate,\r\n      EventName: userName,\r\n    });\r\n\r\n    if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n      const eventLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_EVENT_LOG,\r\n        `event${eventLogIndex}`\r\n      );\r\n      await setDoc(eventLogDocRef, {\r\n        EventTime: currentDate,\r\n        EventLog: `set ${userName}`,\r\n      });\r\n    }\r\n\r\n    return { date: currentDate, name: userName };\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getEventLog } from \"../../logic/access\";\r\nimport { Collapse, Timeline } from \"antd\";\r\n\r\nexport const EventLog = (props: { date: Date; name: string }) => {\r\n  const type: { date: Date; text: string }[] = [];\r\n  const [logState, setLogState] = useState(type);\r\n\r\n  useEffect(() => {\r\n    getEventLog().then((log) => {\r\n      setLogState(log);\r\n    });\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={[1]}>\r\n        <Collapse.Panel header=\"Event Log\" key=\"1\">\r\n          <Timeline>\r\n            {logState.map((e, i: number) => {\r\n              return (\r\n                <Timeline.Item key={i++}>\r\n                  [{e.date.toLocaleString()}] {e.text}\r\n                </Timeline.Item>\r\n              );\r\n            })}\r\n          </Timeline>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport {\r\n  Breadcrumb,\r\n  Card,\r\n  Button,\r\n  Divider,\r\n  message,\r\n  Space,\r\n  Layout,\r\n} from \"antd\";\r\nimport { addEvent, getEventState } from \"logic/access\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport { HomeOutlined } from \"@ant-design/icons\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const fromDay = new Date(from.toLocaleDateString());\r\n  const currentDay = new Date(date.toLocaleDateString());\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (currentDay.getTime() - fromDay.getTime()) / one_day;\r\n  const sign = Math.sign(diff);\r\n  return Math.floor(Math.abs(diff)) * sign;\r\n};\r\n\r\nconst whoIs = (days: number, from: string) => {\r\n  if (days % 2 === 0) {\r\n    if (from === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (from === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst Bath = () => {\r\n  const [checkDate, setDate] = useState<Date>(new Date());\r\n  const [todayState, setTodayState] = useState({\r\n    name: \"\",\r\n    dayPassed: 0,\r\n  });\r\n  const [eventState, setEventState] = useState({\r\n    date: new Date(\"1997-1-1\"),\r\n    name: \"undefined\",\r\n  });\r\n\r\n  const getEventContext = async () => {\r\n    const { eventDate, eventName } = await getEventState();\r\n\r\n    // const log = `get context {${eventDate}: ${eventName}}`;\r\n    // console.log(log);\r\n\r\n    setEventState({ date: eventDate, name: eventName });\r\n\r\n    const dayPassed = countingDays(checkDate, eventDate);\r\n    const name = whoIs(dayPassed, eventName);\r\n    setTodayState({ name, dayPassed });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getEventContext();\r\n    // eslint-disable-next-line\r\n  }, [checkDate]);\r\n\r\n  const onClick = (name: string) => {\r\n    addEvent(new Date(), name).then((e) => {\r\n      if (e) {\r\n        console.log(`${e.date}, ${e.name}`);\r\n\r\n        getEventContext().then((e) => {\r\n          addToast();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const addToast = () => {\r\n    message.success(`오늘부터 ${eventState.name}가 사용합니다.`);\r\n  };\r\n\r\n  const style = {\r\n    display: \"inline-block\",\r\n    margin: \"30px\",\r\n  };\r\n\r\n  return (\r\n    <Layout style={style}>\r\n      <Layout.Content>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item>Home Funny</Breadcrumb.Item>\r\n          <Breadcrumb.Item>\r\n            <Space>\r\n              <HomeOutlined />\r\n              Home\r\n            </Space>\r\n          </Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        <Card className=\"bp3-text-large bp3-running-text\">\r\n          <blockquote>\r\n            <NameTag name={todayState.name} />\r\n            <div>{todayState.dayPassed} days passed</div>\r\n          </blockquote>\r\n          <EventUser eventUser={eventState} />\r\n          <Calendar setNewDate={setDate} />\r\n        </Card>\r\n        <Space>\r\n          <Button\r\n            style={{ background: \"#1890ff\", color: \"white\" }}\r\n            onClick={() => onClick(\"james\")}\r\n          >\r\n            james confirm\r\n          </Button>\r\n          <Button\r\n            style={{ background: \"#52c41a\", color: \"white\" }}\r\n            onClick={() => onClick(\"henry\")}\r\n          >\r\n            henry confirm\r\n          </Button>\r\n        </Space>\r\n\r\n        <Divider />\r\n        <div>\r\n          <EventLog {...eventState} />\r\n        </div>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Bath from \"component/Bath\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Bath />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}