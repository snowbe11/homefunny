{"version":3,"sources":["component/Bath/index.tsx","component/NameTag/index.tsx","component/Calendar/index.tsx","logic/firebase.tsx","logic/access.tsx","component/EventUser/index.tsx","component/EventLog/index.tsx","index.js"],"names":["toasterRef","NameTag","props","intent","name","Intent","PRIMARY","SUCCESS","large","Calendar","timePickerProps","date","Date","highlightCurrentDay","reverseMonthAndYearMenus","shortcuts","showActionsBar","showTimeArrowButtons","timePrecision","undefined","useAmPm","className","Classes","ELEVATION_1","onChange","setNewDate","firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","eventLogIndex","getAppStateSnapshot","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","getEventLogSnapshot","storeCollection","collection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","getEventLog","eventDateLog","convertedDataform","log","EventTime","seconds","text","EventLog","length","getEventState","list","eventDate","EventDate","eventName","EventName","addEvent","currentDate","userName","stateLogDocRef","setDoc","eventLogDocRef","EventUser","useEffect","getEventContext","console","setEventUser","eventUser","Fragment","round","toLocaleDateString","useState","logState","setLogState","logVisiblity","setLogVisiblity","then","onClick","minimal","outlined","isOpen","e","i","toLocaleString","Bath","days","from","checkDate","setDate","day_count","diff","getTime","Math","ceil","countingDays","person","addToast","toastBuild","icon","message","timeout","show","ref","autoFocus","position","Position","TOP","usePortal","align","Alignment","LEFT","MINIMAL","vertical","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43d91c21.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport {\r\n  Card,\r\n  ButtonGroup,\r\n  Button,\r\n  Divider,\r\n  Navbar,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n  NavbarDivider,\r\n  Alignment,\r\n  Classes,\r\n  Intent,\r\n  Toaster,\r\n  Position,\r\n  IToastProps,\r\n} from \"@blueprintjs/core\";\r\nimport { addEvent } from \"logic/access\";\r\nimport \"./style.css\";\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (date.getTime() - from.getTime()) / one_day;\r\n  return Math.ceil(diff);\r\n};\r\n\r\nconst whoIs = (days: number, from: string) => {\r\n  if (days % 2 === 0) {\r\n    if (from === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (from === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\n// useRef 와는 다르다.\r\n// 블루프린트는 ref 를 설정할 수 없다.\r\nlet toasterRef: Toaster;\r\n\r\nconst Bath = () => {\r\n  const [checkDate, setDate] = useState<Date>(new Date());\r\n  const [eventUser, setEventUser] = useState({\r\n    date: new Date(\"1997-1-1\"),\r\n    name: \"undefined\",\r\n  });\r\n\r\n  const day_count = countingDays(checkDate, eventUser.date);\r\n  const person = whoIs(day_count, eventUser.name);\r\n\r\n  const onClick = (name: string) => {\r\n    addEvent(new Date(), name).then((e) => {\r\n      if (e) {\r\n        console.log(`${e.date}, ${e.name}`);\r\n\r\n        setEventUser(e);\r\n\r\n        addToast();\r\n      }\r\n    });\r\n  };\r\n\r\n  const toastBuild: IToastProps = {\r\n    icon: \"tick\",\r\n    intent: Intent.SUCCESS,\r\n    message: `오늘 날자, ${eventUser.name}(으)로 사용자를 바꿨습니다.`,\r\n    timeout: 3000,\r\n  };\r\n\r\n  // this 를 넘겨주는 처리를 어떻게 할 수 있을까?\r\n  // clas-component 에서는 this 를 주고 받고 할 수 있었는데 그 방법으로 될 가능성이 있다.\r\n  const toasterRefHandler = (ref: Toaster) => {\r\n    toasterRef = ref;\r\n  };\r\n\r\n  const addToast = () => {\r\n    if (toasterRef) {\r\n      toasterRef.show(toastBuild);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-app\">\r\n      <Toaster\r\n        ref={toasterRefHandler}\r\n        autoFocus={false}\r\n        position={Position.TOP}\r\n        usePortal={false}\r\n      />\r\n      <Navbar>\r\n        <NavbarGroup align={Alignment.LEFT}>\r\n          <NavbarHeading>Home Funny</NavbarHeading>\r\n          <NavbarDivider />\r\n          <Button\r\n            className={Classes.MINIMAL}\r\n            icon=\"home\"\r\n            text=\"Home\"\r\n            intent=\"primary\"\r\n          />\r\n        </NavbarGroup>\r\n      </Navbar>\r\n      <div>\r\n        <Card className=\"bp3-text-large bp3-running-text\">\r\n          <blockquote>\r\n            <NameTag name={person} />\r\n            <div>{day_count} days passed</div>\r\n          </blockquote>\r\n          <br />\r\n          <EventUser eventUser={eventUser} setEventUser={setEventUser} />\r\n          <Calendar setNewDate={setDate} />\r\n        </Card>\r\n      </div>\r\n\r\n      <ButtonGroup vertical={false} large={true}>\r\n        <Divider />\r\n        <Button intent={\"success\"} onClick={() => onClick(\"james\")}>\r\n          james confirm\r\n        </Button>\r\n        <Button intent={\"primary\"} onClick={() => onClick(\"henry\")}>\r\n          henry confirm\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <Divider />\r\n      <div>\r\n        <EventLog {...eventUser} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import { Tag, Intent } from \"@blueprintjs/core\";\r\n\r\nexport const NameTag = (props: { name: string }) => {\r\n  return (\r\n    <div>\r\n      <span>today is </span>\r\n      <Tag\r\n        intent={props.name === \"james\" ? Intent.PRIMARY : Intent.SUCCESS}\r\n        large={true}\r\n      >\r\n        {props.name}\r\n      </Tag>\r\n    </div>\r\n  );\r\n};\r\n","import { Classes } from '@blueprintjs/core';\r\nimport { DatePicker } from \"@blueprintjs/datetime\"\r\n\r\nexport const Calendar = (props:{setNewDate:any}) => {\r\n    const onDateChanged = (date:Date) => {\r\n        if (date) {\r\n            props.setNewDate(date);\r\n        }\r\n    }\r\n\r\n    const timePickerProps = {\r\n        date: new Date(),\r\n        highlightCurrentDay: true,\r\n        reverseMonthAndYearMenus: false,\r\n        shortcuts: false,\r\n        showActionsBar: false,\r\n        showTimeArrowButtons: false,\r\n        timePrecision: undefined,\r\n        useAmPm: false,\r\n    };\r\n\r\n    return (\r\n        <div className=\"bath-calendar-container\">\r\n            <DatePicker\r\n                className={Classes.ELEVATION_1}\r\n                onChange={onDateChanged}\r\n                {...timePickerProps}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp, } from \"firebase/app\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nexport default firebaseApp;\r\n","import firebaseApp from \"./firebase\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  orderBy,\r\n} from \"firebase/firestore/lite\";\r\n\r\nconst store = getFirestore(firebaseApp);\r\nlet eventLogIndex = 0;\r\n\r\nconst getAppStateSnapshot = async (documentName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    const docRef = doc(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      documentName\r\n    );\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return docSnapshot.data();\r\n    }\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst getEventLogSnapshot = async () => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    //const storeSnapshot = await getDocs(storeCollection);\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data());\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  let eventDateLog = await getEventLogSnapshot();\r\n  if (eventDateLog) {\r\n    const convertedDataform = eventDateLog.map((log) => {\r\n      return {\r\n        date: new Date(log.EventTime.seconds * 1000),\r\n        text: log.EventLog,\r\n      };\r\n    });\r\n\r\n    eventLogIndex = convertedDataform.length + 1;\r\n    return convertedDataform;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getEventState = async () => {\r\n  let list = await getAppStateSnapshot(\"stateLog\");\r\n  if (list) {\r\n    return {\r\n      eventDate: new Date(list.EventDate.seconds * 1000),\r\n      eventName: list.EventName,\r\n    };\r\n  } else {\r\n    return {\r\n      eventDate: new Date(\"1917-1-1\"),\r\n      eventName: \"undefined\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const queryDocument = async (eventId: number) => {\r\n  if (process.env.REACT_APP_COLLECTION_NAME) {\r\n    const collectionStore = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_NAME\r\n    );\r\n    const queried = query(collectionStore, where(\"eventId\", \"==\", eventId));\r\n\r\n    const querySnapshot = await getDocs(queried);\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      console.log(doc.id, \"=>\", data);\r\n    });\r\n  }\r\n};\r\n\r\n// class EventLog {\r\n//   date: Date;\r\n//   log: string;\r\n\r\n//   constructor(date: Date, log: string) {\r\n//     this.date = date;\r\n//     this.log = log;\r\n//   }\r\n// }\r\n\r\n// const EventLogSerializer = {\r\n//     toFirebase: (eventLog : EventLog) => {\r\n//         return {\r\n//             date: eventLog.date,\r\n//             log: eventLog.log,\r\n//         }\r\n//     },\r\n//     fromFirebase: (snapshot: DocumentData, options: any) => {\r\n//         const data = snapshot.data(options);\r\n//         return new EventLog(data.date, data.log);\r\n//     }\r\n// };\r\n\r\nexport const addEvent = async (currentDate: Date, userName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    const stateLogDocRef = doc(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      \"stateLog\"\r\n    );\r\n    await setDoc(stateLogDocRef, {\r\n      EventDate: currentDate,\r\n      EventName: userName,\r\n    });\r\n\r\n    if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n      const eventLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_EVENT_LOG,\r\n        `event${eventLogIndex}`\r\n      );\r\n      await setDoc(eventLogDocRef, {\r\n        EventTime: currentDate,\r\n        EventLog: `set ${userName}`,\r\n      });\r\n    }\r\n\r\n    return { date: currentDate, name: userName };\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","import React, { useEffect } from 'react'\r\nimport { getEventState } from \"../../logic/access\";\r\nimport { Tag, Intent } from '@blueprintjs/core';\r\n\r\nexport const EventUser = (props: {eventUser: {date: Date, name: string}, setEventUser: any}) => {\r\n\r\n    useEffect(() => {\r\n        const getEventContext = async () => {\r\n            const { eventDate, eventName } = await getEventState();\r\n\r\n            const log = `get context {${eventDate}: ${eventName}}`;\r\n            console.log(log);\r\n    \r\n            props.setEventUser({date:eventDate, name:eventName});\r\n        }\r\n\r\n        getEventContext();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const intent = (props.eventUser.name === \"james\") ? Intent.PRIMARY : Intent.SUCCESS;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h5><Tag key={props.eventUser.name} round={false} intent={intent}>{props.eventUser.name}</Tag> was use {props.eventUser.date.toLocaleDateString()}</h5>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getEventLog } from \"../../logic/access\";\r\nimport { Text, Collapse, Button } from '@blueprintjs/core';\r\n\r\nexport const EventLog = (props: {date:Date, name:string}) => {\r\n    const type : {date:Date, text:string}[] = [];\r\n    const [logState, setLogState] = useState(type);\r\n    const [logVisiblity, setLogVisiblity] = useState(true)\r\n\r\n    useEffect(() => {\r\n        getEventLog().then(log => {\r\n            console.log(log);\r\n\r\n            setLogState(log);\r\n        });\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => setLogVisiblity(!logVisiblity)} minimal={true} outlined={true}>\r\n                {logVisiblity ? \"감추기\" : \"보이기\"}\r\n            </Button>\r\n            <Collapse isOpen={logVisiblity}>\r\n                <pre>\r\n                    {logState.map((e, i:number) => {\r\n                        return <Text key={i++}>[{e.date.toLocaleString()}] {e.text}</Text>;\r\n                    })}\r\n                </pre>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Bath from \"component/Bath\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Bath />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}