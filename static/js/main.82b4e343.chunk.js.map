{"version":3,"sources":["logic/firebase.ts","logic/api/access.ts","logic/reducer/eventUser.ts","logic/reducer/bathUser.ts","logic/store.ts","component/Calendar/index.tsx","logic/type.ts","component/NameTag/index.tsx","logic/api/misc.ts","component/EventUser/index.tsx","component/LogParser/index.tsx","component/EventLog/index.tsx","component/HomeNavigation/index.tsx","component/Layout/index.tsx","component/AddEvent/index.tsx","component/TodayBathUser/index.tsx","pages/Bath/index.tsx","logic/api/wordTest.ts","component/WordTestPaper/FillTheBlanks/index.tsx","component/WordTestPaper/Dictation/index.tsx","component/WordTestPaper/index.tsx","pages/WordTest/index.tsx","component/WordTestLevelList/index.tsx","pages/WordTestHome/index.tsx","pages/Home/index.tsx","logic/api/ox.ts","component/WordTestWordRegist/WordInputCardFormItem/index.tsx","component/WordTestWordRegist/index.tsx","pages/WordTestRegist/index.tsx","index.tsx"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","getCollectionSnapshot","collection","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","getEventState","getEventLogSnapshot","eventDateLog","bathLogOnly","filter","log","EventLog","split","token","eventDate","Date","EventTime","seconds","eventName","console","storeCollection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","undefined","getEventLog","convertedDataform","date","text","addEvent","currentDate","collectionRef","addDoc","initialEventUserState","getTime","name","fetchEventUser","eventUserThuck","createAsyncThunk","eventUserSlice","createSlice","initialState","reducers","extraReducers","pending","type","state","fulfilled","action","payload","rejected","countingDays","from","fromDay","toLocaleDateString","diff","sign","Math","floor","abs","getBathUser","days","initialBathUserState","dayPassed","bathUserSlice","getTodayBathUser","newState","eventUser","bathUserReducer","actions","rootReducers","combineReducers","eventUserReducer","bathUser","configureStore","reducer","Calendar","props","className","fullscreen","onSelect","setNewDate","onDateChanged","toDate","UserName","james","henry","NameTag","color","toKrDateString","year","month","day","Text","Typography","EventUser","useSelector","Fragment","LogParser","who","event","logText","message","useState","logState","setLogState","useEffect","then","defaultActiveKey","Panel","header","e","i","Item","toLocaleString","HomeNavigation","location","useLocation","mode","selectedKeys","pathname","to","HomeOutlined","CalendarOutlined","CheckSquareOutlined","Header","L","Sider","Content","Footer","Layout","children","style","minHeight","theme","AddEvent","dispatch","useDispatch","addToast","success","labelCol","span","wrapperCol","onFinish","values","newLog","join","label","rules","required","placeholder","Option","value","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","htmlType","TodayBathUser","Bath","pickDate","setDate","updateTodayUser","useCallback","direction","title","getTestLevelList","list","Array","forEach","push","id","getWordTestSnapshot","level","getWordTest","testObject","test","Object","keys","key","addWordTest","stateLogDocRef","docData","word","desc","setDoc","BlankWords","FillTheBlanks","answerVisiblity","dataSource","index","example","partial","order","sentance","length","fill","definition","EditOutlined","fontSize","columns","dataIndex","width","showHeader","pagination","position","Dictation","onClick","audio","pronunciations","Audio","play","partOfSpeech","random","translation","answer","WordTestPaper","part1","part2","setTest","showAnswer","testList","wordType","JSON","parse","q","array","randomIndex","currentIndex","shuffle","count","round","slice","WordTest","params","useParams","WordTestLevelList","setList","WordTestHome","PlusCircleTwoTone","Home","initialWord","getPronunceAndExample","entries","entry","senses","sense","examples","exam","includes","pronounce","audioFile","fetchWordFromOx","word_id","apiurl","toLowerCase","options","method","headers","app_id","app_key","crosproxy","fetch","result","json","results","fetchPronunceAndExample","enties","lexicalEntries","WordInputCardFormItem","deleteItem","Select","labels","align","allowClear","MinusCircleTwoTone","WordTestWordRegist","testlist","setTestlist","formRef","useRef","current","setFieldsValue","saveTest","loading","content","duration","docName","completed","saveForm","override","stringify","alert","error","deleteFormItem","splice","display","alignItems","padding","layout","ref","flexGrow","initialValue","size","WordTestRegist","ReactDOM","render","StrictMode","basename","element","path","document","getElementById"],"mappings":"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","file":"static/js/main.82b4e343.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nimport { getFirestore, doc, getDoc } from \"firebase/firestore/lite\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const store = getFirestore(firebaseApp);\r\n\r\nexport const getCollectionSnapshot = async (\r\n  collection: string,\r\n  documentName: string\r\n) => {\r\n  const docRef = doc(store, collection, documentName);\r\n  const docSnapshot = await getDoc(docRef);\r\n  if (docSnapshot.exists()) {\r\n    return docSnapshot.data();\r\n  }\r\n};\r\n\r\n// export const getCollectionSnapshot = async (collectionName: string) => {\r\n//   const storeCollection = collection(store, collectionName);\r\n//   const storeSnapshot = await getDocs(storeCollection);\r\n//   return storeSnapshot.docs.map((doc) => doc.data());\r\n// };\r\n\r\nexport default store;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  addDoc,\r\n  orderBy,\r\n} from \"firebase/firestore/lite\";\r\nimport { EventType } from \"component/LogParser\";\r\n\r\nexport type EventLogType = {\r\n  date: Date;\r\n  log: string;\r\n};\r\n\r\ntype EventStateType = {\r\n  eventDate: Date,\r\n  eventName: string,\r\n}\r\n\r\ntype EventLogDocumentType = {\r\n  EventDate: Date,\r\n  EventName: string,\r\n}\r\n\r\nconst getAppStateSnapshot = (documentName: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_APP_STATE,\r\n      documentName\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getEventState = async () : Promise<EventStateType> => {\r\n  try {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const bathLogOnly = eventDateLog.filter((log) => {\r\n        const token = log.EventLog.split(\"|\");\r\n        const eventType = token[1] as EventType;\r\n\r\n        return (eventType === \"bath\") ? true : false;\r\n      });\r\n\r\n      for (const log of bathLogOnly) {\r\n        const token = log.EventLog.split(\"|\");\r\n        return {\r\n          eventDate: new Date(log.EventTime.seconds * 1000),\r\n          eventName: token[0],\r\n        }\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return {\r\n    eventDate: new Date(\"2021-11-29\"),\r\n    eventName: \"james\",\r\n  };\r\n};\r\n\r\nconst getEventLogSnapshot = async () => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data());\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  try {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const convertedDataform = eventDateLog.map((log) => {\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          text: log.EventLog,\r\n        };\r\n      });\r\n\r\n      return convertedDataform;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const queryDocument = async (eventId: number) => {\r\n  if (process.env.REACT_APP_COLLECTION_NAME) {\r\n    const collectionStore = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_NAME\r\n    );\r\n    const queried = query(collectionStore, where(\"eventId\", \"==\", eventId));\r\n\r\n    const querySnapshot = await getDocs(queried);\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      console.log(doc.id, \"=>\", data);\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// 이걸 완전히 변경한다\r\n// 일자별로 남긴 로그를 모두 확인할 수 있게 변경할텐데\r\n// DB 에 저장하는 방법이 문제다.\r\n// 우선 로그를 굳이 유니크하게 만들지 않고 차라리 삭제할 수 있게 하는것이 나을 수 있다.\r\n\r\nexport const addEvent = async (currentDate: Date, log: string) : Promise<EventLogType | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const collectionRef = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    await addDoc(collectionRef, {\r\n      EventTime: currentDate,\r\n      EventLog: log,\r\n    });\r\n  }\r\n\r\n  return { date: currentDate, log: log };\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getEventState } from \"logic/api/access\";\r\nimport { EventUser } from \"logic/type\";\r\n\r\n// eventUser 는 일단 fetch 를 사용하므로 슬라이스를 사용하는 것에 적당하다.\r\n\r\nconst initialEventUserState: EventUser = {\r\n  date: new Date(\"1917-1-1\").getTime(),\r\n  name: \"james\",\r\n};\r\n\r\nconst fetchEventUser = async (): Promise<EventUser> => {\r\n  const { eventDate, eventName } = await getEventState();\r\n  return { date: eventDate.getTime(), name: eventName as \"james\" | \"henry\"};\r\n};\r\n\r\nexport const eventUserThuck = createAsyncThunk(\"request\", async () => {\r\n  return await fetchEventUser();\r\n});\r\n\r\nconst eventUserSlice = createSlice({\r\n  name: \"eventUser\",\r\n  initialState: initialEventUserState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [eventUserThuck.pending.type]: (state) => {},\r\n    [eventUserThuck.fulfilled.type]: (\r\n      state,\r\n      action: PayloadAction<EventUser>\r\n    ) => {\r\n      const payload = action.payload;\r\n      state.date = payload.date;\r\n      state.name = payload.name;\r\n    },\r\n    [eventUserThuck.rejected.type]: (state) => {\r\n      console.log(\"eventUserThuck.rejected.type\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default eventUserSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BathUser, EventUser } from \"logic/type\";\r\n\r\n// 막상 BathUserActionType 타입으로 분기하지는 않는다.\r\n// 리듀서를 모두 방문하기 때문에 결국 type 키값으로 판단하게 된다.\r\nexport interface BathUserActionType {\r\n  type: \"request/whois\";\r\n  date: number;\r\n  eventUser: EventUser;\r\n}\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const fromDay = new Date(from.toLocaleDateString());\r\n  const currentDay = new Date(date.toLocaleDateString());\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (currentDay.getTime() - fromDay.getTime()) / one_day;\r\n  const sign = Math.sign(diff);\r\n  return Math.floor(Math.abs(diff)) * sign;\r\n};\r\n\r\nconst getBathUser = (days: number, name: string): string => {\r\n  if (days % 2 === 0) {\r\n    if (name === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (name === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst initialBathUserState: BathUser = {\r\n  name: \"henry\",\r\n  dayPassed: 0\r\n}\r\n\r\nconst bathUserReducer = (state: BathUser = initialBathUserState, action: BathUserActionType) : BathUser => {\r\n  if (action.type === \"request/whois\") {\r\n    const dayPassed = countingDays(\r\n      new Date(action.date),\r\n      new Date(action.eventUser.date)\r\n    );\r\n\r\n    const userName = getBathUser(dayPassed, action.eventUser.name);\r\n\r\n    //console.log(dayPassed, userName);\r\n\r\n    return {\r\n      name: userName,\r\n      dayPassed\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst bathUserSlice = createSlice({\r\n  name: \"bathUser\",\r\n  initialState: initialBathUserState,\r\n  reducers: {\r\n    getTodayBathUser: (\r\n      state: BathUser,\r\n      action: PayloadAction<BathUserActionType>\r\n    ) => {\r\n      const newState = bathUserReducer(state, action.payload);\r\n\r\n      // 오브젝트 복사 부분이 문제가 되는 것 같다.\r\n      state.name = newState.name;\r\n      state.dayPassed = newState.dayPassed;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nexport const { getTodayBathUser } = bathUserSlice.actions;\r\n\r\nexport default bathUserSlice.reducer;\r\n","import { EventUser, BathUser } from \"./type\";\r\nimport eventUserReducer from \"./reducer/eventUser\";\r\nimport bathUserReducer from \"./reducer/bathUser\";\r\nimport { combineReducers, configureStore, Reducer } from \"@reduxjs/toolkit\";\r\n\r\nexport type RootState = {\r\n  eventUser: EventUser;\r\n  bathUser: BathUser;\r\n};\r\n\r\n// 런타임 오류는 섞어쓰는 것 때문인것 같다.\r\n\r\nconst rootReducers: Reducer<RootState> = combineReducers({\r\n  eventUser: eventUserReducer,\r\n  bathUser: bathUserReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducers,\r\n  //devTools: true,\r\n});\r\n\r\nexport default store;\r\n","import { Calendar as DatePicker } from \"antd\";\r\n\r\nexport const Calendar = (props: { setNewDate: any }) => {\r\n  const onDateChanged = (date: Date) => {\r\n    props.setNewDate(date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-calendar-container\">\r\n      <DatePicker\r\n        fullscreen={false}\r\n        onSelect={(date: moment.Moment) => {\r\n          onDateChanged(date.toDate());\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export type BathUser = {\r\n  name: string;\r\n  dayPassed: number;\r\n};\r\n\r\nexport type EventUser = {\r\n  date: number;\r\n  name: \"james\" | \"henry\";\r\n};\r\n\r\nexport type EventLog = {\r\n  date: number;\r\n  log: string;\r\n};\r\n\r\ntype UserNameType = {\r\n  [index: string]: string;\r\n};\r\n\r\nexport const UserName: UserNameType = {\r\n  james: \"준우\",\r\n  henry: \"건우\",\r\n};\r\n\r\nexport type WordTestType = {\r\n  [index: string]: string;\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { UserName } from \"logic/type\";\r\n\r\nexport const NameTag = (props: { name: string }) => {\r\n  return (\r\n    <Tag color={props.name === \"james\" ? \"processing\" : \"success\"}>\r\n      {UserName[props.name]}\r\n    </Tag>\r\n  );\r\n};\r\n","export const toKrDateString = (date: Date) : string => {\r\n    return date.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n      });    \r\n}","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const EventUser = () => {\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>\r\n        마지막으로 <NameTag name={eventUser.name} />가{\" \"}\r\n        {toKrDateString(new Date(eventUser.date))} 에 사용했습니다.\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { NameTag } from \"component/NameTag\";\r\nimport React from \"react\";\r\n\r\ntype LogParserProps = {\r\n  log: string;\r\n};\r\n\r\nexport type EventType = \"bath\" | \"custom\" | \"ban\";\r\n\r\nexport const LogParser = ({ log }: LogParserProps) => {\r\n  //const newLog = [values.who, values.event, values.log].join(\"|\");\r\n  const token = log.split(\"|\");\r\n  const who = token[0];\r\n  const event = token[1] as EventType;\r\n  const logText = token[2];\r\n\r\n  let message = \"\";\r\n  switch (event) {\r\n    case \"bath\":\r\n      message = \"화장실 쓰는 날\";\r\n      break;\r\n    case \"ban\":\r\n      message = `${logText} 금지`;\r\n      break;\r\n    default:\r\n      message = logText;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <NameTag name={who} />\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getEventLog } from \"../../logic/api/access\";\r\nimport { Collapse, Timeline } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"logic/store\";\r\nimport { LogParser } from \"component/LogParser\";\r\n\r\nexport const EventLog = () => {\r\n  const type: { date: Date; text: string }[] = [];\r\n  const [logState, setLogState] = useState(type);\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  useEffect(() => {\r\n    getEventLog().then((log) => {\r\n      setLogState(log);\r\n    });\r\n  }, [eventUser]);\r\n\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={[1]}>\r\n        <Collapse.Panel header=\"Event Log\" key=\"1\">\r\n          <Timeline>\r\n            {logState.map((e, i: number) => {\r\n              return (\r\n                <Timeline.Item key={i++}>\r\n                  {e.date.toLocaleString()} <LogParser log={e.text} />\r\n                </Timeline.Item>\r\n              );\r\n            })}\r\n          </Timeline>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  HomeOutlined,\r\n  CheckSquareOutlined,\r\n  CalendarOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nexport const HomeNavigation = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\r\n      <Menu.Item key=\"/\">\r\n        <Link to=\"/\">\r\n          <HomeOutlined /> Home Funny\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/bath\">\r\n        <Link to=\"/bath\">\r\n          <CalendarOutlined /> Bath\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/wordtest\">\r\n        <Link to=\"/wordtest\">\r\n          <CheckSquareOutlined /> Word Test\r\n        </Link>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Layout as L, Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserView, MobileView } from \"react-device-detect\";\r\n\r\nimport \"./style.css\";\r\nimport { HomeNavigation } from \"component/HomeNavigation\";\r\n\r\nconst { Header, Sider, Content, Footer } = L;\r\n\r\ntype Props = {};\r\n\r\nexport const Layout: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <L style={{ minHeight: \"100vh\" }}>\r\n      <Header className=\"layout-print-display-none\">\r\n        <div>Home Funny</div>\r\n      </Header>\r\n      <BrowserView>\r\n        <L>\r\n          <Sider theme=\"light\" className=\"layout-print-display-none\">\r\n            <Menu mode=\"vertical\">\r\n              <Menu.Item key=\"bath\">\r\n                <Link to=\"/bath\">오늘의 화장실</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"wordtest\">\r\n                <Link to=\"/wordtest\">정상 단어 테스트</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Content className=\"layout-content\">{children}</Content>\r\n        </L>\r\n      </BrowserView>\r\n      <MobileView>\r\n        <L className=\"layout-print-display-none\">\r\n          <HomeNavigation />\r\n        </L>\r\n        <Content className=\"layout-content\">{children}</Content>\r\n      </MobileView>\r\n      <Footer className=\"layout-print-display-none\">\r\n        This is home funny, 2021\r\n      </Footer>\r\n    </L>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Form, Input, Select, message, Button } from \"antd\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { addEvent } from \"logic/api/access\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { UserName } from \"logic/type\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\ntype AddEventProp = {\r\n  date: Date;\r\n};\r\n\r\nexport const AddEvent = ({ date }: AddEventProp) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinish = (values: any) => {\r\n    const newLog = [values.who, values.event, values.log].join(\"|\");\r\n    console.log(newLog);\r\n\r\n    addEvent(date, newLog).then((e) => {\r\n      if (e) {\r\n        addToast(`${toKrDateString(date)} ${e.log}`);\r\n\r\n        dispatch(eventUserThuck());\r\n      } else {\r\n        console.log(\"add event failed\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const addToast = (text: string) => {\r\n    message.success(text);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: { span: 2 },\r\n    wrapperCol: { span: 8 },\r\n  };\r\n\r\n  return (\r\n    <Form {...layout} onFinish={onFinish}>\r\n      <Form.Item name=\"event\" label=\"무슨일?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"무슨일?\">\r\n          <Select.Option value=\"bath\">화장실 사용하는 날</Select.Option>\r\n          <Select.Option value=\"ban\">금지</Select.Option>\r\n          <Select.Option value=\"custom\">직접입력</Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item name=\"who\" label=\"누구?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"누구?\">\r\n          <Select.Option value=\"james\">\r\n            <NameTag name=\"james\" />\r\n          </Select.Option>\r\n          <Select.Option value=\"henry\">\r\n            <NameTag name=\"henry\" />\r\n          </Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item\r\n        noStyle\r\n        shouldUpdate={(prevValues, currentValues) =>\r\n          prevValues.event !== currentValues.event\r\n        }\r\n      >\r\n        {({ getFieldValue }) =>\r\n          getFieldValue(\"event\") !== \"bath\" ? (\r\n            <Form.Item name=\"log\" label=\"기록\" rules={[{ required: true }]}>\r\n              <Input placeholder=\"직접입력\" />\r\n            </Form.Item>\r\n          ) : null\r\n        }\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          등록\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\n\r\nexport const TodayBathUser = (props: { pickDate: Date }) => {\r\n  const bathUser = useSelector((state: RootState) => state.bathUser);\r\n\r\n  return (\r\n    <div>\r\n      화장실? <NameTag name={bathUser.name} /> 차례\r\n    </div>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport { Card, Button, Divider, message, Space } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { getTodayBathUser } from \"logic/reducer/bathUser\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { AddEvent } from \"component/AddEvent\";\r\nimport { TodayBathUser } from \"component/TodayBathUser\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst Bath = () => {\r\n  const [pickDate, setDate] = useState<Date>(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  const updateTodayUser = useCallback(\r\n    (date: Date) => {\r\n      dispatch(\r\n        getTodayBathUser({\r\n          type: \"request/whois\",\r\n          date: date.getTime(),\r\n          eventUser: eventUser,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, eventUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventUserThuck());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateTodayUser(pickDate);\r\n    // 이벤트 핸들러에 해당한다.\r\n  }, [pickDate, eventUser, updateTodayUser]);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"bath-app\">\r\n        <Space direction=\"vertical\">\r\n          <Calendar setNewDate={setDate} />\r\n\r\n          <Card title={toKrDateString(pickDate)}>\r\n            <TodayBathUser pickDate={pickDate} />\r\n            <EventUser />\r\n          </Card>\r\n          <AddEvent date={pickDate} />\r\n        </Space>\r\n        <Divider />\r\n        <EventLog />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore/lite\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const getTestLevelList = async () => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const storeCollection = collection(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST\r\n      );\r\n\r\n      const storeSnapshot = await getDocs(storeCollection);\r\n\r\n      let list = Array<string>();\r\n      storeSnapshot.forEach((e) => list.push(e.id));\r\n\r\n      return list;\r\n    } else {\r\n      return Array<string>();\r\n    }\r\n  } catch {\r\n    return Array<string>();\r\n  }\r\n};\r\n\r\nconst getWordTestSnapshot = async (level: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n      level\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getWordTest = async (level: string): Promise<WordTestType> => {\r\n  try {\r\n    let testObject = await getWordTestSnapshot(level);\r\n    if (testObject) {\r\n      let test: WordTestType = {};\r\n      for (const key of Object.keys(testObject)) {\r\n        test[key] = testObject[key];\r\n      }\r\n      return test;\r\n    }\r\n  } catch {}\r\n\r\n  return {};\r\n};\r\n\r\nexport const addWordTest = async (level: string, list: Array<WordTestType>) => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const stateLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n        level\r\n      );\r\n\r\n      let docData = {};\r\n      list.map((e) => {\r\n        docData = { ...docData, [e.word]: e.desc };\r\n        return e;\r\n      });\r\n\r\n      await setDoc(stateLogDocRef, docData);\r\n    }\r\n\r\n    return true;\r\n  } catch {}\r\n\r\n  return false;\r\n};\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst BlankWords = ({ list }: { list: Array<WordType> }) => {\r\n  return (\r\n    <div className=\"blank-words-container\">\r\n      {list.map((word) => (\r\n        <span key={word.word}>{word.word}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const FillTheBlanks = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const dataSource = list.map((e, index) => {\r\n    // 이건 잘 안된다.\r\n    // 사전에서 검색하는 예제는 시제가 적요된 경우가 있어서 그대로 쓸 수 없다.\r\n    if (e.example) {\r\n      const partial = e.example.split(e.word);\r\n\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: (\r\n          <div className=\"fill-blank-table-row\">\r\n            {partial[0]}\r\n            <span> </span>\r\n            <span>\r\n              {answerVisiblity\r\n                ? `[ ${e.word} ]`\r\n                : Array(e.word.length).fill(\"__\").join(\"\")}\r\n            </span>\r\n            <span> </span>\r\n            {partial[1]}\r\n          </div>\r\n        ),\r\n      };\r\n    } else {\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: <div className=\"fill-blank-table-row\">{e.definition}</div>,\r\n      };\r\n    }\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Sentance\",\r\n      dataIndex: \"sentance\",\r\n      key: \"key\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"fill-blank-test-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the correct\r\n        word from the below.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        showHeader={false}\r\n        pagination={{ position: [] }}\r\n      />\r\n      <BlankWords list={list} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FillTheBlanks;\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const Dictation = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const pronunce = (audio: string) => {\r\n    new Audio(audio).play();\r\n  };\r\n\r\n  const dataSource = list.map((e, index) => {\r\n    return {\r\n      key: e.word,\r\n      order: `${index + 1}.`,\r\n      definition: (\r\n        <div\r\n          onClick={() => pronunce(e.pronunciations)}\r\n          className=\"dictation-table-definition-row\"\r\n        >\r\n          <span>{e.partOfSpeech}.</span>\r\n          <span> </span>\r\n          <span>{Math.random() < 0.5 ? e.definition : e.translation}</span>\r\n        </div>\r\n      ),\r\n      answer: (\r\n        <div className=\"dictation-table-answer-row\">\r\n          <div className=\"dictation-table-answer-row-word\">\r\n            {answerVisiblity ? e.word : \"\"}\r\n          </div>\r\n          <div className=\"dictation-table-answer-row-translate\">\r\n            {answerVisiblity ? e.translation : \"\"}\r\n          </div>\r\n        </div>\r\n      ),\r\n    };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Definition\",\r\n      dataIndex: \"definition\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"English Word\",\r\n      dataIndex: \"answer\",\r\n      key: \"key\",\r\n      width: \"25%\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"word-test-dictation\">\r\n      <h2 className=\"word-test-dictation-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the words.\r\n        Write both Present and Past forms for verbs.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={{ position: [] }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dictation;\r\n","import { WordType } from \"logic/api/ox\";\r\nimport { getWordTest } from \"logic/api/wordTest\";\r\nimport { WordTestType } from \"logic/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport FillTheBlanks from \"./FillTheBlanks\";\r\nimport Dictation from \"./Dictation\";\r\n\r\nimport \"./style.css\";\r\nimport { Button } from \"antd\";\r\n\r\nconst shuffle = (array: any[]) => {\r\n  let currentIndex = array.length;\r\n  let randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\ntype SaveType = {\r\n  part1: Array<WordType>;\r\n  part2: Array<WordType>;\r\n};\r\n\r\nexport const WordTestPaper = ({ level }: { level?: string }) => {\r\n  const [test, setTest] = useState<SaveType>({ part1: [], part2: [] });\r\n  const [answerVisiblity, showAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let testList = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          testList.push(wordType);\r\n        }\r\n\r\n        const q = shuffle(testList);\r\n        const count = Math.round(testList.length / 2);\r\n\r\n        setTest({ part1: q.slice(0, count), part2: q.slice(count) });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onClickShowAnswer = (visible: boolean) => {\r\n    showAnswer(visible);\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-test-layout\">\r\n      <h2>{`<${level}>`}</h2>\r\n      <Dictation list={[...test.part1]} answerVisiblity={answerVisiblity} />\r\n      <br />\r\n      <FillTheBlanks list={[...test.part2]} answerVisiblity={answerVisiblity} />\r\n      <Button onClick={() => onClickShowAnswer(!answerVisiblity)}>\r\n        정답보기\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestPaper } from \"component/WordTestPaper\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTest = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestPaper {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTest;\r\n","import { Button, Menu } from \"antd\";\r\nimport { getTestLevelList } from \"logic/api/wordTest\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestLevelList = () => {\r\n  const [list, setList] = useState<Array<string>>([]);\r\n\r\n  useEffect(() => {\r\n    getTestLevelList().then((testList) => {\r\n      setList(testList);\r\n    });\r\n  }, []);\r\n\r\n  const deleteLevel = (level: string) => {};\r\n\r\n  return (\r\n    <Menu>\r\n      {list.map((level) => (\r\n        <Menu.Item key={level}>\r\n          <div className=\"word-test-level-list-link-container\">\r\n            <Link to={`/wordtest/test/${level}`}>{level}</Link>\r\n            <Button type=\"link\">\r\n              <Link to={`/wordtest/regist/${level}`}>수정</Link>\r\n            </Button>\r\n            <Button type=\"link\" onClick={() => deleteLevel(level)}>\r\n              삭제\r\n            </Button>\r\n          </div>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { WordTestLevelList } from \"component/WordTestLevelList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestHome = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-home-content-container\">\r\n        <div>\r\n          <Button>\r\n            <Link to=\"/wordtest/regist\">\r\n              새 시험 등록 <PlusCircleTwoTone />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n        <div className=\"word-test-home-content-row\">\r\n          <WordTestLevelList />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestHome;\r\n","import \"./style.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"home-content-container\">Welcome to Home Funny !</div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export type WordType = {\r\n  word: string;\r\n  partOfSpeech: string;\r\n  definition: string;\r\n  translation: string;\r\n  example: string;\r\n  pronunciations: string;\r\n};\r\n\r\nexport const initialWord: WordType = {\r\n  word: \"\",\r\n  partOfSpeech: \"Noun\",\r\n  definition: \"\",\r\n  translation: \"\",\r\n  example: \"\",\r\n  pronunciations: \"\",\r\n};\r\n\r\ntype OxEntryType = {\r\n  etymologies: Array<any>;\r\n  language: string;\r\n  pronunciations: Array<any>;\r\n  senses: Array<any>;\r\n};\r\n\r\ntype OxResultType = {\r\n  text: string;\r\n  lexicalCategory: { id: string; text: string };\r\n  entries: Array<OxEntryType>;\r\n};\r\n\r\nconst fromEnties = ({\r\n  text,\r\n  lexicalCategory,\r\n  entries,\r\n}: OxResultType): WordType | undefined => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n    const pronunciations = entry.pronunciations[\"0\"].audioFile;\r\n\r\n    let definitions = Array<{ text: string; example: string }>();\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.definitions) {\r\n        definitions.push({\r\n          text: sense.definitions[0],\r\n          example: sense.examples![0].text,\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      word: text,\r\n      partOfSpeech: lexicalCategory.text,\r\n      definition: definitions[0].text,\r\n      translation: \"\",\r\n      example: definitions[0].example,\r\n      pronunciations: pronunciations,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunce = ({ entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    return entry.pronunciations[\"0\"].audioFile;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunceAndExample = ({ text, entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.examples) {\r\n        // 예문의 경우 시제가 다르게 들어갈 수 있어서 깔끔하게 되지 않는다.\r\n\r\n        for (const exam of sense.examples) {\r\n          if (exam.text.includes(text)) {\r\n            return {\r\n              pronounce: entry.pronunciations[\"0\"].audioFile,\r\n              example: exam.text,\r\n            };\r\n          }\r\n        }\r\n\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n          example: sense.examples[\"0\"].text,\r\n        };\r\n      } else {\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n        };\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const fetchWordFromOx = async (text: string) => {\r\n  if (process.env.REACT_APP_OX_APP_ID && process.env.REACT_APP_OX_APP_KEY) {\r\n    const language = \"en-gb\";\r\n    const word_id = text;\r\n    const apiurl = `https://od-api.oxforddictionaries.com:443/api/v2/entries/${language}/${word_id.toLowerCase()}`;\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        app_id: process.env.REACT_APP_OX_APP_ID,\r\n        app_key: process.env.REACT_APP_OX_APP_KEY,\r\n      },\r\n    };\r\n\r\n    const crosproxy = `https://home-funny-server.herokuapp.com/${apiurl}`;\r\n\r\n    const result = await fetch(crosproxy, options);\r\n    const json = await result.json();\r\n    if (json.results) {\r\n      return json.results;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const searchWord = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n\r\n  let wordDefinition = Array<WordType>();\r\n\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      const cov = fromEnties(e);\r\n      cov && wordDefinition.push(cov);\r\n    }\r\n  }\r\n\r\n  return wordDefinition;\r\n};\r\n\r\nexport const fetchPronunciations = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunce(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport const fetchPronunceAndExample = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunceAndExample(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n","import { Button, Form, Input, Select, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { MinusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\ntype Props = {\r\n  index: number;\r\n  word?: string;\r\n  deleteItem: (index: number, text: string) => void;\r\n};\r\n\r\nconst WordInputCardFormItem = ({ index, word, deleteItem }: Props) => {\r\n  const { Option } = Select;\r\n\r\n  const labels: WordType = {\r\n    word: \"단어\",\r\n    partOfSpeech: \"품사\",\r\n    definition: \"영문 뜻\",\r\n    translation: \"한글 뜻\",\r\n    example: \"예제\",\r\n    pronunciations: \"\",\r\n  };\r\n\r\n  return (\r\n    <Form.Item label={`Q.${index + 1}`}>\r\n      <Space align=\"start\">\r\n        <Form.Item name={[index, \"word\"]} rules={[{ required: true }]}>\r\n          <Input placeholder={labels[\"word\"]} allowClear />\r\n        </Form.Item>\r\n        <Form.Item name={[index, \"partOfSpeech\"]}>\r\n          <Select placeholder={labels[\"partOfSpeech\"]}>\r\n            <Option value=\"Noun\">Noun</Option>\r\n            <Option value=\"Verb\">Verb</Option>\r\n            <Option value=\"Adjective\">Adjective</Option>\r\n            <Option value=\"Adverb\">Adverb</Option>\r\n            <Option value=\"Pronoun\">Pronoun</Option>\r\n            <Option value=\"Conjunction\">Conjunction</Option>\r\n            <Option value=\"Preposition\">Preposition</Option>\r\n            <Option value=\"Interjection\">Interjection</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Button onClick={() => word && deleteItem(index, word)}>\r\n          <MinusCircleTwoTone /> 삭제\r\n        </Button>\r\n      </Space>\r\n      <Form.Item name={[index, \"definition\"]}>\r\n        <TextArea placeholder={labels[\"definition\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"translation\"]}>\r\n        <Input placeholder={labels[\"translation\"]} allowClear></Input>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"example\"]}>\r\n        <TextArea placeholder={labels[\"example\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default WordInputCardFormItem;\r\n","import { Button, Form, FormInstance, Input, message, Space } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\nimport { addWordTest, getWordTest } from \"logic/api/wordTest\";\r\nimport { fetchPronunceAndExample, initialWord, WordType } from \"logic/api/ox\";\r\nimport WordInputCardFormItem from \"./WordInputCardFormItem\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const WordTestWordRegist = ({ level }: { level?: string }) => {\r\n  const [testlist, setTestlist] = useState<Array<WordType>>([initialWord]);\r\n  const formRef = useRef<FormInstance>(null);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let list = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          list.push(wordType);\r\n        }\r\n\r\n        setTestlist(list);\r\n\r\n        if (formRef.current) {\r\n          list.map((word, index) => {\r\n            formRef.current?.setFieldsValue({\r\n              [index]: {\r\n                ...word,\r\n              },\r\n            });\r\n            return word;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const addInputWord = () => {\r\n    setTestlist((list) => [...list, initialWord]);\r\n  };\r\n\r\n  const saveTest = async (values: any) => {\r\n    console.log(values);\r\n\r\n    message.loading({\r\n      content: \"저장을 하고 있습니다...\",\r\n      key: \"updatable\",\r\n      duration: 0,\r\n    });\r\n\r\n    const docName = values[\"title\"];\r\n\r\n    let completed = true;\r\n    let saveForm = Array<WordTestType>();\r\n\r\n    for (const key in values) {\r\n      if (key === \"title\") {\r\n        continue;\r\n      }\r\n\r\n      const { word, partOfSpeech, definition, translation, example } =\r\n        values[key];\r\n      if (!word) {\r\n        continue;\r\n      }\r\n\r\n      const result = await fetchPronunceAndExample(word);\r\n      if (result) {\r\n        const override: WordType = {\r\n          word: word,\r\n          partOfSpeech: partOfSpeech,\r\n          definition: definition,\r\n          translation: translation,\r\n          example: example ? example : result.example,\r\n          pronunciations: result.pronounce,\r\n        };\r\n\r\n        saveForm.push({\r\n          word: word,\r\n          desc: JSON.stringify(override),\r\n        });\r\n      } else {\r\n        alert(`${word} 잘못된 단어가 있습니다.`);\r\n        completed = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (completed) {\r\n      const result = await addWordTest(docName, saveForm);\r\n      if (result) {\r\n        message.success({\r\n          content: \"저장했습니다.\",\r\n          key: \"updatable\",\r\n          duration: 2,\r\n        });\r\n      } else {\r\n        message.error({ content: \"서버에 접속할 수 없습니다.\", duration: 2 });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteFormItem = (index: number, text: string) => {\r\n    setTestlist((list) => {\r\n      if (text === \"\") {\r\n        return list.splice(index, 1);\r\n      } else {\r\n        return list.filter((e) => e.word !== text);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", alignItems: \"flex-end\", padding: \"1rem\" }}>\r\n      <Form\r\n        onFinish={saveTest}\r\n        layout=\"vertical\"\r\n        ref={formRef}\r\n        style={{ flexGrow: \"1\" }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true }]}\r\n          label=\"테스트이름\"\r\n          initialValue={level}\r\n        >\r\n          <Input placeholder=\"정상 레벨 또는 워크북 페이지\" />\r\n        </Form.Item>\r\n        {testlist.map((e, index) => (\r\n          <WordInputCardFormItem\r\n            key={index}\r\n            index={index}\r\n            word={level ? e.word : undefined}\r\n            deleteItem={deleteFormItem}\r\n          />\r\n        ))}\r\n        <Space size={40}>\r\n          <Button onClick={addInputWord}>\r\n            단어 추가 <PlusCircleTwoTone />\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            저장\r\n          </Button>\r\n        </Space>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestWordRegist } from \"component/WordTestWordRegist\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestRegist = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestWordRegist {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestRegist;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"logic/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Bath from \"pages/Bath\";\r\nimport WordTest from \"pages/WordTest\";\r\nimport WordTestHome from \"pages/WordTestHome\";\r\nimport Home from \"pages/Home\";\r\n\r\nimport \"./index.css\";\r\nimport WordTestRegist from \"pages/WordTestRegist\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename=\"/homefunny\">\r\n        <Routes>\r\n          <Route index element={<Home />} />\r\n          <Route path=\"/bath\" element={<Bath />} />\r\n          <Route path=\"/wordtest\" element={<WordTestHome />} />\r\n          <Route path=\"/wordtest/regist/\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/regist/:level\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/test/:level\" element={<WordTest />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}