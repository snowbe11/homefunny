{"version":3,"sources":["logic/firebase.ts","logic/api/misc.ts","logic/api/eventLog.ts","logic/reducer/eventUser.ts","logic/reducer/bathUser.ts","logic/store.ts","component/Calendar/index.tsx","logic/type.ts","component/NameTag/index.tsx","component/EventUser/index.tsx","component/LogParser/index.tsx","component/EventLog/index.tsx","component/HomeNavigation/index.tsx","component/Layout/index.tsx","component/AddEvent/index.tsx","component/TodayBathUser/index.tsx","pages/Bath/index.tsx","logic/api/wordTest.ts","component/WordTestPaper/FillTheBlanks/index.tsx","component/WordTestPaper/Dictation/index.tsx","component/WordTestPaper/index.tsx","pages/WordTest/index.tsx","component/WordTestLevelList/index.tsx","pages/WordTestHome/index.tsx","pages/Home/index.tsx","logic/api/ox.ts","component/WordTestWordRegist/WordInputCardFormItem/index.tsx","component/WordTestWordRegist/index.tsx","pages/WordTestRegist/index.tsx","component/Timeline/index.tsx","pages/TimelineView/index.tsx","index.tsx"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","getCollectionSnapshot","collection","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","toKrDateString","date","toLocaleDateString","year","month","day","splitLogToContents","log","token","split","name","type","text","time","getEventLogSnapshot","Date","storeCollection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","undefined","getEventByDate","timefrom","Timestamp","fromDate","setDate","getDate","timeto","where","getRecentBathEvent","eventDateLog","bathLogOnly","filter","EventLog","EventTime","seconds","console","getTodayEvent","getEventAt","toDateString","getEventLog","convertedDataform","addEvent","currentDate","collectionRef","addDoc","initialEventUserState","getTime","fetchEventUser","eventUserThuck","createAsyncThunk","eventUserSlice","createSlice","initialState","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","countingDays","from","fromDay","diff","sign","Math","floor","abs","getBathUser","days","initialBathUserState","dayPassed","bathUserSlice","getTodayBathUser","newState","eventUser","bathUserReducer","actions","rootReducers","combineReducers","eventUserReducer","bathUser","configureStore","reducer","Calendar","props","className","fullscreen","onSelect","setNewDate","onDateChanged","toDate","UserName","james","henry","NameTag","color","Text","Typography","EventUser","useSelector","Fragment","LogParser","message","useState","logState","setLogState","useEffect","then","defaultActiveKey","Panel","header","e","i","Item","toLocaleString","HomeNavigation","location","useLocation","mode","selectedKeys","pathname","to","CalendarOutlined","CheckSquareOutlined","ClockCircleOutlined","Header","L","Sider","Content","Footer","Layout","children","style","minHeight","theme","align","src","width","height","alt","AddEvent","dispatch","useDispatch","addToast","success","labelCol","span","wrapperCol","onFinish","values","newLog","who","event","eventTime","join","label","rules","required","placeholder","Option","value","defaultPickerValue","moment","use12Hours","format","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","htmlType","TodayBathUser","Bath","pickDate","updateTodayUser","useCallback","direction","title","getTestLevelList","list","Array","forEach","push","id","getWordTestSnapshot","level","getWordTest","testObject","test","Object","keys","key","addWordTest","stateLogDocRef","docData","word","desc","setDoc","BlankWords","FillTheBlanks","answerVisiblity","dataSource","index","example","partial","order","sentance","length","fill","definition","EditOutlined","fontSize","columns","dataIndex","showHeader","pagination","position","Dictation","onClick","audio","pronunciations","Audio","play","partOfSpeech","random","translation","answer","WordTestPaper","part1","part2","setTest","showAnswer","testList","wordType","JSON","parse","q","array","randomIndex","currentIndex","shuffle","count","round","slice","window","print","WordTest","params","useParams","WordTestLevelList","setList","WordTestHome","PlusCircleTwoTone","Paragraph","Title","Home","initialWord","getPronunceAndExample","entries","entry","senses","sense","examples","exam","includes","pronounce","audioFile","fetchWordFromOx","word_id","apiurl","toLowerCase","options","method","headers","app_id","app_key","crosproxy","fetch","result","json","results","fetchPronunceAndExample","enties","lexicalEntries","WordInputCardFormItem","deleteItem","Select","labels","allowClear","MinusCircleTwoTone","WordTestWordRegist","testlist","setTestlist","formRef","useRef","current","setFieldsValue","onValuesChange","changedValues","allValues","parseInt","saveTest","loading","content","duration","docName","completed","saveForm","override","stringify","alert","error","deleteFormItem","splice","display","alignItems","padding","layout","ref","flexGrow","initialValue","size","WordTestRegist","Timeline","logs","events","sort","b","l_date","r_date","user","backgroundColor","now","currentActived","valueOf","currentWork","tagTime","toLocaleTimeString","TimelineView","todayEvent","setTodayEvent","setTime","setInterval","filteredLogs","ReactDOM","render","StrictMode","basename","element","path","document","getElementById"],"mappings":"qfAsBMA,EAAcC,YAXU,CAC5BC,OAAQC,0CACRC,WAAYD,kCACZE,UAAWF,kBACXG,cAAeH,8BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAMJO,EAAQC,YAAaX,GAErBY,EAAqB,uCAAG,WACnCC,EACAC,GAFmC,iBAAAC,EAAA,6DAI7BC,EAASC,YAAIP,EAAOG,EAAYC,GAJH,SAKTI,YAAOF,GALE,YAK7BG,EAL6B,QAMnBC,SANmB,yCAO1BD,EAAYE,QAPc,2CAAH,wDAiBnBX,IC3CFY,EAAiB,SAACC,GAC3B,OAAOA,EAAKC,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,OACPC,IAAK,aAaAC,EAAqB,SAACC,GACjC,IAAMC,EAAQD,EAAIE,MAAM,KACxB,MAAO,CACLC,KAAMF,EAAM,GACZG,KAAMH,EAAM,GACZI,KAAMJ,EAAM,GACZK,KAAML,EAAM,KCIVM,GATE,IAAIC,KASa,uCAAG,gCAAAtB,EAAA,6DAElBuB,EAAkBzB,YACtBH,EACAP,YAEIoC,EAAaC,YAAMF,EAAiBG,YAAQ,YAAa,SANvC,SAOIC,YAAQH,GAPZ,cAOlBI,EAPkB,yBAQjBA,EAAcC,KAAKC,KAAI,SAAC5B,GAAD,OAASA,EAAII,WARnB,qCAUjByB,GAViB,4CAAH,sDAcnBC,EAAc,uCAAG,WAAOxB,GAAP,uBAAAR,EAAA,6DAEbuB,EAAkBzB,YACtBH,EACAP,YAGI6C,EAAWC,IAAUC,SAAS3B,GACpCA,EAAK4B,QAAQ5B,EAAK6B,UAAY,GACxBC,EAAUJ,IAAUC,SAAS3B,GAC/BgB,EAAaC,YAAMF,EAAiBgB,YAAM,YAAa,KAAMN,GAAWM,YAAM,YAAa,KAAMD,IAVlF,SAYSX,YAAQH,GAZjB,cAYbI,EAZa,yBAaZA,EAAcC,KAAKC,KAAI,SAAC5B,GAAD,OAASA,EAAII,WAbxB,sCAeZyB,GAfY,4CAAH,sDAmBPS,EAAkB,uCAAG,wCAAAxC,EAAA,+EAEHqB,IAFG,YAExBoB,EAFwB,yBAItBC,EAAcD,EAAaE,QAAO,SAAC7B,GAEvC,MAAiB,SADAD,EAAmBC,EAAI8B,UAAhC1B,QALkB,cASVwB,GATU,gEASjB5B,EATiB,UAUTD,EAAmBC,EAAI8B,UAAhCzB,EAVkB,EAUlBA,KAVkB,kBAWnB,CACLX,KAAM,IAAIc,KAA6B,IAAxBR,EAAI+B,UAAUC,SAC7BhC,IAAKK,IAbmB,iMAkB9B4B,QAAQjC,IAAR,MAlB8B,iCAqBzB,CACLN,KAAM,IAAIc,KAAK,cACfR,IAAK,UAvByB,uEAAH,qDA2BlBkC,EAAa,uCAAG,sBAAAhD,EAAA,+EACpBiD,EAAW,IAAI3B,OADK,2CAAH,qDAIb2B,EAAU,uCAAG,WAAOzC,GAAP,eAAAR,EAAA,+EAEGgC,EAAe,IAAIV,KAAKd,EAAK0C,iBAFhC,YAElBT,EAFkB,iDAIbA,EAAaX,KAAI,SAAAhB,GACtB,MAAO,CACLN,KAAM,IAAIc,KAA6B,IAAxBR,EAAI+B,UAAUC,SAC7BhC,IAAKA,EAAI8B,cAPO,uDAYtBG,QAAQjC,IAAR,MAZsB,iCAejB,IAfiB,yDAAH,sDAkBVqC,EAAW,uCAAG,8BAAAnD,EAAA,+EAEEqB,IAFF,YAEnBoB,EAFmB,+BAIfW,EAAoBX,EAAaX,KAAI,SAAChB,GAC1C,MAAO,CACLN,KAAM,IAAIc,KAA6B,IAAxBR,EAAI+B,UAAUC,SAC7B3B,KAAML,EAAI8B,aAPO,kBAWdQ,GAXc,gCAad,IAbc,mFAgBhB,IAhBgB,0DAAH,qDAoBXC,EAAQ,uCAAG,WAAOC,EAAmBxC,GAA1B,eAAAd,EAAA,6DAEduD,EAAgBzD,YACpBH,EACAP,YAJkB,SAMdoE,YAAOD,EAAe,CAC1BV,UAAWS,EACXV,SAAU9B,IARQ,gCAYf,CAAEN,KAAM8C,EAAaxC,IAAKA,IAZX,2CAAH,wDC3Hf2C,EAAmC,CACvCjD,KAAM,IAAIc,KAAK,YAAYoC,UAC3BzC,KAAM,SAGF0C,EAAc,uCAAG,gCAAA3D,EAAA,sEACOwC,IADP,uBACbhC,EADa,EACbA,KAAMM,EADO,EACPA,IADO,kBAEd,CAAEN,KAAMA,EAAKkD,UAAWzC,KAAMH,IAFhB,2CAAH,qDAKP8C,EAAiBC,YAAiB,UAAD,sBAAY,sBAAA7D,EAAA,sEAC3C2D,IAD2C,oFAwB3CG,EApBQC,YAAY,CACjC9C,KAAM,YACN+C,aAAcP,EACdQ,SAAU,GACVC,eAAa,mBACVN,EAAeO,QAAQjD,MAAO,SAACkD,OADrB,cAEVR,EAAeS,UAAUnD,MAAO,SAC/BkD,EACAE,GAEA,IAAMC,EAAUD,EAAOC,QACvBH,EAAM5D,KAAO+D,EAAQ/D,KACrB4D,EAAMnD,KAAOsD,EAAQtD,QARZ,cAUV2C,EAAeY,SAAStD,MAAO,SAACkD,GAC/BrB,QAAQjC,IAAI,mCAXH,KAgBf,QC7BM2D,EAAe,SAACjE,EAAYkE,GAChC,IAAMC,EAAU,IAAIrD,KAAKoD,EAAKjE,sBAGxBmE,GAFa,IAAItD,KAAKd,EAAKC,sBAERiD,UAAYiB,EAAQjB,WAD7B,MAEVmB,EAAOC,KAAKD,KAAKD,GACvB,OAAOE,KAAKC,MAAMD,KAAKE,IAAIJ,IAASC,GAGhCI,EAAc,SAACC,EAAcjE,GACjC,OAAIiE,EAAO,IAAM,EACF,UAATjE,EACK,QAEA,QAGI,UAATA,EACK,QAEA,SAKPkE,EAAiC,CACrClE,KAAM,QACNmE,UAAW,GAuBPC,EAAgBtB,YAAY,CAChC9C,KAAM,WACN+C,aAAcmB,EACdlB,SAAU,CACRqB,iBAAkB,SAChBlB,EACAE,GAEA,IAAMiB,EA5BY,WAAoF,IAAnFnB,EAAkF,uDAAhEe,EAAsBb,EAA0C,uCACzG,GAAoB,kBAAhBA,EAAOpD,KAA0B,CACnC,IAAMkE,EAAYX,EAChB,IAAInD,KAAKgD,EAAO9D,MAChB,IAAIc,KAAKgD,EAAOkB,UAAUhF,OAO5B,MAAO,CACLS,KALegE,EAAYG,EAAWd,EAAOkB,UAAUvE,MAMvDmE,aAGF,OAAOhB,EAYYqB,CAAgBrB,EAAOE,EAAOC,SAG/CH,EAAMnD,KAAOsE,EAAStE,KACtBmD,EAAMgB,UAAYG,EAASH,YAG/BlB,cAAe,KAGFoB,EAAqBD,EAAcK,QAAnCJ,iBAEAD,IAAf,Q,QCrEMM,EAAmCC,YAAgB,CACvDJ,UAAWK,EACXC,SAAUL,IAQG9F,EALDoG,YAAe,CAC3BC,QAASL,I,+CChBEM,EAAW,SAACC,GAKvB,OACE,qBAAKC,UAAU,0BAAf,SACE,cAAC,IAAD,CACEC,YAAY,EACZC,SAAU,SAAC7F,IARK,SAACA,GACrB0F,EAAMI,WAAW9F,GAQX+F,CAAc/F,EAAKgG,gB,kBCOhBC,EAAyB,CACpCC,MAAO,eACPC,MAAO,gBClBIC,EAAU,SAACV,GACtB,OACE,cAAC,IAAD,CAAKW,MAAsB,UAAfX,EAAMjF,KAAmB,aAAe,UAApD,SACGwF,EAASP,EAAMjF,SCCd6F,EAASC,IAATD,KAEKE,GAAY,WACvB,IAAMxB,EAAYyB,aAAY,SAAC7C,GAAD,OAAsBA,EAAMoB,aAE1D,OACE,cAAC,IAAM0B,SAAP,UACE,eAACJ,EAAD,6CACQ,cAAC,EAAD,CAAS7F,KAAMuE,EAAUvE,OADjC,SAC2C,IACxCV,EAAe,IAAIe,KAAKkE,EAAUhF,OAFrC,sD,oBCNO2G,GAAY,SAAC,GAA6B,IAA3BrG,EAA0B,EAA1BA,IAC1B,EAA6BD,EAAmBC,GAAxCG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,KAChBiG,EAAU,GACd,OAAQlG,GACN,IAAK,OACHkG,EAAU,yCACV,MACF,IAAK,MACHA,EAAO,UAAMjG,EAAN,iBACP,MACF,QACEiG,EAAUjG,EAId,OACE,iCACE,cAAC,EAAD,CAASF,KAAMA,IACdmG,MCnBMxE,GAAW,WACtB,IACA,EAAgCyE,mBADa,IAC7C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEM/B,EAAYyB,aAAY,SAAC7C,GAAD,OAAsBA,EAAMoB,aAQ1D,OANAgC,qBAAU,WACRrE,IAAcsE,MAAK,SAAC3G,GAClByG,EAAYzG,QAEb,CAAC0E,IAGF,8BACE,cAAC,KAAD,CAAUkC,iBAAkB,CAAC,GAA7B,SACE,cAAC,KAASC,MAAV,CAAgBC,OAAO,YAAvB,SACE,cAAC,KAAD,UACGN,EAASxF,KAAI,SAAC+F,EAAGC,GAChB,OACE,eAAC,KAASC,KAAV,WACGF,EAAErH,KAAKwH,iBADV,IAC4B,cAAC,GAAD,CAAWlH,IAAK+G,EAAE1G,SAD1B2G,WAJW,U,4GCZlCG,GAAiB,WAC5B,IAAMC,EAAWC,cAEjB,OACE,eAAC,KAAD,CAAMC,KAAK,aAAaC,aAAc,CAACH,EAASI,UAAhD,UACE,cAAC,KAAKP,KAAN,UACE,eAAC,IAAD,CAAMQ,GAAG,QAAT,UACE,cAACC,GAAA,EAAD,IADF,0BADa,SAKf,cAAC,KAAKT,KAAN,UACE,eAAC,IAAD,CAAMQ,GAAG,YAAT,UACE,cAACE,GAAA,EAAD,IADF,gCADa,aAKf,cAAC,KAAKV,KAAN,UACE,eAAC,IAAD,CAAMQ,GAAG,YAAT,UACE,cAACG,GAAA,EAAD,IADF,0BADa,iBCjBbC,GAAmCC,KAAnCD,OAAQE,GAA2BD,KAA3BC,MAAOC,GAAoBF,KAApBE,QAASC,GAAWH,KAAXG,OAqDjBC,GAjDwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,OACE,eAAC,KAAD,CAAGC,MAAO,CAAEC,UAAW,SAAvB,UACE,cAACR,GAAD,CAAQxC,UAAU,4BAAlB,SACE,cAAC,KAAD,CAAMiD,MAAM,OAAZ,SACE,cAAC,KAAKrB,KAAN,UACE,eAAC,KAAD,CAAOsB,MAAM,SAAb,UACE,qBACEC,IAAI,0DACJC,MAAM,OACNC,OAAO,OACPC,IAAI,UALR,iBADa,cAanB,cAAC,eAAD,UACE,eAAC,KAAD,WACE,cAACZ,GAAD,CAAOO,MAAM,QAAQjD,UAAU,4BAA/B,SACE,eAAC,KAAD,CAAMiC,KAAK,WAAX,UACE,cAAC,KAAKL,KAAN,UACE,cAAC,IAAD,CAAMQ,GAAG,QAAT,oDADa,QAGf,cAAC,KAAKR,KAAN,UACE,cAAC,IAAD,CAAMQ,GAAG,YAAT,2DADa,YAGf,cAAC,KAAKR,KAAN,UACE,cAAC,IAAD,CAAMQ,GAAG,YAAT,iCADa,iBAKnB,cAACO,GAAD,CAAS3C,UAAU,iBAAnB,SAAqC8C,SAGzC,eAAC,cAAD,WACE,cAAC,KAAD,CAAG9C,UAAU,4BAAb,SACE,cAAC,GAAD,MAEF,cAAC2C,GAAD,CAAS3C,UAAU,iBAAnB,SAAqC8C,OAEvC,cAACF,GAAD,CAAQ5C,UAAU,4BAAlB,0C,sFCzCOuD,GAAW,SAAC,GAA4B,IAA1BlJ,EAAyB,EAAzBA,KACnBmJ,EAAWC,cAuBXC,EAAW,SAAC1I,GAChBiG,KAAQ0C,QAAQ3I,IAQlB,OACE,eAAC,KAAD,6BANa,CACb4I,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAIpB,IAAkBE,SA/BH,SAACC,GAChB,IAAMC,EAAS,CACbD,EAAOE,IACPF,EAAOG,MACPH,EAAOrJ,IACPqJ,EAAOI,WACPC,KAAK,KAEPzH,QAAQjC,IAAIsJ,GAEZ/G,EAAS7C,EAAM4J,GAAQ3C,MAAK,SAACI,GACvBA,GACFgC,EAAS,GAAD,OAAItJ,EAAeC,GAAnB,YAA4BqH,EAAE/G,MAEtC6I,EAAS/F,MAETb,QAAQjC,IAAI,wBAehB,UACE,cAAC,KAAKiH,KAAN,CAAW9G,KAAK,QAAQwJ,MAAM,sBAAOC,MAAO,CAAC,CAAEC,UAAU,IAAzD,SACE,eAAC,KAAD,CAAQC,YAAY,sBAApB,UACE,cAAC,KAAOC,OAAR,CAAeC,MAAM,OAArB,gEACA,cAAC,KAAOD,OAAR,CAAeC,MAAM,MAArB,0BACA,cAAC,KAAOD,OAAR,CAAeC,MAAM,SAArB,2CAGJ,cAAC,KAAK/C,KAAN,CAAW9G,KAAK,MAAMwJ,MAAM,gBAAMC,MAAO,CAAC,CAAEC,UAAU,IAAtD,SACE,eAAC,KAAD,CAAQC,YAAY,gBAApB,UACE,cAAC,KAAOC,OAAR,CAAeC,MAAM,QAArB,SACE,cAAC,EAAD,CAAS7J,KAAK,YAEhB,cAAC,KAAO4J,OAAR,CAAeC,MAAM,QAArB,SACE,cAAC,EAAD,CAAS7J,KAAK,iBAIpB,cAAC,KAAK8G,KAAN,CAAW9G,KAAK,YAAYwJ,MAAM,eAAlC,SACE,cAAC,KAAD,CACEM,mBAAoBC,KAAO,WAAY,WACvCC,YAAU,EACVC,OAAO,aAGX,cAAC,KAAKnD,KAAN,CACEoD,SAAO,EACPC,aAAc,SAACC,EAAYC,GAAb,OACZD,EAAWf,QAAUgB,EAAchB,OAHvC,SAMG,kBAC4B,UAA3BiB,EADD,EAAGA,eACY,SACZ,cAAC,KAAKxD,KAAN,CAAW9G,KAAK,MAAMwJ,MAAM,eAAKC,MAAO,CAAC,CAAEC,UAAU,IAArD,SACE,cAAC,KAAD,CAAOC,YAAY,+BAEnB,QAGR,cAAC,KAAK7C,KAAN,UACE,cAAC,KAAD,CAAQ7G,KAAK,UAAUsK,SAAS,SAAhC,iCClFKC,GAAgB,SAACvF,GAC5B,IAAMJ,EAAWmB,aAAY,SAAC7C,GAAD,OAAsBA,EAAM0B,YAEzD,OACE,uDACO,cAAC,EAAD,CAAS7E,KAAM6E,EAAS7E,OAD/B,oBCyDWyK,GAhDF,WACX,MAA4BrE,mBAAe,IAAI/F,MAA/C,mBAAOqK,EAAP,KAAiBvJ,EAAjB,KAEMuH,EAAWC,cAEXpE,EAAYyB,aAAY,SAAC7C,GAAD,OAAsBA,EAAMoB,aAEpDoG,EAAkBC,uBACtB,SAACrL,GACCmJ,EACErE,EAAiB,CACfpE,KAAM,gBACNV,KAAMA,EAAKkD,UACX8B,UAAWA,OAIjB,CAACmE,EAAUnE,IAYb,OATAgC,qBAAU,WACRmC,EAAS/F,OACR,CAAC+F,IAEJnC,qBAAU,WACRoE,EAAgBD,KAEf,CAACA,EAAUnG,EAAWoG,IAGvB,cAAC,GAAD,UACE,sBAAKzF,UAAU,WAAf,UACE,eAAC,KAAD,CAAO2F,UAAU,WAAjB,UACE,cAAC,EAAD,CAAUxF,WAAYlE,IAEtB,eAAC,KAAD,CAAM2J,MAAOxL,EAAeoL,GAA5B,UACE,cAAC,GAAD,CAAeA,SAAUA,IACzB,cAAC,GAAD,OAEF,cAAC,GAAD,CAAUnL,KAAMmL,OAElB,cAAC,KAAD,IACA,cAAC,GAAD,U,SCxDKK,GAAgB,uCAAG,gCAAAhM,EAAA,sEAGpBuB,EAAkBzB,YACtBH,EACAP,YALwB,SAQEuC,YAAQJ,GARV,cAQpBK,EARoB,OAUtBqK,EAAOC,QACXtK,EAAcuK,SAAQ,SAACtE,GAAD,OAAOoE,EAAKG,KAAKvE,EAAEwE,OAXf,kBAanBJ,GAbmB,iCAenBC,SAfmB,mFAkBrBA,SAlBqB,0DAAH,qDAsBvBI,GAAmB,uCAAG,WAAOC,GAAP,SAAAvM,EAAA,+EAEjBH,EACLT,WACAmN,IAJsB,qCAOjBxK,GAPiB,2CAAH,sDAWZyK,GAAW,uCAAG,WAAOD,GAAP,uBAAAvM,EAAA,+EAEAsM,GAAoBC,GAFpB,YAEnBE,EAFmB,wBAKrB,IADIC,EAAqB,GACzB,MAAkBC,OAAOC,KAAKH,GAA9B,eAAWI,EAAgC,KACzCH,EAAKG,GAAOJ,EAAWI,GANJ,yBAQdH,GARc,0FAYlB,IAZkB,0DAAH,sDAeXI,GAAW,uCAAG,WAAOP,EAAeN,GAAtB,iBAAAjM,EAAA,sEAGf+M,EAAiB7M,YACrBP,EACAP,WACAmN,GAGES,EAAU,GACdf,EAAKnK,KAAI,SAAC+F,GAER,OADAmF,EAAO,6BAAQA,GAAR,kBAAkBnF,EAAEoF,KAAOpF,EAAEqF,OAC7BrF,KAZY,SAefsF,YAAOJ,EAAgBC,GAfR,iCAkBhB,GAlBgB,oEAqBlB,GArBkB,0DAAH,wD,oBC7ClBI,I,OAAa,SAAC,GAAyC,IAAvCnB,EAAsC,EAAtCA,KACpB,OACE,qBAAK9F,UAAU,wBAAf,SACG8F,EAAKnK,KAAI,SAACmL,GAAD,OACR,+BAAuBA,EAAKA,MAAjBA,EAAKA,aA4ETI,GAtEc,SAAC,GAMvB,IALLpB,EAKI,EALJA,KACAqB,EAII,EAJJA,gBAKMC,EAAatB,EAAKnK,KAAI,SAAC+F,EAAG2F,GAG9B,GAAI3F,EAAE4F,QAAS,CACb,IAAMC,EAAU7F,EAAE4F,QAAQzM,MAAM6G,EAAEoF,MAElC,MAAO,CACLJ,IAAKhF,EAAEoF,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLI,SACE,sBAAKzH,UAAU,uBAAf,UACGuH,EAAQ,GACT,qCACA,+BACGJ,EAAe,YACPzF,EAAEoF,KADK,MAEZf,MAAMrE,EAAEoF,KAAKY,QAAQC,KAAK,MAAMtD,KAAK,MAE3C,qCACCkD,EAAQ,OAKf,MAAO,CACLb,IAAKhF,EAAEoF,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLI,SAAU,qBAAKzH,UAAU,uBAAf,SAAuC0B,EAAEkG,iBAmBzD,OACE,gCACE,qBAAI5H,UAAU,wBAAd,UACE,cAAC6H,GAAA,EAAD,CAAc9E,MAAO,CAAE+E,SAAU,SADnC,sDAIA,cAAC,KAAD,CACEV,WAAYA,EACZW,QAtBU,CACd,CACEnC,MAAO,MACPoC,UAAW,QACXtB,IAAK,QACLtD,MAAO,MAET,CACEwC,MAAO,WACPoC,UAAW,WACXtB,IAAK,QAaHuB,YAAY,EACZC,WAAY,CAAEC,SAAU,MAE1B,cAAC,GAAD,CAAYrC,KAAMA,QCHTsC,I,OAzEU,SAAC,GAMnB,IALLtC,EAKI,EALJA,KACAqB,EAII,EAJJA,gBASMC,EAAatB,EAAKnK,KAAI,SAAC+F,EAAG2F,GAC9B,MAAO,CACLX,IAAKhF,EAAEoF,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLO,WACE,sBACES,QAAS,kBAVCC,EAUc5G,EAAE6G,oBAThC,IAAIC,MAAMF,GAAOG,OADF,IAACH,GAWVtI,UAAU,iCAFZ,UAIE,iCAAO0B,EAAEgH,aAAT,OACA,qCACA,+BAAO/J,KAAKgK,SAAW,GAAMjH,EAAEkG,WAAalG,EAAEkH,iBAGlDC,OACE,sBAAK7I,UAAU,6BAAf,UACE,qBAAKA,UAAU,kCAAf,SACGmH,EAAkBzF,EAAEoF,KAAO,KAE9B,qBAAK9G,UAAU,uCAAf,SACGmH,EAAkBzF,EAAEkH,YAAc,YA2B7C,OACE,sBAAK5I,UAAU,sBAAf,UACE,qBAAIA,UAAU,4BAAd,UACE,cAAC6H,GAAA,EAAD,CAAc9E,MAAO,CAAE+E,SAAU,SADnC,6EAIA,cAAC,KAAD,CACEV,WAAYA,EACZW,QA5BU,CACd,CACEnC,MAAO,MACPoC,UAAW,QACXtB,IAAK,QACLtD,MAAO,MAET,CACEwC,MAAO,aACPoC,UAAW,aACXtB,IAAK,OAEP,CACEd,MAAO,eACPoC,UAAW,SACXtB,IAAK,MACLtD,MAAO,QAaL8E,WAAY,CAAEC,SAAU,WCtCnBW,I,OAAgB,SAAC,GAAmC,IAAjC1C,EAAgC,EAAhCA,MAC9B,EAAwBlF,mBAAmB,CAAE6H,MAAO,GAAIC,MAAO,KAA/D,mBAAOzC,EAAP,KAAa0C,EAAb,KACA,EAAsC/H,oBAAS,GAA/C,mBAAOiG,EAAP,KAAwB+B,EAAxB,KAEA7H,qBAAU,WACJ+E,GACFC,GAAYD,GAAO9E,MAAK,SAACiF,GAEvB,IADA,IAAI4C,EAAWpD,QACf,MAAmBS,OAAOC,KAAKF,GAA/B,eAAsC,CAAjC,IAAMO,EAAI,KACPsC,EAAqBC,KAAKC,MAAM/C,EAAKO,IAC3CqC,EAASlD,KAAKmD,GAGhB,IAAMG,EAtCE,SAACC,GAKf,IAJA,IACIC,EADAC,EAAeF,EAAM9B,OAID,IAAjBgC,GAAoB,CAEzBD,EAAc9K,KAAKC,MAAMD,KAAKgK,SAAWe,GACzCA,IAHyB,MAMmB,CAC1CF,EAAMC,GACND,EAAME,IAFPF,EAAME,GANkB,KAMHF,EAAMC,GANH,KAY3B,OAAOD,EAqBSG,CAAQR,GACZS,EAAQjL,KAAKkL,MAAMV,EAASzB,OAAS,GAE3CuB,EAAQ,CAAEF,MAAOQ,EAAEO,MAAM,EAAGF,GAAQZ,MAAOO,EAAEO,MAAMF,UAGtD,IAMH,OACE,sBAAK5J,UAAU,mBAAf,UACE,wCAASoG,EAAT,OACA,cAAC,GAAD,CAAWN,KAAI,aAAMS,EAAKwC,OAAQ5B,gBAAiBA,IACnD,uBACA,cAAC,GAAD,CAAerB,KAAI,aAAMS,EAAKyC,OAAQ7B,gBAAiBA,IACvD,eAAC,KAAD,WACE,cAAC,KAAD,CAAQkB,QAAS,WAVrBa,GAU8C/B,IAA1C,sCAGA,cAAC,KAAD,CAAQkB,QAAS,kBAAM0B,OAAOC,SAA9B,iECnDOC,I,OAZS,WACtB,IAAMC,EAASC,cAEf,OACE,cAAC,GAAD,UACE,qBAAKnK,UAAU,8BAAf,SACE,cAAC,GAAD,gBAAmBkK,UCNdE,I,OAAoB,WAC/B,MAAwBlJ,mBAAwB,IAAhD,mBAAO4E,EAAP,KAAauE,EAAb,KAEAhJ,qBAAU,WACRwE,KAAmBvE,MAAK,SAAC6H,GACvBkB,EAAQlB,QAET,IAIH,OACE,cAAC,KAAD,UACGrD,EAAKnK,KAAI,SAACyK,GAAD,OACR,cAAC,KAAKxE,KAAN,UACE,sBAAK5B,UAAU,sCAAf,UACE,cAAC,IAAD,CAAMoC,GAAE,yBAAoBgE,GAA5B,SAAsCA,IACtC,cAAC,KAAD,CAAQrL,KAAK,OAAb,SACE,cAAC,IAAD,CAAMqH,GAAE,2BAAsBgE,GAA9B,4BAEF,cAAC,KAAD,CAAQrL,KAAK,OAAOsN,QAAS,aAA7B,8BANYjC,U,UCQTkE,I,OAnBa,WAC1B,OACE,cAAC,GAAD,UACE,sBAAKtK,UAAU,mCAAf,UACE,8BACE,cAAC,KAAD,UACE,eAAC,IAAD,CAAMoC,GAAG,mBAAT,8CACU,cAACmI,GAAA,EAAD,WAId,qBAAKvK,UAAU,6BAAf,SACE,cAAC,GAAD,aCjBFwK,I,OAA2B5J,IAA3B4J,WAAWC,GAAgB7J,IAAhB6J,MAsBJC,IAtBoB9J,IAATD,KAEN,WAClB,OACE,cAAC,GAAD,UACE,qBAAKX,UAAU,yBAAf,SACE,eAAC,IAAD,WACE,cAACwK,GAAD,sCACA,eAACA,GAAD,WACE,cAACC,GAAD,CAAOrE,MAAO,EAAd,mDADF,mFAIA,eAACoE,GAAD,WACE,cAACC,GAAD,CAAOrE,MAAO,EAAd,0DADF,2FCRGuE,I,OAAwB,CACnC7D,KAAM,GACN4B,aAAc,OACdd,WAAY,GACZgB,YAAa,GACbtB,QAAS,GACTiB,eAAgB,KA2DZqC,GAAwB,SAAC,GAAqC,IAAnC5P,EAAkC,EAAlCA,KAAM6P,EAA4B,EAA5BA,QACrC,IACE,IADE,EACIC,EAAQD,EAAQ,GADpB,cAGkBC,EAAMC,QAHxB,IAGF,2BAAkC,CAAC,IAAxBC,EAAuB,QAChC,GAAIA,EAAMC,SAAU,qBAGCD,EAAMC,UAHP,IAGlB,2BAAmC,CAAC,IAAzBC,EAAwB,QACjC,GAAIA,EAAKlQ,KAAKmQ,SAASnQ,GACrB,MAAO,CACLoQ,UAAWN,EAAMvC,eAAe,GAAK8C,UACrC/D,QAAS4D,EAAKlQ,OAPF,8BAYlB,MAAO,CACLoQ,UAAWN,EAAMvC,eAAe,GAAK8C,UACrC/D,QAAS0D,EAAMC,SAAS,GAAKjQ,MAG/B,MAAO,CACLoQ,UAAWN,EAAMvC,eAAe,GAAK8C,YAtBzC,+BA0BF,MAAO3J,GACP9E,QAAQjC,IAAI+G,KAIH4J,GAAe,uCAAG,WAAOtQ,GAAP,yBAAAnB,EAAA,4DAEV,QACX0R,EAAUvQ,EACVwQ,EAJqB,mEAEV,QAFU,YAI4DD,EAAQE,eAEzFC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ5S,WACR6S,QAAS7S,qCAIP8S,EAdqB,kDAckCP,GAdlC,SAgBNQ,MAAMD,EAAWL,GAhBX,cAgBrBO,EAhBqB,iBAiBRA,EAAOC,OAjBC,aAiBrBA,EAjBqB,QAkBlBC,QAlBkB,0CAmBlBD,EAAKC,SAnBa,8CAyBtBvQ,GAzBsB,4CAAH,sDAwDfwQ,GAAuB,uCAAG,WAAOpR,GAAP,uBAAAnB,EAAA,sEACfyR,GAAgBtQ,GADD,YAC/BmR,EAD+B,yBAG7BE,EAASF,EAAQ,GAAMG,eAHM,cAInBD,GAJmB,gEAIxB3K,EAJwB,0BAK1BkJ,GAAsBlJ,IALI,wKAS9B,IAT8B,gEAAH,sD,+BCvGrB6K,I,OA/Ce,SAAC,GAAkC,IAAhClF,EAA+B,EAA/BA,MAAOmF,EAAwB,EAAxBA,WAC9B9H,EAAW+H,KAAX/H,OAEFgI,EACE,eADFA,EAEU,eAFVA,EAGQ,sBAHRA,EAIS,sBAJTA,EAKK,eAIX,OACE,eAAC,KAAK9K,KAAN,CAAW0C,MAAK,YAAO+C,EAAQ,GAA/B,UACE,eAAC,KAAD,CAAOnE,MAAM,QAAb,UACE,cAAC,KAAKtB,KAAN,CAAW9G,KAAM,CAACuM,EAAO,QAAS9C,MAAO,CAAC,CAAEC,UAAU,IAAtD,SACE,cAAC,KAAD,CAAOC,YAAaiI,EAAgBC,YAAU,MAEhD,cAAC,KAAK/K,KAAN,CAAW9G,KAAM,CAACuM,EAAO,gBAAzB,SACE,eAAC,KAAD,CAAQ5C,YAAaiI,EAArB,UACE,cAAChI,EAAD,CAAQC,MAAM,OAAd,kBACA,cAACD,EAAD,CAAQC,MAAM,OAAd,kBACA,cAACD,EAAD,CAAQC,MAAM,YAAd,uBACA,cAACD,EAAD,CAAQC,MAAM,SAAd,oBACA,cAACD,EAAD,CAAQC,MAAM,UAAd,qBACA,cAACD,EAAD,CAAQC,MAAM,cAAd,yBACA,cAACD,EAAD,CAAQC,MAAM,cAAd,yBACA,cAACD,EAAD,CAAQC,MAAM,eAAd,+BAGJ,eAAC,KAAD,CAAQ0D,QAAS,kBAAMmE,EAAWnF,IAAlC,UACE,cAACuF,GAAA,EAAD,IADF,sBAIF,cAAC,KAAKhL,KAAN,CAAW9G,KAAM,CAACuM,EAAO,cAAzB,SACE,cAAC,KAAD,CAAU5C,YAAaiI,EAAsBC,YAAU,MAEzD,cAAC,KAAK/K,KAAN,CAAW9G,KAAM,CAACuM,EAAO,eAAzB,SACE,cAAC,KAAD,CAAO5C,YAAaiI,EAAuBC,YAAU,MAEvD,cAAC,KAAK/K,KAAN,CAAW9G,KAAM,CAACuM,EAAO,WAAzB,SACE,cAAC,KAAD,CAAU5C,YAAaiI,EAAmBC,YAAU,WC5C/CE,GAAqB,SAAC,GAAmC,IAAjCzG,EAAgC,EAAhCA,MACnC,EAAgClF,mBAA0B,CAACyJ,KAA3D,mBAAOmC,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,iBAAqB,MAErC5L,qBAAU,WACJ+E,GACFC,GAAYD,GAAO9E,MAAK,SAACiF,GAEvB,IADA,IAAIT,EAAOC,QACX,MAAmBS,OAAOC,KAAKF,GAA/B,eAAsC,CAAjC,IAAMO,EAAI,KACPsC,EAAqBC,KAAKC,MAAM/C,EAAKO,IAC3ChB,EAAKG,KAAKmD,GAGZ2D,EAAYjH,QAGf,IAEHzE,qBAAU,WACJ2L,EAAQE,SACVJ,EAASnR,KAAI,SAACmL,EAAMO,GAAW,IAAD,EAM5B,OALA,UAAA2F,EAAQE,eAAR,SAAiBC,eAAjB,eACG9F,EADH,gBAEOP,KAGAA,OAGV,CAACgG,IAEJ,IAIMM,EAAc,uCAAG,WAAOC,EAAoBC,GAA3B,iBAAAzT,EAAA,sDACrB,IAAW6M,KADU,WACVA,GACTqG,GAAY,SAACjH,GACX,IAAMuB,EAAQkG,SAAS7G,GAKvB,OAJAZ,EAAKuB,GAAL,6BACKvB,EAAKuB,IACLgG,EAAc3G,IAEZ,aAAIZ,OAPGuH,EAAgB,EAAvB3G,GADU,2CAAH,wDAad8G,EAAQ,uCAAG,WAAOxJ,GAAP,qCAAAnK,EAAA,sDACfoH,KAAQwM,QAAQ,CACdC,QAAS,8DACThH,IAAK,YACLiH,SAAU,IAGNC,EAAU5J,EAAM,MAElB6J,GAAY,EACZC,EAAW/H,QAVA,OAAAlM,EAAA,KAYGmK,GAZH,iDAaD,WADH0C,EAZI,sEAkBX1C,EAAO0C,GADDI,EAjBK,EAiBLA,KAAM4B,EAjBD,EAiBCA,aAAcd,EAjBf,EAiBeA,WAAYgB,EAjB3B,EAiB2BA,YAAatB,EAjBxC,EAiBwCA,QAEhDR,EAnBQ,wEAuBQsF,GAAwBtF,GAvBhC,aAuBPmF,EAvBO,yBAyBL8B,EAAqB,CACzBjH,KAAMA,EACN4B,aAAcA,EACdd,WAAYA,EACZgB,YAAaA,EACbtB,QAASA,GAAoB2E,EAAO3E,QACpCiB,eAAgB0D,EAAOb,WAGzB0C,EAAS7H,KAAK,CACZa,KAAMA,EACNC,KAAMsC,KAAK2E,UAAUD,KApCZ,+BAuCXE,MAAM,GAAD,OAAInH,EAAJ,qEACL+G,GAAY,EAxCD,wDA6CXA,EA7CW,kCA8CQlH,GAAYiH,EAASE,GA9C7B,eAgDX7M,KAAQ0C,QAAQ,CACd+J,QAAS,wCACThH,IAAK,YACLiH,SAAU,IAGZ1M,KAAQiN,MAAM,CAAER,QAAS,yEAAmBC,SAAU,IAtD3C,4CAAH,sDA2DRQ,EAAiB,SAAC9G,GACtB0F,GAAY,SAACjH,GAEX,OADAA,EAAKsI,OAAO/G,EAAO,GACZ,aAAIvB,OAIf,OACE,qBAAK/C,MAAO,CAAEsL,QAAS,OAAQC,WAAY,WAAYC,QAAS,QAAhE,SACE,eAAC,KAAD,CACExK,SAAUyJ,EACVJ,eAAgBA,EAChBoB,OAAO,WACPC,IAAKzB,EACLjK,MAAO,CAAE2L,SAAU,KALrB,UAOE,cAAC,KAAK9M,KAAN,CACE9G,KAAK,QACLyJ,MAAO,CAAC,CAAEC,UAAU,IACpBF,MAAM,iCACNqK,aAAcvI,EAJhB,SAME,cAAC,KAAD,CAAO3B,YAAY,mFAEpBqI,EAASnR,KAAI,SAAC+F,EAAG2F,GAAJ,OACZ,cAAC,GAAD,CAEEA,MAAOA,EACPmF,WAAY2B,GAFP9G,MAKT,eAAC,KAAD,CAAOuH,KAAM,GAAb,UACE,eAAC,KAAD,CAAQvG,QA5GK,WACnB0E,GAAY,SAACjH,GAAD,6BAAcA,GAAd,CAAoB6E,SA2G1B,uCACQ,cAACJ,GAAA,EAAD,OAER,cAAC,KAAD,CAAQxP,KAAK,UAAUsK,SAAS,SAAhC,mCCpIKwJ,I,OAZe,WAC5B,IAAM3E,EAASC,cAEf,OACE,cAAC,GAAD,UACE,qBAAKnK,UAAU,8BAAf,SACE,cAAC,GAAD,gBAAwBkK,U,UCDnB4E,I,OAAW,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KACrBC,EAASjJ,QACbgJ,EAAKpT,KAAI,SAAChB,GAER,OADAqU,EAAO/I,KAAKvL,EAAmBC,EAAIA,MAC5BA,KAGTqU,EAAOC,MAAK,SAACpV,EAAGqV,GACd,IAAMC,EAAS,IAAIhU,KAAKtB,EAAEoB,MACpBmU,EAAS,IAAIjU,KAAK+T,EAAEjU,MAE1B,OAAIkU,EAASC,EACJ,EACED,EAASC,GACV,EAED,KAIX,IACE,IAAMC,EAAOL,EAAO,GAAGlU,KAEjBiI,EAAQ,CACZuM,gBAA0B,UAATD,EAAmB,QAAU,cAG1CE,EAAM,IAAIpU,KAEZqU,EAAiB,EACrBR,EAAOrT,KAAI,SAAChB,EAAK0M,GAMf,OALgB,IAAIlM,KAAKR,EAAIM,MACfsU,IACZC,EAAiBnI,GAGZ1M,KAGT,IAAIgK,EAAQ,EAEZ,GAAI6K,EAAiB,EAAIR,EAAOtH,OAAQ,CACtC,IAAMnJ,EAAO,IAAIpD,KAAK6T,EAAOQ,GAAgBvU,MAGvC0S,EAFK,IAAIxS,KAAK6T,EAAOQ,EAAiB,GAAGvU,MAE3BwU,UAAYlR,EAAKkR,UAGrC9K,IAFmB,IAAIxJ,MAAOsU,UAAYlR,EAAKkR,WAEzB9B,EAAY,IAGpC,IAAM+B,EACJ,qCACE,qBAAK1P,UAAU,mBAAf,SAAmCgP,EAAOQ,GAAgBxU,OAC1D,qBAAKgF,UAAU,eAAf,SACE,cAAC,KAAD,CAAQ2E,MAAOA,SAKrB,OACE,sBAAK3E,UAAU,kBAAkB+C,MAAOA,EAAxC,UACE,4BACE,cAAC,EAAD,CAASjI,KAAMuU,MAEjB,4BAAIK,IACJ,cAAC,KAAD,UACGV,EAAOrT,KAAI,SAAChB,EAAK0M,GAChB,IAAMsI,EAAU,IAAIxU,KAAKR,EAAIM,MAEzByF,EAAQ,OAOZ,OANI8O,IAAmBnI,GAASsI,EAAUJ,EACxC7O,EAAQ,QACCiP,EAAUJ,IACnB7O,EAAQ,QAIR,eAAC,KAAKkB,KAAN,CAAuBlB,MAAOA,EAA9B,UACE,+BAAOiP,EAAQC,uBAA6B,IAC5C,cAAC,EAAD,CAAS9U,KAAMH,EAAIG,OAFrB,IAE8B,+BAAOH,EAAIK,SAFzBqM,WAS1B,MAAO3F,GACP9E,QAAQjC,IAAI+G,GAGd,OAAO,0BC/FImO,I,OAAe,WAC1B,MAAoC3O,mBAA8B,IAAlE,mBAAO4O,EAAP,KAAmBC,EAAnB,KACA,EAAwB7O,oBAAS,IAAI/F,MAAOyU,sBAA5C,mBAAO3U,EAAP,KAAa+U,EAAb,KAEA3O,qBAAU,WACRxE,IAAgByE,MAAK,SAAC3G,GACpBiC,QAAQjC,IAAIA,GAEZoV,EAAcpV,MAGhBoP,OAAOkG,aAAY,kBAAMD,GAAQ,IAAI7U,MAAOyU,wBAAuB,OAClE,IAEH,IAAMM,EAAe,SAACb,GACpB,OAAOS,EAAWtT,QAAO,SAAC7B,GACxB,MAAuBD,EAAmBC,EAAIA,KAAtCI,EAAR,EAAQA,KAAMD,EAAd,EAAcA,KACd,MAAa,WAATC,GAAqBD,IAASuU,MAQhC9O,EAAQ2P,EAAa,SACrB1P,EAAQ0P,EAAa,SAE3B,OACE,cAAC,GAAD,UACE,sBAAKlQ,UAAU,qBAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiC/E,IACjC,sBAAK+E,UAAU,oBAAf,UACE,cAAC,GAAD,CAAU+O,KAAMxO,IAChB,cAAC,GAAD,CAAUwO,KAAMvO,cC1B1B2P,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7W,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAe8W,SAAS,aAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOjJ,OAAK,EAACkJ,QAAS,cAAC,GAAD,MACtB,cAAC,IAAD,CAAOC,KAAK,QAAQD,QAAS,cAAC,GAAD,MAC7B,cAAC,IAAD,CAAOC,KAAK,YAAYD,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOC,KAAK,oBAAoBD,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOC,KAAK,0BAA0BD,QAAS,cAAC,GAAD,MAC/C,cAAC,IAAD,CAAOC,KAAK,wBAAwBD,QAAS,cAAC,GAAD,MAC7C,cAAC,IAAD,CAAOC,KAAK,YAAYD,QAAS,cAAC,GAAD,eAKzCE,SAASC,eAAe,W","file":"static/js/main.49c4c589.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nimport { getFirestore, doc, getDoc } from \"firebase/firestore/lite\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const store = getFirestore(firebaseApp);\r\n\r\nexport const getCollectionSnapshot = async (\r\n  collection: string,\r\n  documentName: string\r\n) => {\r\n  const docRef = doc(store, collection, documentName);\r\n  const docSnapshot = await getDoc(docRef);\r\n  if (docSnapshot.exists()) {\r\n    return docSnapshot.data();\r\n  }\r\n};\r\n\r\n// export const getCollectionSnapshot = async (collectionName: string) => {\r\n//   const storeCollection = collection(store, collectionName);\r\n//   const storeSnapshot = await getDocs(storeCollection);\r\n//   return storeSnapshot.docs.map((doc) => doc.data());\r\n// };\r\n\r\nexport default store;\r\n","export const toKrDateString = (date: Date) : string => {\r\n    return date.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n      });    \r\n}\r\n\r\nexport type EventType = \"bath\" | \"custom\" | \"ban\";\r\n\r\nexport type EventFormType = {\r\n  name: \"james\" | \"henry\",\r\n  type: EventType,\r\n  text: string,\r\n  time: string,\r\n}\r\n\r\nexport const splitLogToContents = (log: string) : EventFormType => {\r\n  const token = log.split(\"|\");\r\n  return {\r\n    name: token[0] as \"james\" | \"henry\",\r\n    type: token[1] as EventType,\r\n    text: token[2],\r\n    time: token[3]\r\n  };\r\n}","import store from \"../firebase\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  addDoc,\r\n  orderBy,\r\n  Timestamp,\r\n} from \"firebase/firestore/lite\";\r\nimport { splitLogToContents } from \"./misc\";\r\n\r\nexport type EventLogType = {\r\n  date: Date;\r\n  log: string;\r\n};\r\n\r\nexport const InitialEventLog : EventLogType = {\r\n  date: new Date(),\r\n  log: \"\",\r\n}\r\n\r\ntype EventLogCollection = {\r\n  EventTime: Timestamp,\r\n  EventLog: string,\r\n}\r\n\r\nconst getEventLogSnapshot = async () : Promise<Array<EventLogCollection> | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data()  as EventLogCollection);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst getEventByDate = async (date: Date) : Promise<Array<EventLogCollection> | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n\r\n    const timefrom = Timestamp.fromDate(date);\r\n    date.setDate(date.getDate() + 1);\r\n    const timeto =  Timestamp.fromDate(date);\r\n    let storeQuery = query(storeCollection, where(\"EventTime\", \">=\", timefrom), where(\"EventTime\", \"<=\", timeto));\r\n\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data() as EventLogCollection);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getRecentBathEvent = async () : Promise<EventLogType> => {\r\n  try {\r\n    const eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const bathLogOnly = eventDateLog.filter((log) => {\r\n        const { type } = splitLogToContents(log.EventLog);\r\n        return (type === \"bath\") ? true : false;\r\n      });\r\n\r\n      for (const log of bathLogOnly) {\r\n        const { text } = splitLogToContents(log.EventLog);\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          log: text,\r\n        }\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return {\r\n    date: new Date(\"2021-11-29\"),\r\n    log: \"james\",\r\n  };\r\n};\r\n\r\nexport const getTodayEvent = async () : Promise<Array<EventLogType>> => {\r\n  return getEventAt(new Date());\r\n};\r\n\r\nexport const getEventAt = async (date: Date) : Promise<Array<EventLogType>> => {\r\n  try {\r\n    let eventDateLog = await getEventByDate(new Date(date.toDateString()));\r\n    if (eventDateLog) {\r\n      return eventDateLog.map(log => {\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          log: log.EventLog,\r\n        }\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  try {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const convertedDataform = eventDateLog.map((log) => {\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          text: log.EventLog,\r\n        };\r\n      });\r\n\r\n      return convertedDataform;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addEvent = async (currentDate: Date, log: string) : Promise<EventLogType | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const collectionRef = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    await addDoc(collectionRef, {\r\n      EventTime: currentDate,\r\n      EventLog: log,\r\n    });\r\n  }\r\n\r\n  return { date: currentDate, log: log };\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getRecentBathEvent } from \"logic/api/eventLog\";\r\nimport { EventUser } from \"logic/type\";\r\n\r\n// eventUser 는 일단 fetch 를 사용하므로 슬라이스를 사용하는 것에 적당하다.\r\n\r\nconst initialEventUserState: EventUser = {\r\n  date: new Date(\"1917-1-1\").getTime(),\r\n  name: \"james\",\r\n};\r\n\r\nconst fetchEventUser = async (): Promise<EventUser> => {\r\n  const { date, log } = await getRecentBathEvent();\r\n  return { date: date.getTime(), name: log as \"james\" | \"henry\"};\r\n};\r\n\r\nexport const eventUserThuck = createAsyncThunk(\"request\", async () => {\r\n  return await fetchEventUser();\r\n});\r\n\r\nconst eventUserSlice = createSlice({\r\n  name: \"eventUser\",\r\n  initialState: initialEventUserState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [eventUserThuck.pending.type]: (state) => {},\r\n    [eventUserThuck.fulfilled.type]: (\r\n      state,\r\n      action: PayloadAction<EventUser>\r\n    ) => {\r\n      const payload = action.payload;\r\n      state.date = payload.date;\r\n      state.name = payload.name;\r\n    },\r\n    [eventUserThuck.rejected.type]: (state) => {\r\n      console.log(\"eventUserThuck.rejected.type\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default eventUserSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BathUser, EventUser } from \"logic/type\";\r\n\r\n// 막상 BathUserActionType 타입으로 분기하지는 않는다.\r\n// 리듀서를 모두 방문하기 때문에 결국 type 키값으로 판단하게 된다.\r\nexport interface BathUserActionType {\r\n  type: \"request/whois\";\r\n  date: number;\r\n  eventUser: EventUser;\r\n}\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const fromDay = new Date(from.toLocaleDateString());\r\n  const currentDay = new Date(date.toLocaleDateString());\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (currentDay.getTime() - fromDay.getTime()) / one_day;\r\n  const sign = Math.sign(diff);\r\n  return Math.floor(Math.abs(diff)) * sign;\r\n};\r\n\r\nconst getBathUser = (days: number, name: string): string => {\r\n  if (days % 2 === 0) {\r\n    if (name === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (name === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst initialBathUserState: BathUser = {\r\n  name: \"henry\",\r\n  dayPassed: 0\r\n}\r\n\r\nconst bathUserReducer = (state: BathUser = initialBathUserState, action: BathUserActionType) : BathUser => {\r\n  if (action.type === \"request/whois\") {\r\n    const dayPassed = countingDays(\r\n      new Date(action.date),\r\n      new Date(action.eventUser.date)\r\n    );\r\n\r\n    const userName = getBathUser(dayPassed, action.eventUser.name);\r\n\r\n    //console.log(dayPassed, userName);\r\n\r\n    return {\r\n      name: userName,\r\n      dayPassed\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst bathUserSlice = createSlice({\r\n  name: \"bathUser\",\r\n  initialState: initialBathUserState,\r\n  reducers: {\r\n    getTodayBathUser: (\r\n      state: BathUser,\r\n      action: PayloadAction<BathUserActionType>\r\n    ) => {\r\n      const newState = bathUserReducer(state, action.payload);\r\n\r\n      // 오브젝트 복사 부분이 문제가 되는 것 같다.\r\n      state.name = newState.name;\r\n      state.dayPassed = newState.dayPassed;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nexport const { getTodayBathUser } = bathUserSlice.actions;\r\n\r\nexport default bathUserSlice.reducer;\r\n","import { EventUser, BathUser } from \"./type\";\r\nimport eventUserReducer from \"./reducer/eventUser\";\r\nimport bathUserReducer from \"./reducer/bathUser\";\r\nimport { combineReducers, configureStore, Reducer } from \"@reduxjs/toolkit\";\r\n\r\nexport type RootState = {\r\n  eventUser: EventUser;\r\n  bathUser: BathUser;\r\n};\r\n\r\n// 런타임 오류는 섞어쓰는 것 때문인것 같다.\r\n\r\nconst rootReducers: Reducer<RootState> = combineReducers({\r\n  eventUser: eventUserReducer,\r\n  bathUser: bathUserReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducers,\r\n  //devTools: true,\r\n});\r\n\r\nexport default store;\r\n","import { Calendar as DatePicker } from \"antd\";\r\n\r\nexport const Calendar = (props: { setNewDate: any }) => {\r\n  const onDateChanged = (date: Date) => {\r\n    props.setNewDate(date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-calendar-container\">\r\n      <DatePicker\r\n        fullscreen={false}\r\n        onSelect={(date: moment.Moment) => {\r\n          onDateChanged(date.toDate());\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export type BathUser = {\r\n  name: string;\r\n  dayPassed: number;\r\n};\r\n\r\nexport type EventUser = {\r\n  date: number;\r\n  name: \"james\" | \"henry\";\r\n};\r\n\r\nexport type EventLog = {\r\n  date: number;\r\n  log: string;\r\n};\r\n\r\ntype UserNameType = {\r\n  [index: string]: string;\r\n};\r\n\r\nexport const UserName: UserNameType = {\r\n  james: \"준우\",\r\n  henry: \"건우\",\r\n};\r\n\r\nexport type WordTestType = {\r\n  [index: string]: string;\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { UserName } from \"logic/type\";\r\n\r\nexport const NameTag = (props: { name: string }) => {\r\n  return (\r\n    <Tag color={props.name === \"james\" ? \"processing\" : \"success\"}>\r\n      {UserName[props.name]}\r\n    </Tag>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const EventUser = () => {\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>\r\n        마지막으로 <NameTag name={eventUser.name} />가{\" \"}\r\n        {toKrDateString(new Date(eventUser.date))} 에 사용했습니다.\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { NameTag } from \"component/NameTag\";\r\nimport { splitLogToContents } from \"logic/api/misc\";\r\nimport React from \"react\";\r\n\r\ntype LogParserProps = {\r\n  log: string;\r\n};\r\n\r\nexport const LogParser = ({ log }: LogParserProps) => {\r\n  const { name, type, text } = splitLogToContents(log);\r\n  let message = \"\";\r\n  switch (type) {\r\n    case \"bath\":\r\n      message = \"화장실 쓰는 날\";\r\n      break;\r\n    case \"ban\":\r\n      message = `${text} 금지`;\r\n      break;\r\n    default:\r\n      message = text;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <NameTag name={name} />\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getEventLog } from \"../../logic/api/eventLog\";\r\nimport { Collapse, Timeline } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"logic/store\";\r\nimport { LogParser } from \"component/LogParser\";\r\n\r\nexport const EventLog = () => {\r\n  const type: { date: Date; text: string }[] = [];\r\n  const [logState, setLogState] = useState(type);\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  useEffect(() => {\r\n    getEventLog().then((log) => {\r\n      setLogState(log);\r\n    });\r\n  }, [eventUser]);\r\n\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={[1]}>\r\n        <Collapse.Panel header=\"Event Log\" key=\"1\">\r\n          <Timeline>\r\n            {logState.map((e, i: number) => {\r\n              return (\r\n                <Timeline.Item key={i++}>\r\n                  {e.date.toLocaleString()} <LogParser log={e.text} />\r\n                </Timeline.Item>\r\n              );\r\n            })}\r\n          </Timeline>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  HomeOutlined,\r\n  CheckSquareOutlined,\r\n  CalendarOutlined,\r\n  ClockCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nexport const HomeNavigation = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\r\n      <Menu.Item key=\"/bath\">\r\n        <Link to=\"/bath\">\r\n          <CalendarOutlined /> 화장실\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/wordtest\">\r\n        <Link to=\"/wordtest\">\r\n          <CheckSquareOutlined /> 단어시험\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/timeline\">\r\n        <Link to=\"/timeline\">\r\n          <ClockCircleOutlined /> 스케줄\r\n        </Link>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Layout as L, Menu, Space } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserView, MobileView } from \"react-device-detect\";\r\n\r\nimport \"./style.css\";\r\nimport { HomeNavigation } from \"component/HomeNavigation\";\r\n\r\nconst { Header, Sider, Content, Footer } = L;\r\n\r\ntype Props = {};\r\n\r\nexport const Layout: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <L style={{ minHeight: \"100vh\" }}>\r\n      <Header className=\"layout-print-display-none\">\r\n        <Menu theme=\"dark\">\r\n          <Menu.Item key=\"header\">\r\n            <Space align=\"center\">\r\n              <img\r\n                src=\"https://cdn-icons-png.flaticon.com/512/6272/6272776.png\"\r\n                width=\"28px\"\r\n                height=\"auto\"\r\n                alt=\"funny\"\r\n              />\r\n              Home Funny\r\n            </Space>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <BrowserView>\r\n        <L>\r\n          <Sider theme=\"light\" className=\"layout-print-display-none\">\r\n            <Menu mode=\"vertical\">\r\n              <Menu.Item key=\"bath\">\r\n                <Link to=\"/bath\">오늘의 화장실</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"wordtest\">\r\n                <Link to=\"/wordtest\">정상 단어 테스트</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"timeline\">\r\n                <Link to=\"/timeline\">스케줄</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Content className=\"layout-content\">{children}</Content>\r\n        </L>\r\n      </BrowserView>\r\n      <MobileView>\r\n        <L className=\"layout-print-display-none\">\r\n          <HomeNavigation />\r\n        </L>\r\n        <Content className=\"layout-content\">{children}</Content>\r\n      </MobileView>\r\n      <Footer className=\"layout-print-display-none\">\r\n        This is home funny, 2021\r\n      </Footer>\r\n    </L>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Form, Input, Select, message, Button, TimePicker } from \"antd\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { addEvent } from \"logic/api/eventLog\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\nimport moment from \"moment\";\r\n\r\ntype AddEventProp = {\r\n  date: Date;\r\n};\r\n\r\nexport const AddEvent = ({ date }: AddEventProp) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinish = (values: any) => {\r\n    const newLog = [\r\n      values.who,\r\n      values.event,\r\n      values.log,\r\n      values.eventTime,\r\n    ].join(\"|\");\r\n\r\n    console.log(newLog);\r\n\r\n    addEvent(date, newLog).then((e) => {\r\n      if (e) {\r\n        addToast(`${toKrDateString(date)} ${e.log}`);\r\n\r\n        dispatch(eventUserThuck());\r\n      } else {\r\n        console.log(\"add event failed\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const addToast = (text: string) => {\r\n    message.success(text);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: { span: 2 },\r\n    wrapperCol: { span: 8 },\r\n  };\r\n\r\n  return (\r\n    <Form {...layout} onFinish={onFinish}>\r\n      <Form.Item name=\"event\" label=\"무슨일?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"무슨일?\">\r\n          <Select.Option value=\"bath\">화장실 사용하는 날</Select.Option>\r\n          <Select.Option value=\"ban\">금지</Select.Option>\r\n          <Select.Option value=\"custom\">직접입력</Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item name=\"who\" label=\"누구?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"누구?\">\r\n          <Select.Option value=\"james\">\r\n            <NameTag name=\"james\" />\r\n          </Select.Option>\r\n          <Select.Option value=\"henry\">\r\n            <NameTag name=\"henry\" />\r\n          </Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item name=\"eventTime\" label=\"시간\">\r\n        <TimePicker\r\n          defaultPickerValue={moment(\"12:00 am\", \"HH:mm a\")}\r\n          use12Hours\r\n          format=\"h:mm a\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        noStyle\r\n        shouldUpdate={(prevValues, currentValues) =>\r\n          prevValues.event !== currentValues.event\r\n        }\r\n      >\r\n        {({ getFieldValue }) =>\r\n          getFieldValue(\"event\") !== \"bath\" ? (\r\n            <Form.Item name=\"log\" label=\"기록\" rules={[{ required: true }]}>\r\n              <Input placeholder=\"직접입력\" />\r\n            </Form.Item>\r\n          ) : null\r\n        }\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          등록\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\n\r\nexport const TodayBathUser = (props: { pickDate: Date }) => {\r\n  const bathUser = useSelector((state: RootState) => state.bathUser);\r\n\r\n  return (\r\n    <div>\r\n      화장실? <NameTag name={bathUser.name} /> 차례\r\n    </div>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport { Card, Button, Divider, message, Space } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { getTodayBathUser } from \"logic/reducer/bathUser\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { AddEvent } from \"component/AddEvent\";\r\nimport { TodayBathUser } from \"component/TodayBathUser\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst Bath = () => {\r\n  const [pickDate, setDate] = useState<Date>(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  const updateTodayUser = useCallback(\r\n    (date: Date) => {\r\n      dispatch(\r\n        getTodayBathUser({\r\n          type: \"request/whois\",\r\n          date: date.getTime(),\r\n          eventUser: eventUser,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, eventUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventUserThuck());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateTodayUser(pickDate);\r\n    // 이벤트 핸들러에 해당한다.\r\n  }, [pickDate, eventUser, updateTodayUser]);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"bath-app\">\r\n        <Space direction=\"vertical\">\r\n          <Calendar setNewDate={setDate} />\r\n\r\n          <Card title={toKrDateString(pickDate)}>\r\n            <TodayBathUser pickDate={pickDate} />\r\n            <EventUser />\r\n          </Card>\r\n          <AddEvent date={pickDate} />\r\n        </Space>\r\n        <Divider />\r\n        <EventLog />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore/lite\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const getTestLevelList = async () => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const storeCollection = collection(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST\r\n      );\r\n\r\n      const storeSnapshot = await getDocs(storeCollection);\r\n\r\n      let list = Array<string>();\r\n      storeSnapshot.forEach((e) => list.push(e.id));\r\n\r\n      return list;\r\n    } else {\r\n      return Array<string>();\r\n    }\r\n  } catch {\r\n    return Array<string>();\r\n  }\r\n};\r\n\r\nconst getWordTestSnapshot = async (level: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n      level\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getWordTest = async (level: string): Promise<WordTestType> => {\r\n  try {\r\n    let testObject = await getWordTestSnapshot(level);\r\n    if (testObject) {\r\n      let test: WordTestType = {};\r\n      for (const key of Object.keys(testObject)) {\r\n        test[key] = testObject[key];\r\n      }\r\n      return test;\r\n    }\r\n  } catch {}\r\n\r\n  return {};\r\n};\r\n\r\nexport const addWordTest = async (level: string, list: Array<WordTestType>) => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const stateLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n        level\r\n      );\r\n\r\n      let docData = {};\r\n      list.map((e) => {\r\n        docData = { ...docData, [e.word]: e.desc };\r\n        return e;\r\n      });\r\n\r\n      await setDoc(stateLogDocRef, docData);\r\n    }\r\n\r\n    return true;\r\n  } catch {}\r\n\r\n  return false;\r\n};\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst BlankWords = ({ list }: { list: Array<WordType> }) => {\r\n  return (\r\n    <div className=\"blank-words-container\">\r\n      {list.map((word) => (\r\n        <span key={word.word}>{word.word}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const FillTheBlanks = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const dataSource = list.map((e, index) => {\r\n    // 이건 잘 안된다.\r\n    // 사전에서 검색하는 예제는 시제가 적요된 경우가 있어서 그대로 쓸 수 없다.\r\n    if (e.example) {\r\n      const partial = e.example.split(e.word);\r\n\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: (\r\n          <div className=\"fill-blank-table-row\">\r\n            {partial[0]}\r\n            <span> </span>\r\n            <span>\r\n              {answerVisiblity\r\n                ? `[ ${e.word} ]`\r\n                : Array(e.word.length).fill(\"__\").join(\"\")}\r\n            </span>\r\n            <span> </span>\r\n            {partial[1]}\r\n          </div>\r\n        ),\r\n      };\r\n    } else {\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: <div className=\"fill-blank-table-row\">{e.definition}</div>,\r\n      };\r\n    }\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Sentance\",\r\n      dataIndex: \"sentance\",\r\n      key: \"key\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"fill-blank-test-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the correct\r\n        word from the below.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        showHeader={false}\r\n        pagination={{ position: [] }}\r\n      />\r\n      <BlankWords list={list} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FillTheBlanks;\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const Dictation = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const pronunce = (audio: string) => {\r\n    new Audio(audio).play();\r\n  };\r\n\r\n  const dataSource = list.map((e, index) => {\r\n    return {\r\n      key: e.word,\r\n      order: `${index + 1}.`,\r\n      definition: (\r\n        <div\r\n          onClick={() => pronunce(e.pronunciations)}\r\n          className=\"dictation-table-definition-row\"\r\n        >\r\n          <span>{e.partOfSpeech}.</span>\r\n          <span> </span>\r\n          <span>{Math.random() < 0.5 ? e.definition : e.translation}</span>\r\n        </div>\r\n      ),\r\n      answer: (\r\n        <div className=\"dictation-table-answer-row\">\r\n          <div className=\"dictation-table-answer-row-word\">\r\n            {answerVisiblity ? e.word : \"\"}\r\n          </div>\r\n          <div className=\"dictation-table-answer-row-translate\">\r\n            {answerVisiblity ? e.translation : \"\"}\r\n          </div>\r\n        </div>\r\n      ),\r\n    };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Definition\",\r\n      dataIndex: \"definition\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"English Word\",\r\n      dataIndex: \"answer\",\r\n      key: \"key\",\r\n      width: \"25%\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"word-test-dictation\">\r\n      <h2 className=\"word-test-dictation-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the words.\r\n        Write both Present and Past forms for verbs.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={{ position: [] }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dictation;\r\n","import { WordType } from \"logic/api/ox\";\r\nimport { getWordTest } from \"logic/api/wordTest\";\r\nimport { WordTestType } from \"logic/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport FillTheBlanks from \"./FillTheBlanks\";\r\nimport Dictation from \"./Dictation\";\r\n\r\nimport \"./style.css\";\r\nimport { Button, Space } from \"antd\";\r\n\r\nconst shuffle = (array: any[]) => {\r\n  let currentIndex = array.length;\r\n  let randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\ntype SaveType = {\r\n  part1: Array<WordType>;\r\n  part2: Array<WordType>;\r\n};\r\n\r\nexport const WordTestPaper = ({ level }: { level?: string }) => {\r\n  const [test, setTest] = useState<SaveType>({ part1: [], part2: [] });\r\n  const [answerVisiblity, showAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let testList = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          testList.push(wordType);\r\n        }\r\n\r\n        const q = shuffle(testList);\r\n        const count = Math.round(testList.length / 2);\r\n\r\n        setTest({ part1: q.slice(0, count), part2: q.slice(count) });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onClickShowAnswer = (visible: boolean) => {\r\n    showAnswer(visible);\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-test-layout\">\r\n      <h2>{`<${level}>`}</h2>\r\n      <Dictation list={[...test.part1]} answerVisiblity={answerVisiblity} />\r\n      <br />\r\n      <FillTheBlanks list={[...test.part2]} answerVisiblity={answerVisiblity} />\r\n      <Space>\r\n        <Button onClick={() => onClickShowAnswer(!answerVisiblity)}>\r\n          정답보기\r\n        </Button>\r\n        <Button onClick={() => window.print()}>시험지 출력하기</Button>\r\n      </Space>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestPaper } from \"component/WordTestPaper\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTest = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestPaper {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTest;\r\n","import { Button, Menu } from \"antd\";\r\nimport { getTestLevelList } from \"logic/api/wordTest\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestLevelList = () => {\r\n  const [list, setList] = useState<Array<string>>([]);\r\n\r\n  useEffect(() => {\r\n    getTestLevelList().then((testList) => {\r\n      setList(testList);\r\n    });\r\n  }, []);\r\n\r\n  const deleteLevel = (level: string) => {};\r\n\r\n  return (\r\n    <Menu>\r\n      {list.map((level) => (\r\n        <Menu.Item key={level}>\r\n          <div className=\"word-test-level-list-link-container\">\r\n            <Link to={`/wordtest/test/${level}`}>{level}</Link>\r\n            <Button type=\"link\">\r\n              <Link to={`/wordtest/regist/${level}`}>수정</Link>\r\n            </Button>\r\n            <Button type=\"link\" onClick={() => deleteLevel(level)}>\r\n              삭제\r\n            </Button>\r\n          </div>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { WordTestLevelList } from \"component/WordTestLevelList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestHome = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-home-content-container\">\r\n        <div>\r\n          <Button>\r\n            <Link to=\"/wordtest/regist\">\r\n              새 시험 등록 <PlusCircleTwoTone />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n        <div className=\"word-test-home-content-row\">\r\n          <WordTestLevelList />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestHome;\r\n","import \"./style.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Paragraph, Title, Text } = Typography;\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"home-content-container\">\r\n        <Typography>\r\n          <Paragraph>Welcome to Home Funny !</Paragraph>\r\n          <Paragraph>\r\n            <Title level={4}>오늘의 화장실</Title>\r\n            화장실 순번 보기, 간단한 메모\r\n          </Paragraph>\r\n          <Paragraph>\r\n            <Title level={4}>정상 단어 테스트</Title>\r\n            정상 단어 테스트 시험지 출력\r\n          </Paragraph>\r\n        </Typography>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export type WordType = {\r\n  word: string;\r\n  partOfSpeech: string;\r\n  definition: string;\r\n  translation: string;\r\n  example: string;\r\n  pronunciations: string;\r\n};\r\n\r\nexport const initialWord: WordType = {\r\n  word: \"\",\r\n  partOfSpeech: \"Noun\",\r\n  definition: \"\",\r\n  translation: \"\",\r\n  example: \"\",\r\n  pronunciations: \"\",\r\n};\r\n\r\ntype OxEntryType = {\r\n  etymologies: Array<any>;\r\n  language: string;\r\n  pronunciations: Array<any>;\r\n  senses: Array<any>;\r\n};\r\n\r\ntype OxResultType = {\r\n  text: string;\r\n  lexicalCategory: { id: string; text: string };\r\n  entries: Array<OxEntryType>;\r\n};\r\n\r\nconst fromEnties = ({\r\n  text,\r\n  lexicalCategory,\r\n  entries,\r\n}: OxResultType): WordType | undefined => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n    const pronunciations = entry.pronunciations[\"0\"].audioFile;\r\n\r\n    let definitions = Array<{ text: string; example: string }>();\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.definitions) {\r\n        definitions.push({\r\n          text: sense.definitions[0],\r\n          example: sense.examples![0].text,\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      word: text,\r\n      partOfSpeech: lexicalCategory.text,\r\n      definition: definitions[0].text,\r\n      translation: \"\",\r\n      example: definitions[0].example,\r\n      pronunciations: pronunciations,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunce = ({ entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    return entry.pronunciations[\"0\"].audioFile;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunceAndExample = ({ text, entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.examples) {\r\n        // 예문의 경우 시제가 다르게 들어갈 수 있어서 깔끔하게 되지 않는다.\r\n\r\n        for (const exam of sense.examples) {\r\n          if (exam.text.includes(text)) {\r\n            return {\r\n              pronounce: entry.pronunciations[\"0\"].audioFile,\r\n              example: exam.text,\r\n            };\r\n          }\r\n        }\r\n\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n          example: sense.examples[\"0\"].text,\r\n        };\r\n      } else {\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n        };\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const fetchWordFromOx = async (text: string) => {\r\n  if (process.env.REACT_APP_OX_APP_ID && process.env.REACT_APP_OX_APP_KEY) {\r\n    const language = \"en-gb\";\r\n    const word_id = text;\r\n    const apiurl = `https://od-api.oxforddictionaries.com:443/api/v2/entries/${language}/${word_id.toLowerCase()}`;\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        app_id: process.env.REACT_APP_OX_APP_ID,\r\n        app_key: process.env.REACT_APP_OX_APP_KEY,\r\n      },\r\n    };\r\n\r\n    const crosproxy = `https://home-funny-server.herokuapp.com/${apiurl}`;\r\n\r\n    const result = await fetch(crosproxy, options);\r\n    const json = await result.json();\r\n    if (json.results) {\r\n      return json.results;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const searchWord = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n\r\n  let wordDefinition = Array<WordType>();\r\n\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      const cov = fromEnties(e);\r\n      cov && wordDefinition.push(cov);\r\n    }\r\n  }\r\n\r\n  return wordDefinition;\r\n};\r\n\r\nexport const fetchPronunciations = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunce(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport const fetchPronunceAndExample = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunceAndExample(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n","import { Button, Form, Input, Select, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { MinusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\ntype Props = {\r\n  index: number;\r\n  deleteItem: (index: number) => void;\r\n};\r\n\r\nconst WordInputCardFormItem = ({ index, deleteItem }: Props) => {\r\n  const { Option } = Select;\r\n\r\n  const labels: WordType = {\r\n    word: \"단어\",\r\n    partOfSpeech: \"품사\",\r\n    definition: \"영문 뜻\",\r\n    translation: \"한글 뜻\",\r\n    example: \"예제\",\r\n    pronunciations: \"\",\r\n  };\r\n\r\n  return (\r\n    <Form.Item label={`Q.${index + 1}`}>\r\n      <Space align=\"start\">\r\n        <Form.Item name={[index, \"word\"]} rules={[{ required: true }]}>\r\n          <Input placeholder={labels[\"word\"]} allowClear />\r\n        </Form.Item>\r\n        <Form.Item name={[index, \"partOfSpeech\"]}>\r\n          <Select placeholder={labels[\"partOfSpeech\"]}>\r\n            <Option value=\"Noun\">Noun</Option>\r\n            <Option value=\"Verb\">Verb</Option>\r\n            <Option value=\"Adjective\">Adjective</Option>\r\n            <Option value=\"Adverb\">Adverb</Option>\r\n            <Option value=\"Pronoun\">Pronoun</Option>\r\n            <Option value=\"Conjunction\">Conjunction</Option>\r\n            <Option value=\"Preposition\">Preposition</Option>\r\n            <Option value=\"Interjection\">Interjection</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Button onClick={() => deleteItem(index)}>\r\n          <MinusCircleTwoTone /> 삭제\r\n        </Button>\r\n      </Space>\r\n      <Form.Item name={[index, \"definition\"]}>\r\n        <TextArea placeholder={labels[\"definition\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"translation\"]}>\r\n        <Input placeholder={labels[\"translation\"]} allowClear></Input>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"example\"]}>\r\n        <TextArea placeholder={labels[\"example\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default WordInputCardFormItem;\r\n","import { Button, Form, FormInstance, Input, message, Space } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\nimport { addWordTest, getWordTest } from \"logic/api/wordTest\";\r\nimport { fetchPronunceAndExample, initialWord, WordType } from \"logic/api/ox\";\r\nimport WordInputCardFormItem from \"./WordInputCardFormItem\";\r\nimport { WordTestType } from \"logic/type\";\r\nimport { connectFirestoreEmulator } from \"firebase/firestore/lite\";\r\n\r\nexport const WordTestWordRegist = ({ level }: { level?: string }) => {\r\n  const [testlist, setTestlist] = useState<Array<WordType>>([initialWord]);\r\n  const formRef = useRef<FormInstance>(null);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let list = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          list.push(wordType);\r\n        }\r\n\r\n        setTestlist(list);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (formRef.current) {\r\n      testlist.map((word, index) => {\r\n        formRef.current?.setFieldsValue({\r\n          [index]: {\r\n            ...word,\r\n          },\r\n        });\r\n        return word;\r\n      });\r\n    }\r\n  }, [testlist]);\r\n\r\n  const addInputWord = () => {\r\n    setTestlist((list) => [...list, initialWord]);\r\n  };\r\n\r\n  const onValuesChange = async (changedValues: any, allValues: any) => {\r\n    for (const key in changedValues) {\r\n      setTestlist((list) => {\r\n        const index = parseInt(key);\r\n        list[index] = {\r\n          ...list[index],\r\n          ...changedValues[key],\r\n        };\r\n        return [...list];\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveTest = async (values: any) => {\r\n    message.loading({\r\n      content: \"저장을 하고 있습니다...\",\r\n      key: \"updatable\",\r\n      duration: 0,\r\n    });\r\n\r\n    const docName = values[\"title\"];\r\n\r\n    let completed = true;\r\n    let saveForm = Array<WordTestType>();\r\n\r\n    for (const key in values) {\r\n      if (key === \"title\") {\r\n        continue;\r\n      }\r\n\r\n      const { word, partOfSpeech, definition, translation, example } =\r\n        values[key];\r\n      if (!word) {\r\n        continue;\r\n      }\r\n\r\n      const result = await fetchPronunceAndExample(word);\r\n      if (result) {\r\n        const override: WordType = {\r\n          word: word,\r\n          partOfSpeech: partOfSpeech,\r\n          definition: definition,\r\n          translation: translation,\r\n          example: example ? example : result.example,\r\n          pronunciations: result.pronounce,\r\n        };\r\n\r\n        saveForm.push({\r\n          word: word,\r\n          desc: JSON.stringify(override),\r\n        });\r\n      } else {\r\n        alert(`${word} 잘못된 단어가 있습니다.`);\r\n        completed = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (completed) {\r\n      const result = await addWordTest(docName, saveForm);\r\n      if (result) {\r\n        message.success({\r\n          content: \"저장했습니다.\",\r\n          key: \"updatable\",\r\n          duration: 2,\r\n        });\r\n      } else {\r\n        message.error({ content: \"서버에 접속할 수 없습니다.\", duration: 2 });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteFormItem = (index: number) => {\r\n    setTestlist((list) => {\r\n      list.splice(index, 1);\r\n      return [...list];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", alignItems: \"flex-end\", padding: \"1rem\" }}>\r\n      <Form\r\n        onFinish={saveTest}\r\n        onValuesChange={onValuesChange}\r\n        layout=\"vertical\"\r\n        ref={formRef}\r\n        style={{ flexGrow: \"1\" }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true }]}\r\n          label=\"테스트이름\"\r\n          initialValue={level}\r\n        >\r\n          <Input placeholder=\"정상 레벨 또는 워크북 페이지\" />\r\n        </Form.Item>\r\n        {testlist.map((e, index) => (\r\n          <WordInputCardFormItem\r\n            key={index}\r\n            index={index}\r\n            deleteItem={deleteFormItem}\r\n          />\r\n        ))}\r\n        <Space size={40}>\r\n          <Button onClick={addInputWord}>\r\n            단어 추가 <PlusCircleTwoTone />\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            저장\r\n          </Button>\r\n        </Space>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestWordRegist } from \"component/WordTestWordRegist\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestRegist = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestWordRegist {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestRegist;\r\n","import React from \"react\";\r\nimport { Slider, Timeline as Time } from \"antd\";\r\nimport { EventLogType } from \"logic/api/eventLog\";\r\nimport { EventFormType, splitLogToContents } from \"logic/api/misc\";\r\nimport { NameTag } from \"component/NameTag\";\r\n\r\nimport \"./style.css\";\r\n\r\ntype TimelineProps = {\r\n  logs: Array<EventLogType>;\r\n};\r\n\r\nexport const Timeline = ({ logs }: TimelineProps) => {\r\n  let events = Array<EventFormType>();\r\n  logs.map((log) => {\r\n    events.push(splitLogToContents(log.log));\r\n    return log;\r\n  });\r\n\r\n  events.sort((a, b): number => {\r\n    const l_date = new Date(a.time);\r\n    const r_date = new Date(b.time);\r\n\r\n    if (l_date > r_date) {\r\n      return 1;\r\n    } else if (l_date < r_date) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n\r\n  try {\r\n    const user = events[0].name;\r\n\r\n    const style = {\r\n      backgroundColor: user === \"james\" ? \"white\" : \"ghostwhite\",\r\n    };\r\n\r\n    const now = new Date();\r\n\r\n    let currentActived = 0;\r\n    events.map((log, index) => {\r\n      const tagTime = new Date(log.time);\r\n      if (tagTime < now) {\r\n        currentActived = index;\r\n      }\r\n\r\n      return log;\r\n    });\r\n\r\n    let value = 0;\r\n\r\n    if (currentActived + 1 < events.length) {\r\n      const from = new Date(events[currentActived].time);\r\n      const to = new Date(events[currentActived + 1].time);\r\n\r\n      const duration = to.valueOf() - from.valueOf();\r\n      const pregressed = new Date().valueOf() - from.valueOf();\r\n\r\n      value = (pregressed / duration) * 100;\r\n    }\r\n\r\n    const currentWork = (\r\n      <>\r\n        <div className=\"timeline-current\">{events[currentActived].text}</div>\r\n        <div className=\"icon-wrapper\">\r\n          <Slider value={value} />\r\n        </div>\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"timeline-pannel\" style={style}>\r\n        <p>\r\n          <NameTag name={user} />\r\n        </p>\r\n        <p>{currentWork}</p>\r\n        <Time>\r\n          {events.map((log, index) => {\r\n            const tagTime = new Date(log.time);\r\n\r\n            let color = \"blue\";\r\n            if (currentActived !== index && tagTime < now) {\r\n              color = \"green\";\r\n            } else if (tagTime > now) {\r\n              color = \"gray\";\r\n            }\r\n\r\n            return (\r\n              <Time.Item key={index} color={color}>\r\n                <span>{tagTime.toLocaleTimeString()}</span>{\" \"}\r\n                <NameTag name={log.name} /> <span>{log.text}</span>\r\n              </Time.Item>\r\n            );\r\n          })}\r\n        </Time>\r\n      </div>\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return <div></div>;\r\n};\r\n","import Layout from \"component/Layout\";\r\nimport { Timeline } from \"component/Timeline\";\r\nimport { EventLogType, getTodayEvent, getEventAt } from \"logic/api/eventLog\";\r\nimport { splitLogToContents } from \"logic/api/misc\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const TimelineView = () => {\r\n  const [todayEvent, setTodayEvent] = useState<Array<EventLogType>>([]);\r\n  const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n\r\n  useEffect(() => {\r\n    getTodayEvent().then((log) => {\r\n      console.log(log);\r\n\r\n      setTodayEvent(log);\r\n    });\r\n\r\n    window.setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n  }, []);\r\n\r\n  const filteredLogs = (user: string): Array<EventLogType> => {\r\n    return todayEvent.filter((log) => {\r\n      const { type, name } = splitLogToContents(log.log);\r\n      if (type === \"custom\" && name === user) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n\r\n  const james = filteredLogs(\"james\");\r\n  const henry = filteredLogs(\"henry\");\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"timeline-container\">\r\n        <div className=\"timeline-clock\">{time}</div>\r\n        <div className=\"timeline-contents\">\r\n          <Timeline logs={james} />\r\n          <Timeline logs={henry} />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TimelineView;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"logic/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Bath from \"pages/Bath\";\r\nimport WordTest from \"pages/WordTest\";\r\nimport WordTestHome from \"pages/WordTestHome\";\r\nimport Home from \"pages/Home\";\r\n\r\nimport \"./index.css\";\r\nimport WordTestRegist from \"pages/WordTestRegist\";\r\nimport { TimelineView } from \"pages/TimelineView\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename=\"/homefunny\">\r\n        <Routes>\r\n          <Route index element={<Home />} />\r\n          <Route path=\"/bath\" element={<Bath />} />\r\n          <Route path=\"/wordtest\" element={<WordTestHome />} />\r\n          <Route path=\"/wordtest/regist/\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/regist/:level\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/test/:level\" element={<WordTest />} />\r\n          <Route path=\"/timeline\" element={<TimelineView />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}