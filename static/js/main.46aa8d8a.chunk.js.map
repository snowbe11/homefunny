{"version":3,"sources":["logic/firebase.ts","logic/api/eventLog.ts","logic/reducer/eventUser.ts","logic/reducer/bathUser.ts","logic/store.ts","logic/type.ts","component/NameTag/index.tsx","logic/api/misc.ts","component/EventUser/index.tsx","component/HomeNavigation/index.tsx","component/Layout/index.tsx","component/TodayBathUser/index.tsx","pages/Bath/index.tsx","logic/api/wordTest.ts","component/WordTestPaper/FillTheBlanks/index.tsx","component/WordTestPaper/Dictation/index.tsx","component/WordTestPaper/index.tsx","pages/WordTest/index.tsx","component/WordTestLevelList/index.tsx","pages/WordTestHome/index.tsx","pages/Home/index.tsx","logic/api/ox.ts","component/WordTestWordRegist/WordInputCardFormItem/index.tsx","component/WordTestWordRegist/index.tsx","pages/WordTestRegist/index.tsx","component/Timeline/index.tsx","pages/TimelineView/index.tsx","component/Calendar/index.tsx","component/LogParser/index.tsx","component/EventLog/index.tsx","component/AddEvent/index.tsx","pages/Scheduler/index.tsx","index.tsx"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","getCollectionSnapshot","collection","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","getEventLogSnapshot","storeCollection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","undefined","getEventByDate","date","thisweek","getDay","repeatQuery","where","snapshotByRepeat","logCollection2","eventLog","now","Date","eventDate","EventTime","seconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","Timestamp","fromDate","timefrom","setDate","getDate","timeto","pickDateQuery","snapshotByDate","logFilterCollection","filter","Repeat","length","logCollection1","getRecentBathEvent","eventDateLog","bathLogOnly","log","parseLegacyEventLog","eventType","eventUser","name","console","getTodayEvent","getEventAt","toDateString","getEventLog","convertedDataform","addEvent","collectionRef","addDoc","LoggingTime","loggingTime","EventType","eventTime","EventUser","EventLog","logText","repeat","token","split","splitLogToContents","initialEventUserState","getTime","fetchEventUser","eventUserThuck","createAsyncThunk","eventUserSlice","createSlice","initialState","reducers","extraReducers","pending","type","state","fulfilled","action","payload","rejected","countingDays","from","fromDay","toLocaleDateString","diff","sign","Math","floor","abs","getBathUser","days","initialBathUserState","dayPassed","bathUserSlice","getTodayBathUser","newState","bathUserReducer","actions","rootReducers","combineReducers","eventUserReducer","bathUser","configureStore","reducer","UserName","james","henry","NameTag","props","color","toKrDateString","year","month","day","normalizeTimeToday","l_date","Text","Typography","useSelector","Fragment","HomeNavigation","location","useLocation","mode","selectedKeys","pathname","Item","to","CalendarOutlined","CheckSquareOutlined","ClockCircleOutlined","Header","L","Sider","Content","Footer","Layout","children","style","minHeight","className","theme","align","src","width","height","alt","TodayBathUser","Title","level","Bath","useState","pickDate","dispatch","useDispatch","updateTodayUser","useCallback","useEffect","title","getTestLevelList","list","Array","forEach","e","push","id","getWordTestSnapshot","getWordTest","testObject","test","Object","keys","key","addWordTest","stateLogDocRef","docData","word","desc","setDoc","BlankWords","FillTheBlanks","answerVisiblity","dataSource","index","example","partial","order","sentance","fill","join","definition","EditOutlined","fontSize","columns","dataIndex","showHeader","pagination","position","Dictation","onClick","audio","pronunciations","Audio","play","partOfSpeech","translation","answer","WordTestPaper","part1","part2","setTest","showAnswer","then","testList","wordType","JSON","parse","q","array","randomIndex","currentIndex","random","shuffle","count","round","slice","window","print","WordTest","params","useParams","WordTestLevelList","setList","WordTestHome","PlusCircleTwoTone","Paragraph","Home","initialWord","getPronunceAndExample","text","entries","entry","senses","sense","examples","exam","includes","pronounce","audioFile","fetchWordFromOx","word_id","apiurl","toLowerCase","options","method","headers","app_id","app_key","crosproxy","fetch","result","json","results","fetchPronunceAndExample","enties","lexicalEntries","WordInputCardFormItem","deleteItem","Option","Select","labels","label","rules","required","placeholder","allowClear","value","MinusCircleTwoTone","WordTestWordRegist","testlist","setTestlist","formRef","useRef","current","setFieldsValue","saveCurrentForm","values","getFieldsValue","saveValues","parseInt","saveTest","message","loading","content","duration","docName","completed","saveForm","override","stringify","error","success","deleteFormItem","splice","display","alignItems","padding","onFinish","layout","ref","flexGrow","initialValue","size","htmlType","WordTestRegist","dingAudio","Timeline","logs","alarmed","setAlarmed","sort","b","r_date","user","backgroundColor","currentActived","valueOf","currentWork","tagTime","toLocaleTimeString","TimelineView","todayEvent","setTodayEvent","time","setTime","setInterval","filteredLogs","Calendar","fullscreen","onSelect","setNewDate","onDateChanged","toDate","LogParser","logState","setLogState","defaultActiveKey","Panel","header","i","toLocaleString","AddEvent","addToast","labelCol","span","newLog","event","who","ret","defaultPickerValue","moment","use12Hours","format","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","Group","Scheduler","direction","ReactDOM","render","StrictMode","basename","element","path","document","getElementById"],"mappings":"6fAsBMA,EAAcC,YAXU,CAC5BC,OAAQC,0CACRC,WAAYD,kCACZE,UAAWF,kBACXG,cAAeH,8BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAMJO,EAAQC,YAAaX,GAErBY,EAAqB,uCAAG,WACnCC,EACAC,GAFmC,iBAAAC,EAAA,6DAI7BC,EAASC,YAAIP,EAAOG,EAAYC,GAJH,SAKTI,YAAOF,GALE,YAK7BG,EAL6B,QAMnBC,SANmB,yCAO1BD,EAAYE,QAPc,2CAAH,wDAiBnBX,ICTTY,EAAmB,uCAAG,gCAAAP,EAAA,6DAElBQ,EAAkBV,YACtBH,EACAP,YAEIqB,EAAaC,YAAMF,EAAiBG,YAAQ,YAAa,SANvC,SAOIC,YAAQH,GAPZ,cAOlBI,EAPkB,yBAQjBA,EAAcC,KAAKC,KAAI,SAACb,GAAD,OAASA,EAAII,WARnB,qCAUjBU,GAViB,4CAAH,qDAcnBC,EAAc,uCAAG,WAAOC,GAAP,mCAAAlB,EAAA,6DAEbQ,EAAkBV,YACtBH,EACAP,YAKI+B,EADO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAClCD,EAAKE,UAErBC,EAAcX,YAAMF,EAAiBc,YAAM,SAAU,iBAAkBH,IAX1D,SAYYP,YAAQS,GAZpB,cAYbE,EAZa,OAcbC,EAAiBD,EAAiBT,KAAKC,KAAI,SAACb,GAChD,IAAIuB,EAAWvB,EAAII,OAGboB,EAAM,IAAIC,KACVC,EAAY,IAAID,KAAkC,IAA7BF,EAASI,UAAUC,SAO9C,OANAJ,EAAIK,SAASH,EAAUI,YACvBN,EAAIO,WAAWL,EAAUM,cACzBR,EAAIS,WAAWP,EAAUQ,cAEzBX,EAASI,UAAYQ,IAAUC,SAASZ,GAEjCD,KAIHc,EAAWF,IAAUC,SAASpB,GACpCA,EAAKsB,QAAQtB,EAAKuB,UAAY,GACxBC,EAAUL,IAAUC,SAASpB,GAC7ByB,EAAgBjC,YAAMF,EAAiBc,YAAM,YAAa,KAAMiB,GAAWjB,YAAM,YAAa,KAAMoB,IAjCvF,UAkCU9B,YAAQ+B,GAlClB,eAkCbC,EAlCa,OAsCbC,EAAsBD,EAAe9B,KAAKgC,QAAO,SAAC5C,GACtD,IAAMuB,EAAWvB,EAAII,OAErB,OAAKmB,EAASsB,QAAqC,IAA3BtB,EAASsB,OAAOC,UAQpCC,EAAiBJ,EAAoB9B,KAAI,SAAAb,GAAG,OAAGA,EAAII,UAjDtC,wCAmDR2C,GAnDQ,YAmDWzB,KAnDX,sCAqDZR,GArDY,4CAAH,sDAyDPkC,EAAkB,uCAAG,wCAAAlD,EAAA,+EAEHO,IAFG,YAExB4C,EAFwB,yBAItBC,EAAcD,EAAaL,QAAO,SAACO,GAEvC,MAAsB,SADAC,EAAoBD,GAAlCE,aALkB,cASVH,GATU,gEASjBC,EATiB,UAUJC,EAAoBD,GAAlCG,EAVkB,EAUlBA,UAVkB,kBAWnB,CACLtC,KAAM,IAAIS,KAA6B,IAAxB0B,EAAIxB,UAAUC,SAC7B2B,KAAMD,IAbkB,iMAkB9BE,QAAQL,IAAR,MAlB8B,iCAqBzB,CACLnC,KAAM,IAAIS,KAAK,cACf8B,KAAM,UAvBwB,uEAAH,qDA2BlBE,EAAa,uCAAG,sBAAA3D,EAAA,+EACpB4D,EAAW,IAAIjC,OADK,2CAAH,qDAIbiC,EAAU,uCAAG,WAAO1C,GAAP,eAAAlB,EAAA,+EAEGiB,EAAe,IAAIU,KAAKT,EAAK2C,iBAFhC,YAElBV,EAFkB,iDAIbA,EAAapC,KAAI,SAAAsC,GACtB,OAAOC,EAAoBD,OALT,uDAStBK,QAAQL,IAAR,MATsB,iCAYjB,IAZiB,yDAAH,sDAeVS,EAAW,uCAAG,8BAAA9D,EAAA,+EAEEO,IAFF,YAEnB4C,EAFmB,+BAIfY,EAAoBZ,EAAapC,KAAI,SAACsC,GAC1C,OAAOC,EAAoBD,MALR,kBAQdU,GARc,gCAUd,IAVc,mFAahB,IAbgB,0DAAH,qDAiBXC,EAAQ,uCAAG,WAAOvC,GAAP,eAAAzB,EAAA,6DAEdiE,EAAgBnE,YACpBH,EACAP,YAJkB,SAMd8E,YAAOD,EAAe,CAC1BE,YAAa9B,IAAUC,SAASb,EAAS2C,aACzCC,UAAW5C,EAAS8B,UACpB1B,UAAWQ,IAAUC,SAASb,EAAS6C,WACvCC,UAAW9C,EAAS+B,UACpBgB,SAAU/C,EAASgD,QACnB1B,OAAQtB,EAASiD,SAZC,gCAgBfjD,GAhBe,2CAAH,sDA8CR6B,EAAsB,SAACD,GAClC,OAAKA,EAAIkB,WAAsC,IAAzBlB,EAAIkB,UAAUvB,OAI3B,CACLoB,YAAa,IAAIzC,KAA+B,IAA1B0B,EAAIc,YAAYrC,SACtCyB,UAAWF,EAAIgB,UACfC,UAAW,IAAI3C,KAA6B,IAAxB0B,EAAIxB,UAAUC,SAClC0B,UAAWH,EAAIkB,UACfE,QAASpB,EAAImB,SACbE,OAAQrB,EAAIN,QApCgB,SAACM,GACjC,IAAMsB,EAAQtB,EAAIuB,MAAM,KAExB,OAAID,EAAM3B,OAAS,EACV,CACLoB,YAAa,IAAIzC,KAAKgD,EAAM,IAC5BL,UAAW,IAAI3C,KAAKgD,EAAM,IAC1BnB,UAAWmB,EAAM,GACjBpB,UAAWoB,EAAM,GACjBF,QAASE,EAAM,GACfD,OAAQ,IAIH,CACLN,YAAa,IAAIzC,KAAKgD,EAAM,IAC5BL,UAAW,IAAI3C,KAAKgD,EAAM,IAC1BnB,UAAWmB,EAAM,GACjBpB,UAAWoB,EAAM,GACjBF,QAASE,EAAM,GACfD,OAAQC,EAAM,GAAGC,MAAM,KAOlBC,CAAmBxB,EAAImB,WClN5BM,EAAmC,CACvC5D,KAAM,IAAIS,KAAK,YAAYoD,UAC3BtB,KAAM,SAGFuB,EAAc,uCAAG,gCAAAhF,EAAA,sEACQkD,IADR,uBACbhC,EADa,EACbA,KAAMuC,EADO,EACPA,KADO,kBAEd,CAAEvC,KAAMA,EAAK6D,UAAWtB,KAAMA,IAFhB,2CAAH,qDAKPwB,EAAiBC,YAAiB,UAAD,sBAAY,sBAAAlF,EAAA,sEAC3CgF,IAD2C,oFAwB3CG,EApBQC,YAAY,CACjC3B,KAAM,YACN4B,aAAcP,EACdQ,SAAU,GACVC,eAAa,mBACVN,EAAeO,QAAQC,MAAO,SAACC,OADrB,cAEVT,EAAeU,UAAUF,MAAO,SAC/BC,EACAE,GAEA,IAAMC,EAAUD,EAAOC,QACvBH,EAAMxE,KAAO2E,EAAQ3E,KACrBwE,EAAMjC,KAAOoC,EAAQpC,QARZ,cAUVwB,EAAea,SAASL,MAAO,SAACC,GAC/BhC,QAAQL,IAAI,mCAXH,KAgBf,QC7BM0C,EAAe,SAAC7E,EAAY8E,GAChC,IAAMC,EAAU,IAAItE,KAAKqE,EAAKE,sBAGxBC,GAFa,IAAIxE,KAAKT,EAAKgF,sBAERnB,UAAYkB,EAAQlB,WAD7B,MAEVqB,EAAOC,KAAKD,KAAKD,GACvB,OAAOE,KAAKC,MAAMD,KAAKE,IAAIJ,IAASC,GAGhCI,EAAc,SAACC,EAAchD,GACjC,OAAIgD,EAAO,IAAM,EACF,UAAThD,EACK,QAEA,QAGI,UAATA,EACK,QAEA,SAKPiD,EAAiC,CACrCjD,KAAM,QACNkD,UAAW,GAuBPC,EAAgBxB,YAAY,CAChC3B,KAAM,WACN4B,aAAcqB,EACdpB,SAAU,CACRuB,iBAAkB,SAChBnB,EACAE,GAEA,IAAMkB,EA5BY,WAAoF,IAAnFpB,EAAkF,uDAAhEgB,EAAsBd,EAA0C,uCACzG,GAAoB,kBAAhBA,EAAOH,KAA0B,CACnC,IAAMkB,EAAYZ,EAChB,IAAIpE,KAAKiE,EAAO1E,MAChB,IAAIS,KAAKiE,EAAOpC,UAAUtC,OAO5B,MAAO,CACLuC,KALe+C,EAAYG,EAAWf,EAAOpC,UAAUC,MAMvDkD,aAGF,OAAOjB,EAYYqB,CAAgBrB,EAAOE,EAAOC,SAG/CH,EAAMjC,KAAOqD,EAASrD,KACtBiC,EAAMiB,UAAYG,EAASH,YAG/BpB,cAAe,KAGFsB,EAAqBD,EAAcI,QAAnCH,iBAEAD,IAAf,Q,QCrEMK,EAAmCC,YAAgB,CACvD1D,UAAW2D,EACXC,SAAUL,IAQGpH,EALD0H,YAAe,CAC3BC,QAASL,I,iDCCEM,EAAyB,CACpCC,MAAO,eACPC,MAAO,gB,OClBIC,EAAU,SAACC,GACtB,OACE,cAAC,IAAD,CAAKC,MAAsB,UAAfD,EAAMlE,KAAmB,aAAe,UAApD,SACG8D,EAASI,EAAMlE,SCNToE,EAAiB,SAAC3G,GAC3B,OAAOA,EAAKgF,mBAAmB,QAAS,CACpC4B,KAAM,UACNC,MAAO,OACPC,IAAK,aAIAC,EAAqB,SAAC/G,GACjC,IAAMgH,EAAS,IAAIvG,KAInB,OAHAuG,EAAOnG,SAASb,EAAKc,YACrBkG,EAAOjG,WAAWf,EAAKgB,cAEhBgG,GCNDC,EAASC,IAATD,KAEK5D,GAAY,WACvB,IAAMf,EAAY6E,aAAY,SAAC3C,GAAD,OAAsBA,EAAMlC,aAE1D,OACE,cAAC,IAAM8E,SAAP,UACE,eAACH,EAAD,6CACQ,cAAC,EAAD,CAAS1E,KAAMD,EAAUC,OADjC,SAC2C,IACxCoE,EAAe,IAAIlG,KAAK6B,EAAUtC,OAFrC,sD,kGCLOqH,GAAiB,WAC5B,IAAMC,EAAWC,cAEjB,OACE,eAAC,KAAD,CAAMC,KAAK,aAAaC,aAAc,CAACH,EAASI,UAAhD,UACE,cAAC,KAAKC,KAAN,UACE,eAAC,IAAD,CAAMC,GAAG,QAAT,UACE,cAACC,GAAA,EAAD,IADF,0BADa,SAKf,cAAC,KAAKF,KAAN,UACE,eAAC,IAAD,CAAMC,GAAG,YAAT,UACE,cAACE,GAAA,EAAD,IADF,gCADa,aAKf,cAAC,KAAKH,KAAN,UACE,eAAC,IAAD,CAAMC,GAAG,YAAT,UACE,cAACG,GAAA,EAAD,IADF,0BADa,aAKf,cAAC,KAAKJ,KAAN,UACE,eAAC,IAAD,CAAMC,GAAG,aAAT,UACE,cAACG,GAAA,EAAD,IADF,uCADa,kBCrBbC,GAAmCC,KAAnCD,OAAQE,GAA2BD,KAA3BC,MAAOC,GAAoBF,KAApBE,QAASC,GAAWH,KAAXG,OAwDjBC,GApDwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,OACE,eAAC,KAAD,CAAGC,MAAO,CAAEC,UAAW,SAAvB,UACE,cAACR,GAAD,CAAQS,UAAU,4BAAlB,SACE,cAAC,KAAD,CAAMC,MAAM,OAAZ,SACE,cAAC,KAAKf,KAAN,UACE,eAAC,KAAD,CAAOgB,MAAM,SAAb,UACE,qBACEC,IAAI,0DACJC,MAAM,OACNC,OAAO,OACPC,IAAI,UALR,iBADa,cAanB,cAAC,eAAD,UACE,eAAC,KAAD,WACE,cAACb,GAAD,CAAOQ,MAAM,QAAQD,UAAU,4BAA/B,SACE,eAAC,KAAD,CAAMjB,KAAK,WAAX,UACE,cAAC,KAAKG,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,QAAT,oDADa,QAGf,cAAC,KAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,YAAT,2DADa,YAGf,cAAC,KAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,YAAT,iCADa,YAGf,cAAC,KAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,aAAT,8CADa,kBAKnB,cAACO,GAAD,CAASM,UAAU,iBAAnB,SAAqCH,SAGzC,eAAC,cAAD,WACE,cAAC,KAAD,CAAGG,UAAU,4BAAb,SACE,cAAC,GAAD,MAEF,cAACN,GAAD,CAASM,UAAU,iBAAnB,SAAqCH,OAEvC,cAACF,GAAD,CAAQK,UAAU,4BAAlB,0C,qBCnDOO,GAAgB,SAACvC,GAC5B,IAAMP,EAAWiB,aAAY,SAAC3C,GAAD,OAAsBA,EAAM0B,YAEzD,OACE,cAAC,IAAD,UACE,cAAC,KAAD,UACE,eAAC,IAAW+C,MAAZ,CAAkBC,MAAO,EAAzB,gCACM,cAAC,EAAD,CAAS3G,KAAM2D,EAAS3D,OAD9B,4CC2CO4G,GAzCF,WACX,MAAmBC,mBAAS,IAAI3I,MAAzB4I,EAAP,oBAEMC,EAAWC,cAEXjH,EAAY6E,aAAY,SAAC3C,GAAD,OAAsBA,EAAMlC,aAEpDkH,EAAkBC,uBACtB,SAACzJ,GACCsJ,EACE3D,EAAiB,CACfpB,KAAM,gBACNvE,KAAMA,EAAK6D,UACXvB,UAAWA,OAIjB,CAACgH,EAAUhH,IAYb,OATAoH,qBAAU,WACRJ,EAASvF,OACR,CAACuF,IAEJI,qBAAU,WACRF,EAAgBH,KAEf,CAACA,EAAU/G,EAAWkH,IAGvB,cAAC,GAAD,UACE,qBAAKf,UAAU,WAAf,SACE,eAAC,KAAD,CAAMkB,MAAOhD,EAAe0C,GAA5B,UACE,cAAC,GAAD,CAAeA,SAAUA,IACzB,cAAC,GAAD,Y,QC5CGO,GAAgB,uCAAG,gCAAA9K,EAAA,sEAGpBQ,EAAkBV,YACtBH,EACAP,YALwB,SAQEwB,YAAQJ,GARV,cAQpBK,EARoB,OAUtBkK,EAAOC,QACXnK,EAAcoK,SAAQ,SAACC,GAAD,OAAOH,EAAKI,KAAKD,EAAEE,OAXf,kBAanBL,GAbmB,iCAenBC,SAfmB,mFAkBrBA,SAlBqB,0DAAH,qDAsBvBK,GAAmB,uCAAG,WAAOjB,GAAP,SAAApK,EAAA,+EAEjBH,EACLT,WACAgL,IAJsB,qCAOjBpJ,GAPiB,2CAAH,sDAWZsK,GAAW,uCAAG,WAAOlB,GAAP,uBAAApK,EAAA,+EAEAqL,GAAoBjB,GAFpB,YAEnBmB,EAFmB,wBAKrB,IADIC,EAAqB,GACzB,MAAkBC,OAAOC,KAAKH,GAA9B,eAAWI,EAAgC,KACzCH,EAAKG,GAAOJ,EAAWI,GANJ,yBAQdH,GARc,0FAYlB,IAZkB,0DAAH,sDAeXI,GAAW,uCAAG,WAAOxB,EAAeW,GAAtB,iBAAA/K,EAAA,sEAGf6L,EAAiB3L,YACrBP,EACAP,WACAgL,GAGE0B,EAAU,GACdf,EAAKhK,KAAI,SAACmK,GAER,OADAY,EAAO,6BAAQA,GAAR,kBAAkBZ,EAAEa,KAAOb,EAAEc,OAC7Bd,KAZY,SAefe,YAAOJ,EAAgBC,GAfR,iCAkBhB,GAlBgB,oEAqBlB,GArBkB,0DAAH,wD,oBC7ClBI,I,OAAa,SAAC,GAAyC,IAAvCnB,EAAsC,EAAtCA,KACpB,OACE,qBAAKpB,UAAU,wBAAf,SACGoB,EAAKhK,KAAI,SAACgL,GAAD,OACR,+BAAuBA,EAAKA,MAAjBA,EAAKA,aA8ETI,GAxEc,SAAC,GAMvB,IALLpB,EAKI,EALJA,KACAqB,EAII,EAJJA,gBAKMC,EAAatB,EAAKhK,KAAI,SAACmK,EAAGoB,GAG9B,GAAIpB,EAAEqB,QAAS,CACb,IAAMC,EAAUtB,EAAEqB,QAAQ3H,MAAMsG,EAAEa,MAElC,MAAO,CACLJ,IAAKT,EAAEa,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLI,SACE,sBAAK/C,UAAU,uBAAf,UACG6C,EAAQ,GACT,qCACCJ,EACC,sBAAMzC,UAAU,0BAAhB,SAA2CuB,EAAEa,OAE7C,sBAAMpC,UAAU,yBAAhB,SACGqB,MAAME,EAAEa,KAAK/I,QAAQ2J,KAAK,MAAMC,KAAK,MAG1C,qCACCJ,EAAQ,OAKf,MAAO,CACLb,IAAKT,EAAEa,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLI,SAAU,qBAAK/C,UAAU,uBAAf,SAAuCuB,EAAE2B,iBAmBzD,OACE,gCACE,qBAAIlD,UAAU,wBAAd,UACE,cAACmD,GAAA,EAAD,CAAcrD,MAAO,CAAEsD,SAAU,SADnC,sDAIA,cAAC,KAAD,CACEV,WAAYA,EACZW,QAtBU,CACd,CACEnC,MAAO,MACPoC,UAAW,QACXtB,IAAK,QACL5B,MAAO,MAET,CACEc,MAAO,WACPoC,UAAW,WACXtB,IAAK,QAaHuB,YAAY,EACZC,WAAY,CAAEC,SAAU,MAE1B,cAAC,GAAD,CAAYrC,KAAMA,QCLTsC,I,OAzEU,SAAC,GAMnB,IALLtC,EAKI,EALJA,KACAqB,EAII,EAJJA,gBASMC,EAAatB,EAAKhK,KAAI,SAACmK,EAAGoB,GAC9B,MAAO,CACLX,IAAKT,EAAEa,KACPU,MAAM,GAAD,OAAKH,EAAQ,EAAb,KACLO,WACE,sBACES,QAAS,kBAVCC,EAUcrC,EAAEsC,oBAThC,IAAIC,MAAMF,GAAOG,OADF,IAACH,GAWV5D,UAAU,iCAFZ,UAIE,iCAAOuB,EAAEyC,aAAT,OACA,qCACA,+BAAOrB,EAAQ,IAAM,EAAIpB,EAAE2B,WAAa3B,EAAE0C,iBAG9CC,OACE,sBAAKlE,UAAU,6BAAf,UACE,qBAAKA,UAAU,kCAAf,SACGyC,EAAkBlB,EAAEa,KAAO,KAE9B,qBAAKpC,UAAU,uCAAf,SACGyC,EAAkBlB,EAAE0C,YAAc,YA2B7C,OACE,sBAAKjE,UAAU,sBAAf,UACE,qBAAIA,UAAU,4BAAd,UACE,cAACmD,GAAA,EAAD,CAAcrD,MAAO,CAAEsD,SAAU,SADnC,6EAIA,cAAC,KAAD,CACEV,WAAYA,EACZW,QA5BU,CACd,CACEnC,MAAO,MACPoC,UAAW,QACXtB,IAAK,QACL5B,MAAO,MAET,CACEc,MAAO,aACPoC,UAAW,aACXtB,IAAK,OAEP,CACEd,MAAO,eACPoC,UAAW,SACXtB,IAAK,MACL5B,MAAO,QAaLoD,WAAY,CAAEC,SAAU,W,kBCtCnBU,GAAgB,SAAC,GAAmC,IAAjC1D,EAAgC,EAAhCA,MAC9B,EAAwBE,mBAAmB,CAAEyD,MAAO,GAAIC,MAAO,KAA/D,mBAAOxC,EAAP,KAAayC,EAAb,KACA,EAAsC3D,oBAAS,GAA/C,mBAAO8B,EAAP,KAAwB8B,EAAxB,KAEAtD,qBAAU,WACJR,GACFkB,GAAYlB,GAAO+D,MAAK,SAAC3C,GAEvB,IADA,IAAI4C,EAAWpD,QACf,MAAmBS,OAAOC,KAAKF,GAA/B,eAAsC,CAAjC,IAAMO,EAAI,KACPsC,EAAqBC,KAAKC,MAAM/C,EAAKO,IAC3CqC,EAASjD,KAAKkD,GAGhB,IAAMG,EAtCE,SAACC,GAKf,IAJA,IACIC,EADAC,EAAeF,EAAMzL,OAID,IAAjB2L,GAAoB,CAEzBD,EAAcrI,KAAKC,MAAMD,KAAKuI,SAAWD,GACzCA,IAHyB,MAMmB,CAC1CF,EAAMC,GACND,EAAME,IAFPF,EAAME,GANkB,KAMHF,EAAMC,GANH,KAY3B,OAAOD,EAqBSI,CAAQT,GACZU,EAAQzI,KAAK0I,MAAMX,EAASpL,OAAS,GAE3CiL,EAAQ,CAAEF,MAAOS,EAAEQ,MAAM,EAAGF,GAAQd,MAAOQ,EAAEQ,MAAMF,UAGtD,CAAC1E,IAMJ,OACE,sBAAKT,UAAU,mBAAf,UACE,wCAASS,EAAT,OACA,cAAC,GAAD,CAAWW,KAAI,YAAMS,EAAKuC,OAAQ3B,gBAAiBA,IACnD,uBACA,cAAC,GAAD,CAAerB,KAAI,YAAMS,EAAKwC,OAAQ5B,gBAAiBA,IACvD,eAAC,KAAD,CAAOzC,UAAU,mBAAjB,UACE,cAAC,KAAD,CAAQ2D,QAAS,WAVrBY,GAU8C9B,IAA1C,sCAGA,cAAC,KAAD,CAAQkB,QAAS,kBAAM2B,OAAOC,SAA9B,gECnDOC,I,OAZS,WACtB,IAAMC,EAASC,cAEf,OACE,cAAC,GAAD,UACE,qBAAK1F,UAAU,8BAAf,SACE,cAAC,GAAD,gBAAmByF,UCNdE,I,OAAoB,WAC/B,MAAwBhF,mBAAwB,IAAhD,mBAAOS,EAAP,KAAawE,EAAb,KAEA3E,qBAAU,WACRE,KAAmBqD,MAAK,SAACC,GACvBmB,EAAQnB,QAET,IAIH,OACE,cAAC,KAAD,UACGrD,EAAKhK,KAAI,SAACqJ,GAAD,OACR,cAAC,KAAKvB,KAAN,UACE,sBAAKc,UAAU,sCAAf,UACE,cAAC,IAAD,CAAMb,GAAE,yBAAoBsB,GAA5B,SAAsCA,IACtC,sBAAKT,UAAU,8BAAf,UACE,cAAC,KAAD,CAAQlE,KAAK,OAAb,SACE,cAAC,IAAD,CAAMqD,GAAE,2BAAsBsB,GAA9B,4BAEF,cAAC,KAAD,CAAQ3E,KAAK,OAAO6H,QAAS,aAA7B,iCAPUlD,U,UCQToF,I,OAnBa,WAC1B,OACE,cAAC,GAAD,UACE,sBAAK7F,UAAU,mCAAf,UACE,8BACE,cAAC,KAAD,UACE,eAAC,IAAD,CAAMb,GAAG,mBAAT,8CACU,cAAC2G,GAAA,EAAD,WAId,qBAAK9F,UAAU,6BAAf,SACE,cAAC,GAAD,aCjBF+F,I,OAAqBtH,IAArBsH,WAAWvF,GAAU/B,IAAV+B,MAsBJwF,GApBK,WAClB,OACE,cAAC,GAAD,UACE,qBAAKhG,UAAU,yBAAf,SACE,eAAC,IAAD,WACE,cAAC,GAAD,sCACA,eAAC,GAAD,WACE,cAACQ,GAAD,CAAOC,MAAO,EAAd,mDADF,mFAIA,eAAC,GAAD,WACE,cAACD,GAAD,CAAOC,MAAO,EAAd,0DADF,0F,uCCRGwF,GAAwB,CACnC7D,KAAM,GACN4B,aAAc,OACdd,WAAY,GACZe,YAAa,GACbrB,QAAS,GACTiB,eAAgB,IA2DZqC,GAAwB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QACrC,IACE,IADE,EACIC,EAAQD,EAAQ,GADpB,cAGkBC,EAAMC,QAHxB,IAGF,2BAAkC,CAAC,IAAxBC,EAAuB,QAChC,GAAIA,EAAMC,SAAU,qBAGCD,EAAMC,UAHP,IAGlB,2BAAmC,CAAC,IAAzBC,EAAwB,QACjC,GAAIA,EAAKN,KAAKO,SAASP,GACrB,MAAO,CACLQ,UAAWN,EAAMxC,eAAe,GAAK+C,UACrChE,QAAS6D,EAAKN,OAPF,8BAYlB,MAAO,CACLQ,UAAWN,EAAMxC,eAAe,GAAK+C,UACrChE,QAAS2D,EAAMC,SAAS,GAAKL,MAG/B,MAAO,CACLQ,UAAWN,EAAMxC,eAAe,GAAK+C,YAtBzC,+BA0BF,MAAOrF,GACPxH,QAAQL,IAAI6H,KAIHsF,GAAe,uCAAG,WAAOV,GAAP,yBAAA9P,EAAA,4DAEV,QACXyQ,EAAUX,EACVY,EAJqB,mEAEV,QAFU,YAI4DD,EAAQE,eAEzFC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ3R,WACR4R,QAAS5R,qCAIP6R,EAdqB,kDAckCP,GAdlC,SAgBNQ,MAAMD,EAAWL,GAhBX,cAgBrBO,EAhBqB,iBAiBRA,EAAOC,OAjBC,aAiBrBA,EAjBqB,QAkBlBC,QAlBkB,0CAmBlBD,EAAKC,SAnBa,8CAyBtBrQ,GAzBsB,4CAAH,sDAwDfsQ,GAAuB,uCAAG,WAAOxB,GAAP,uBAAA9P,EAAA,sEACfwQ,GAAgBV,GADD,YAC/BuB,EAD+B,yBAG7BE,EAASF,EAAQ,GAAMG,eAHM,cAInBD,GAJmB,gEAIxBrG,EAJwB,0BAK1B2E,GAAsB3E,IALI,wKAS9B,CACLoF,UAAW,GACX/D,QAAS,KAX0B,gEAAH,sD,wCCvGrBkF,I,OA/Ce,SAAC,GAAkC,IAAhCnF,EAA+B,EAA/BA,MAAOoF,EAAwB,EAAxBA,WAC9BC,EAAWC,KAAXD,OAEFE,EACE,eADFA,EAEU,eAFVA,EAGQ,sBAHRA,EAIS,sBAJTA,EAKK,eAIX,OACE,eAAC,KAAKhJ,KAAN,CAAWiJ,MAAK,YAAOxF,EAAQ,GAA/B,UACE,eAAC,KAAD,CAAOzC,MAAM,QAAb,UACE,cAAC,KAAKhB,KAAN,CAAWpF,KAAM,CAAC6I,EAAO,QAASyF,MAAO,CAAC,CAAEC,UAAU,IAAtD,SACE,cAAC,KAAD,CAAOC,YAAaJ,EAAgBK,YAAU,MAEhD,cAAC,KAAKrJ,KAAN,CAAWpF,KAAM,CAAC6I,EAAO,gBAAzB,SACE,eAAC,KAAD,CAAQ2F,YAAaJ,EAArB,UACE,cAACF,EAAD,CAAQQ,MAAM,OAAd,kBACA,cAACR,EAAD,CAAQQ,MAAM,OAAd,kBACA,cAACR,EAAD,CAAQQ,MAAM,YAAd,uBACA,cAACR,EAAD,CAAQQ,MAAM,SAAd,oBACA,cAACR,EAAD,CAAQQ,MAAM,UAAd,qBACA,cAACR,EAAD,CAAQQ,MAAM,cAAd,yBACA,cAACR,EAAD,CAAQQ,MAAM,cAAd,yBACA,cAACR,EAAD,CAAQQ,MAAM,eAAd,+BAGJ,eAAC,KAAD,CAAQ7E,QAAS,kBAAMoE,EAAWpF,IAAlC,UACE,cAAC8F,GAAA,EAAD,IADF,sBAIF,cAAC,KAAKvJ,KAAN,CAAWpF,KAAM,CAAC6I,EAAO,cAAzB,SACE,cAAC,KAAD,CAAU2F,YAAaJ,EAAsBK,YAAU,MAEzD,cAAC,KAAKrJ,KAAN,CAAWpF,KAAM,CAAC6I,EAAO,eAAzB,SACE,cAAC,KAAD,CAAO2F,YAAaJ,EAAuBK,YAAU,MAEvD,cAAC,KAAKrJ,KAAN,CAAWpF,KAAM,CAAC6I,EAAO,WAAzB,SACE,cAAC,KAAD,CAAU2F,YAAaJ,EAAmBK,YAAU,WC7C/CG,GAAqB,SAAC,GAAmC,IAAjCjI,EAAgC,EAAhCA,MACnC,EAAgCE,mBAA0B,CAACsF,KAA3D,mBAAO0C,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,iBAAqB,MAErC7H,qBAAU,WACJR,GACFkB,GAAYlB,GAAO+D,MAAK,SAAC3C,GAEvB,IADA,IAAIT,EAAOC,QACX,MAAmBS,OAAOC,KAAKF,GAA/B,eAAsC,CAAjC,IAAMO,EAAI,KACPsC,EAAqBC,KAAKC,MAAM/C,EAAKO,IAC3ChB,EAAKI,KAAKkD,GAGZkE,EAAYxH,QAGf,CAACX,IAEJQ,qBAAU,WAGJ4H,EAAQE,SACVJ,EAASvR,KAAI,SAACgL,EAAMO,GAAW,IAAD,EAM5B,OALA,UAAAkG,EAAQE,eAAR,SAAiBC,eAAjB,eACGrG,EADH,gBAEOP,KAGAA,OAGV,CAACuG,IAEJ,IAAMM,EAAkB,WACtB,GAAIJ,EAAQE,QAAS,CACnB,IAAMG,EAASL,EAAQE,QAAQI,gBAAe,GAC9CC,EAAWF,KAITE,EAAa,SAACF,GAAiB,IAAD,WACvBlH,GACT4G,GAAY,SAACxH,GACX,IAAMuB,EAAQ0G,SAASrH,GAKvB,OAJAZ,EAAKuB,GAAL,6BACKvB,EAAKuB,IACLuG,EAAOlH,IAEL,YAAIZ,OAPf,IAAK,IAAMY,KAAOkH,EAAS,EAAhBlH,IA+BPsH,EAAQ,uCAAG,WAAOJ,GAAP,qCAAA7S,EAAA,sDACfkT,KAAQC,QAAQ,CACdC,QAAS,8DACTzH,IAAK,YACL0H,SAAU,IAGNC,EAAUT,EAAM,MAElBU,GAAY,EACZC,EAAWxI,QAVA,OAAAhL,EAAA,KAYG6S,GAZH,iDAaD,WADHlH,EAZI,sEAkBXkH,EAAOlH,GADDI,EAjBK,EAiBLA,KAAM4B,EAjBD,EAiBCA,aAAcd,EAjBf,EAiBeA,WAAYe,EAjB3B,EAiB2BA,YAAarB,EAjBxC,EAiBwCA,QAEhDR,EAnBQ,wEAuBQuF,GAAwBvF,GAvBhC,aAuBPoF,EAvBO,yBAyBLsC,EAAqB,CACzB1H,KAAMA,EACN4B,aAAcA,EACdd,WAAYA,EACZe,YAAaA,EACbrB,QAASA,GAAoB4E,EAAO5E,QACpCiB,eAAgB2D,EAAOb,WAGzBkD,EAASrI,KAAK,CACZY,KAAMA,EACNC,KAAMsC,KAAKoF,UAAUD,KApCZ,+BAwCXP,KAAQS,MAAM,CACZP,QAAQ,GAAD,OAAKrH,EAAL,oEACPJ,IAAK,YACL0H,SAAU,IAGZE,GAAY,EA9CD,wDAmDXA,EAnDW,kCAoDQ3H,GAAY0H,EAASE,GApD7B,eAsDXN,KAAQU,QAAQ,CACdR,QAAS,wCACTzH,IAAK,YACL0H,SAAU,IAGZH,KAAQS,MAAM,CAAEP,QAAS,yEAAmBC,SAAU,IA5D3C,4CAAH,sDAiERQ,EAAiB,SAACvH,GACtBsG,IAEAL,GAAY,SAACxH,GAEX,OADAA,EAAK+I,OAAOxH,EAAO,GACZ,YAAIvB,OAIf,OACE,qBAAKtB,MAAO,CAAEsK,QAAS,OAAQC,WAAY,WAAYC,QAAS,QAAhE,SACE,eAAC,KAAD,CACEC,SAAUjB,EAEVkB,OAAO,WACPC,IAAK5B,EACL/I,MAAO,CAAE4K,SAAU,KALrB,UAOE,cAAC,KAAKxL,KAAN,CACEpF,KAAK,QACLsO,MAAO,CAAC,CAAEC,UAAU,IACpBF,MAAM,iCACNwC,aAAclK,EAJhB,SAME,cAAC,KAAD,CAAO6H,YAAY,mFAEpBK,EAASvR,KAAI,SAACmK,EAAGoB,GAAJ,OACZ,cAAC,GAAD,CAEEA,MAAOA,EACPoF,WAAYmC,GAFPvH,MAKT,eAAC,KAAD,CAAOiI,KAAM,GAAb,UACE,eAAC,KAAD,CAAQjH,QAtHK,WACnBsF,IAEAL,GAAY,SAACxH,GAAD,4BAAcA,GAAd,CAAoB6E,SAmH1B,uCACQ,cAACH,GAAA,EAAD,OAER,cAAC,KAAD,CAAQhK,KAAK,UAAU+O,SAAS,SAAhC,mCCnKKC,I,OAZe,WAC5B,IAAMrF,EAASC,cAEf,OACE,cAAC,GAAD,UACE,qBAAK1F,UAAU,8BAAf,SACE,cAAC,GAAD,gBAAwByF,U,oBCL1BsF,I,OAAY,IAAIjH,MACpB,iEAOWkH,GAAW,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KACzB,EAA8BtK,oBAAS,GAAvC,mBAAOuK,EAAP,KAAgBC,EAAhB,KAgBA,GAdAF,EAAKG,MAAK,SAAC/U,EAAGgV,GAEZ,IAAM9M,EAASD,EAAmBjI,EAAEsE,WAC9B2Q,EAAShN,EAAmB+M,EAAE1Q,WAEpC,OAAI4D,EAAS+M,EACJ,EACE/M,EAAS+M,GACV,EAED,KAIPL,EAAK5R,OAAS,EAChB,IACE,IAAMkS,EAAON,EAAK,GAAGpR,UAEfiG,EAAQ,CACZ0L,gBAA0B,UAATD,EAAmB,QAAU,cAG1CxT,EAAM,IAAIC,KAEZyT,EAAiB,EACrBR,EAAK7T,KAAI,SAACsC,EAAKiJ,GAMb,OALgBrE,EAAmB5E,EAAIiB,WACzB5C,IACZ0T,EAAiB9I,GAGZjJ,KAGT,IAAI8O,EAAQ,EAEZ,GAAIiD,EAAiB,EAAIR,EAAK5R,OAAQ,CACpC,IAAMgD,EAAOiC,EAAmB2M,EAAKQ,GAAgB9Q,WAG/C+O,EAFKpL,EAAmB2M,EAAKQ,EAAiB,GAAG9Q,WAEnC+Q,UAAYrP,EAAKqP,WAGrClD,IAFmB,IAAIxQ,MAAO0T,UAAYrP,EAAKqP,WAEzBhC,EAAY,KAEtB,GACLwB,IACHH,GAAUhH,OAEVoH,GAAW,IAEJD,GACTC,GAAW,GAIf,IAAMQ,EACJ,qCACE,qBAAK3L,UAAU,mBAAf,SAAmCiL,EAAKQ,GAAgB3Q,UACxD,qBAAKkF,UAAU,eAAf,SACE,cAAC,KAAD,CAAQwI,MAAOA,SAKrB,OACE,sBAAKxI,UAAU,kBAAkBF,MAAOA,EAAxC,UACE,4BACE,cAAC,EAAD,CAAShG,KAAMyR,MAEjB,4BAAII,IACJ,cAAC,KAAD,UACGV,EAAK7T,KAAI,SAACsC,EAAKiJ,GACd,IAAMiJ,EAAUtN,EAAmB5E,EAAIiB,WAEnCsD,EAAQ,OAOZ,OANIwN,IAAmB9I,GAASiJ,EAAU7T,EACxCkG,EAAQ,QACC2N,EAAU7T,IACnBkG,EAAQ,QAIR,eAAC,KAAKiB,KAAN,CAAuBjB,MAAOA,EAA9B,UACE,+BAAOvE,EAAIiB,UAAUkR,uBAA6B,IAClD,cAAC,EAAD,CAAS/R,KAAMJ,EAAIG,YAFrB,IAEmC,+BAAOH,EAAIoB,YAF9B6H,WAS1B,MAAOpB,GACPxH,QAAQL,IAAI6H,GAIhB,OAAO,yBC7GIuK,I,OAAe,WAC1B,MAAoCnL,mBAA8B,IAAlE,mBAAOoL,EAAP,KAAmBC,EAAnB,KACA,EAAwBrL,oBAAS,IAAI3I,MAAO6T,sBAA5C,mBAAOI,EAAP,KAAaC,EAAb,KAEAjL,qBAAU,WACRjH,IAAgBwK,MAAK,SAAC9K,GACpBK,QAAQL,IAAIA,GAEZsS,EAActS,MAGhB4L,OAAO6G,aAAY,kBAAMD,GAAQ,IAAIlU,MAAO6T,wBAAuB,OAClE,IAEH,IAAMO,EAAe,SAACtS,GACpB,OAAOiS,EAAW5S,QAAO,SAACO,GACxB,IAAQE,EAAyBF,EAAzBE,UAAWC,EAAcH,EAAdG,UACnB,MAAkB,WAAdD,GAA0BC,IAAcC,MAQ1C+D,EAAQuO,EAAa,SACrBtO,EAAQsO,EAAa,SAE3B,OACE,cAAC,GAAD,UACE,sBAAKpM,UAAU,qBAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCiM,IACjC,sBAAKjM,UAAU,oBAAf,UACE,cAAC,GAAD,CAAUiL,KAAMpN,IAChB,cAAC,GAAD,CAAUoN,KAAMnN,c,UCvCbuO,GAAW,SAACrO,GAKvB,OACE,qBAAKgC,UAAU,0BAAf,SACE,cAAC,KAAD,CACEsM,YAAY,EACZC,SAAU,SAAChV,IARK,SAACA,GACrByG,EAAMwO,WAAWjV,GAQXkV,CAAclV,EAAKmV,gB,UCRhBC,GAAY,SAAC,GAMN,EALlBlS,YAKmB,IAJnBb,EAIkB,EAJlBA,UAEAC,GAEkB,EAHlBc,UAGkB,EAFlBd,WACAiB,EACkB,EADlBA,QAEIyO,EAAU,GACd,OAAQ3P,GACN,IAAK,OACH2P,EAAU,yCACV,MACF,IAAK,MACHA,EAAO,UAAMzO,EAAN,iBACP,MACF,QACEyO,EAAUzO,EAId,OACE,iCACE,cAAC,EAAD,CAAShB,KAAMD,IACd0P,MCpBM1O,GAAW,WACtB,MAAgC8F,mBAA8B,IAA9D,mBAAOiM,EAAP,KAAiBC,EAAjB,KAEMhT,EAAY6E,aAAY,SAAC3C,GAAD,OAAsBA,EAAMlC,aAQ1D,OANAoH,qBAAU,WACR9G,IAAcqK,MAAK,SAAC9K,GAClBmT,EAAYnT,QAEb,CAACG,IAGF,8BACE,cAAC,KAAD,CAAUiT,iBAAkB,CAAC,GAA7B,SACE,cAAC,KAASC,MAAV,CAAgBC,OAAO,YAAvB,SACE,cAAC,KAAD,UACGJ,EAASxV,KAAI,SAACsC,EAAKuT,GAClB,OACE,eAAC,KAAS/N,KAAV,WACGxF,EAAIe,YAAYyS,iBADnB,IACqC,cAAC,GAAD,gBAAexT,MADhCuT,WAJW,U,kDCAlCE,GAAW,SAAC,GAA2B,EAAzB5V,KAA0B,IAC7CsJ,EAAWC,cA6BXsM,EAAW,SAACjH,GAChBoD,KAAQU,QAAQ9D,IAkBlB,OACE,eAAC,KAAD,6BAhBa,CACbkH,SAAU,CAAEC,KAAM,KAelB,IAAkB/C,SA/CH,SAACrB,GAChB,IAAMqE,EAAuB,CAC3B9S,YAAa,IAAIzC,KACjB4B,UAAWsP,EAAOsE,MAClB7S,UAAWuO,EAAOvO,UAAU+R,SAC5B7S,UAAWqP,EAAOuE,IAClB3S,QAASoO,EAAOxP,IAChBqB,OAAQmO,EAAOnO,QAGjBhB,QAAQL,IAAI6T,GAEZlT,EAASkT,GAAQ/I,MAAK,SAACkJ,GACjBA,GACFN,EAAS,GAAD,OACHlP,EAAewP,EAAI/S,WADhB,aAEJ+S,EAAI5S,QAFA,oEAMR+F,EAASvF,MAETvB,QAAQL,IAAI,wBAyBhB,UACE,cAAC,KAAKwF,KAAN,CAAWpF,KAAK,QAAQqO,MAAM,sBAAOC,MAAO,CAAC,CAAEC,UAAU,IAAzD,SACE,eAAC,KAAD,CAAQC,YAAY,sBAApB,UACE,cAAC,KAAON,OAAR,CAAeQ,MAAM,OAArB,gEACA,cAAC,KAAOR,OAAR,CAAeQ,MAAM,MAArB,0BACA,cAAC,KAAOR,OAAR,CAAeQ,MAAM,SAArB,2CAGJ,cAAC,KAAKtJ,KAAN,CAAWpF,KAAK,MAAMqO,MAAM,gBAAMC,MAAO,CAAC,CAAEC,UAAU,IAAtD,SACE,eAAC,KAAD,CAAQC,YAAY,gBAApB,UACE,cAAC,KAAON,OAAR,CAAeQ,MAAM,QAArB,SACE,cAAC,EAAD,CAAS1O,KAAK,YAEhB,cAAC,KAAOkO,OAAR,CAAeQ,MAAM,QAArB,SACE,cAAC,EAAD,CAAS1O,KAAK,iBAIpB,cAAC,KAAKoF,KAAN,CAAWpF,KAAK,YAAYqO,MAAM,eAAlC,SACE,cAAC,KAAD,CACEwF,mBAAoBC,KAAO,WAAY,WACvCC,YAAU,EACVC,OAAO,aAGX,cAAC,KAAK5O,KAAN,CACE6O,SAAO,EACPC,aAAc,SAACC,EAAYC,GAAb,OACZD,EAAWT,QAAUU,EAAcV,OAHvC,SAMG,kBAC4B,UAA3BW,EADD,EAAGA,eACY,SACZ,cAAC,KAAKjP,KAAN,CAAWpF,KAAK,MAAMqO,MAAM,eAAKC,MAAO,CAAC,CAAEC,UAAU,IAArD,SACE,cAAC,KAAD,CAAOC,YAAY,+BAEnB,QAGR,cAAC,KAAKpJ,KAAN,CAAWpF,KAAK,SAASqO,MAAM,eAA/B,SACE,cAAC,KAASiG,MAAV,CAAgBnH,QAnDJ,CAChB,CAAEkB,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,OACrB,CAAEL,MAAO,SAAKK,MAAO,YA8CnB,cAAC,KAAKtJ,KAAN,UACE,cAAC,KAAD,CAAQpD,KAAK,UAAU+O,SAAS,SAAhC,iCCxDOwD,GA5CG,WAChB,MAA4B1N,mBAAe,IAAI3I,MAA/C,mBAAO4I,EAAP,KAAiB/H,EAAjB,KAEMgI,EAAWC,cAEXjH,EAAY6E,aAAY,SAAC3C,GAAD,OAAsBA,EAAMlC,aAEpDkH,EAAkBC,uBACtB,SAACzJ,GACCsJ,EACE3D,EAAiB,CACfpB,KAAM,gBACNvE,KAAMA,EAAK6D,UACXvB,UAAWA,OAIjB,CAACgH,EAAUhH,IAYb,OATAoH,qBAAU,WACRJ,EAASvF,OACR,CAACuF,IAEJI,qBAAU,WACRF,EAAgBH,KAEf,CAACA,EAAU/G,EAAWkH,IAGvB,cAAC,GAAD,UACE,sBAAKf,UAAU,WAAf,UACE,eAAC,KAAD,CAAOsO,UAAU,WAAjB,UACE,cAAC,GAAD,CAAU9B,WAAY3T,IAEtB,cAAC,GAAD,CAAUtB,KAAMqJ,OAElB,cAAC,KAAD,IACA,cAAC,GAAD,UCnCR2N,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzY,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAe0Y,SAAS,aAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO/L,OAAK,EAACgM,QAAS,cAAC,GAAD,MACtB,cAAC,IAAD,CAAOC,KAAK,QAAQD,QAAS,cAAC,GAAD,MAC7B,cAAC,IAAD,CAAOC,KAAK,YAAYD,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOC,KAAK,oBAAoBD,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOC,KAAK,0BAA0BD,QAAS,cAAC,GAAD,MAC/C,cAAC,IAAD,CAAOC,KAAK,wBAAwBD,QAAS,cAAC,GAAD,MAC7C,cAAC,IAAD,CAAOC,KAAK,YAAYD,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOC,KAAK,aAAaD,QAAS,cAAC,GAAD,eAK1CE,SAASC,eAAe,W","file":"static/js/main.46aa8d8a.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nimport { getFirestore, doc, getDoc } from \"firebase/firestore/lite\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const store = getFirestore(firebaseApp);\r\n\r\nexport const getCollectionSnapshot = async (\r\n  collection: string,\r\n  documentName: string\r\n) => {\r\n  const docRef = doc(store, collection, documentName);\r\n  const docSnapshot = await getDoc(docRef);\r\n  if (docSnapshot.exists()) {\r\n    return docSnapshot.data();\r\n  }\r\n};\r\n\r\n// export const getCollectionSnapshot = async (collectionName: string) => {\r\n//   const storeCollection = collection(store, collectionName);\r\n//   const storeSnapshot = await getDocs(storeCollection);\r\n//   return storeSnapshot.docs.map((doc) => doc.data());\r\n// };\r\n\r\nexport default store;\r\n","import store from \"../firebase\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  addDoc,\r\n  orderBy,\r\n  Timestamp,\r\n} from \"firebase/firestore/lite\";\r\n\r\nexport type EventLogType = {\r\n  loggingTime: Date,\r\n  eventType: string,\r\n  eventTime: Date,\r\n  eventUser: string,\r\n  logText: string,\r\n  repeat: Array<string>,\r\n};\r\n\r\ntype EventLogCollection = {\r\n  LoggingTime: Timestamp,\r\n  EventType: string,\r\n  EventTime: Timestamp,\r\n  EventLog: string,\r\n  EventUser: string,\r\n  Repeat: Array<string>,\r\n}\r\n\r\nexport type BathEventType = {\r\n  date: Date,\r\n  name: string,\r\n}\r\n\r\nconst getEventLogSnapshot = async () : Promise<Array<EventLogCollection> | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n    const storeSnapshot = await getDocs(storeQuery);\r\n    return storeSnapshot.docs.map((doc) => doc.data()  as EventLogCollection);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst getEventByDate = async (date: Date) : Promise<Array<EventLogCollection> | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const storeCollection = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n\r\n    // 반복 스케줄 쿼리\r\n    const week = ['sun', 'mon', 'tue', 'wed', 'thr', 'fri', 'sat'];\r\n    const thisweek = week[date.getDay()];\r\n\r\n    const repeatQuery = query(storeCollection, where(\"Repeat\", \"array-contains\", thisweek));\r\n    const snapshotByRepeat = await getDocs(repeatQuery);\r\n\r\n    const logCollection2 = snapshotByRepeat.docs.map((doc) => {\r\n      let eventLog = doc.data() as EventLogCollection;\r\n\r\n      // repeat 이기 때문에 오늘 날자로 치환\r\n      const now = new Date();\r\n      const eventDate = new Date(eventLog.EventTime.seconds * 1000);\r\n      now.setHours(eventDate.getHours());\r\n      now.setMinutes(eventDate.getMinutes());\r\n      now.setSeconds(eventDate.getSeconds());\r\n\r\n      eventLog.EventTime = Timestamp.fromDate(now);\r\n\r\n      return eventLog;\r\n    });\r\n\r\n    // 지정일 스케줄\r\n    const timefrom = Timestamp.fromDate(date);\r\n    date.setDate(date.getDate() + 1);\r\n    const timeto =  Timestamp.fromDate(date);\r\n    const pickDateQuery = query(storeCollection, where(\"EventTime\", \">=\", timefrom), where(\"EventTime\", \"<=\", timeto));\r\n    const snapshotByDate = await getDocs(pickDateQuery);\r\n\r\n    // 쿼리에서 빼면 더 좋다.\r\n    // 쿼리 조건을 작성할 수 없어 일단 코드에서 처리한다.\r\n    const logFilterCollection = snapshotByDate.docs.filter((doc) => {\r\n      const eventLog = doc.data() as EventLogCollection;\r\n\r\n      if (!eventLog.Repeat || eventLog.Repeat.length === 0) {\r\n        return true;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    const logCollection1 = logFilterCollection.map(doc=> doc.data() as EventLogCollection);\r\n\r\n    return [...logCollection1, ...logCollection2];\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getRecentBathEvent = async () : Promise<BathEventType> => {\r\n  try {\r\n    const eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const bathLogOnly = eventDateLog.filter((log) => {\r\n        const { eventType } = parseLegacyEventLog(log);\r\n        return (eventType === \"bath\") ? true : false;\r\n      });\r\n\r\n      for (const log of bathLogOnly) {\r\n        const { eventUser } = parseLegacyEventLog(log);\r\n        return {\r\n          date: new Date(log.EventTime.seconds * 1000),\r\n          name: eventUser,\r\n        }\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return {\r\n    date: new Date(\"2021-11-29\"),\r\n    name: \"james\",\r\n  };\r\n};\r\n\r\nexport const getTodayEvent = async () : Promise<Array<EventLogType>> => {\r\n  return getEventAt(new Date());\r\n};\r\n\r\nexport const getEventAt = async (date: Date) : Promise<Array<EventLogType>> => {\r\n  try {\r\n    let eventDateLog = await getEventByDate(new Date(date.toDateString()));\r\n    if (eventDateLog) {\r\n      return eventDateLog.map(log => {\r\n        return parseLegacyEventLog(log);\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n  try {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n      const convertedDataform = eventDateLog.map((log) => {\r\n        return parseLegacyEventLog(log);\r\n      });\r\n\r\n      return convertedDataform;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addEvent = async (eventLog : EventLogType) : Promise<EventLogType | undefined> => {\r\n  if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n    const collectionRef = collection(\r\n      store,\r\n      process.env.REACT_APP_COLLECTION_EVENT_LOG\r\n    );\r\n    await addDoc(collectionRef, {\r\n      LoggingTime: Timestamp.fromDate(eventLog.loggingTime),\r\n      EventType: eventLog.eventType,\r\n      EventTime: Timestamp.fromDate(eventLog.eventTime),\r\n      EventUser: eventLog.eventUser,\r\n      EventLog: eventLog.logText,\r\n      Repeat: eventLog.repeat,\r\n    });\r\n  }\r\n\r\n  return eventLog;\r\n};\r\n\r\nexport type EventType = \"bath\" | \"custom\" | \"ban\" | \"repeat\";\r\n\r\nexport const splitLogToContents = (log: string) : EventLogType => {\r\n  const token = log.split(\"|\");\r\n\r\n  if (token.length < 5) {\r\n    return {\r\n      loggingTime: new Date(token[3]), \r\n      eventTime: new Date(token[3]),\r\n      eventUser: token[0] as \"james\" | \"henry\",\r\n      eventType: token[1] as EventType,\r\n      logText: token[2],\r\n      repeat: [],\r\n    };\r\n  }\r\n  else {\r\n    return {\r\n      loggingTime: new Date(token[3]), \r\n      eventTime: new Date(token[3]),\r\n      eventUser: token[0] as \"james\" | \"henry\",\r\n      eventType: token[1] as EventType,\r\n      logText: token[2],\r\n      repeat: token[4].split(''),\r\n    };\r\n  }\r\n}\r\n\r\nexport const parseLegacyEventLog = (log: EventLogCollection) => {\r\n  if (!log.EventUser || log.EventUser.length === 0) {\r\n    return splitLogToContents(log.EventLog);\r\n  }\r\n  else {\r\n    return {\r\n      loggingTime: new Date(log.LoggingTime.seconds * 1000),\r\n      eventType: log.EventType,\r\n      eventTime: new Date(log.EventTime.seconds * 1000),\r\n      eventUser: log.EventUser,\r\n      logText: log.EventLog,\r\n      repeat: log.Repeat,\r\n    };\r\n  }\r\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getRecentBathEvent } from \"logic/api/eventLog\";\r\nimport { EventUser } from \"logic/type\";\r\n\r\n// eventUser 는 일단 fetch 를 사용하므로 슬라이스를 사용하는 것에 적당하다.\r\n\r\nconst initialEventUserState: EventUser = {\r\n  date: new Date(\"1917-1-1\").getTime(),\r\n  name: \"james\",\r\n};\r\n\r\nconst fetchEventUser = async (): Promise<EventUser> => {\r\n  const { date, name } = await getRecentBathEvent();\r\n  return { date: date.getTime(), name: name as \"james\" | \"henry\"};\r\n};\r\n\r\nexport const eventUserThuck = createAsyncThunk(\"request\", async () => {\r\n  return await fetchEventUser();\r\n});\r\n\r\nconst eventUserSlice = createSlice({\r\n  name: \"eventUser\",\r\n  initialState: initialEventUserState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [eventUserThuck.pending.type]: (state) => {},\r\n    [eventUserThuck.fulfilled.type]: (\r\n      state,\r\n      action: PayloadAction<EventUser>\r\n    ) => {\r\n      const payload = action.payload;\r\n      state.date = payload.date;\r\n      state.name = payload.name;\r\n    },\r\n    [eventUserThuck.rejected.type]: (state) => {\r\n      console.log(\"eventUserThuck.rejected.type\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default eventUserSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BathUser, EventUser } from \"logic/type\";\r\n\r\n// 막상 BathUserActionType 타입으로 분기하지는 않는다.\r\n// 리듀서를 모두 방문하기 때문에 결국 type 키값으로 판단하게 된다.\r\nexport interface BathUserActionType {\r\n  type: \"request/whois\";\r\n  date: number;\r\n  eventUser: EventUser;\r\n}\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const fromDay = new Date(from.toLocaleDateString());\r\n  const currentDay = new Date(date.toLocaleDateString());\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  const diff = (currentDay.getTime() - fromDay.getTime()) / one_day;\r\n  const sign = Math.sign(diff);\r\n  return Math.floor(Math.abs(diff)) * sign;\r\n};\r\n\r\nconst getBathUser = (days: number, name: string): string => {\r\n  if (days % 2 === 0) {\r\n    if (name === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (name === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst initialBathUserState: BathUser = {\r\n  name: \"henry\",\r\n  dayPassed: 0\r\n}\r\n\r\nconst bathUserReducer = (state: BathUser = initialBathUserState, action: BathUserActionType) : BathUser => {\r\n  if (action.type === \"request/whois\") {\r\n    const dayPassed = countingDays(\r\n      new Date(action.date),\r\n      new Date(action.eventUser.date)\r\n    );\r\n\r\n    const userName = getBathUser(dayPassed, action.eventUser.name);\r\n\r\n    //console.log(dayPassed, userName);\r\n\r\n    return {\r\n      name: userName,\r\n      dayPassed\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst bathUserSlice = createSlice({\r\n  name: \"bathUser\",\r\n  initialState: initialBathUserState,\r\n  reducers: {\r\n    getTodayBathUser: (\r\n      state: BathUser,\r\n      action: PayloadAction<BathUserActionType>\r\n    ) => {\r\n      const newState = bathUserReducer(state, action.payload);\r\n\r\n      // 오브젝트 복사 부분이 문제가 되는 것 같다.\r\n      state.name = newState.name;\r\n      state.dayPassed = newState.dayPassed;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nexport const { getTodayBathUser } = bathUserSlice.actions;\r\n\r\nexport default bathUserSlice.reducer;\r\n","import { EventUser, BathUser } from \"./type\";\r\nimport eventUserReducer from \"./reducer/eventUser\";\r\nimport bathUserReducer from \"./reducer/bathUser\";\r\nimport { combineReducers, configureStore, Reducer } from \"@reduxjs/toolkit\";\r\n\r\nexport type RootState = {\r\n  eventUser: EventUser;\r\n  bathUser: BathUser;\r\n};\r\n\r\n// 런타임 오류는 섞어쓰는 것 때문인것 같다.\r\n\r\nconst rootReducers: Reducer<RootState> = combineReducers({\r\n  eventUser: eventUserReducer,\r\n  bathUser: bathUserReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducers,\r\n  //devTools: true,\r\n});\r\n\r\nexport default store;\r\n","export type BathUser = {\r\n  name: string;\r\n  dayPassed: number;\r\n};\r\n\r\nexport type EventUser = {\r\n  date: number;\r\n  name: \"james\" | \"henry\";\r\n};\r\n\r\nexport type EventLog = {\r\n  date: number;\r\n  log: string;\r\n};\r\n\r\ntype UserNameType = {\r\n  [index: string]: string;\r\n};\r\n\r\nexport const UserName: UserNameType = {\r\n  james: \"준우\",\r\n  henry: \"건우\",\r\n};\r\n\r\nexport type WordTestType = {\r\n  [index: string]: string;\r\n};\r\n","import { Tag } from \"antd\";\r\nimport { UserName } from \"logic/type\";\r\n\r\nexport const NameTag = (props: { name: string }) => {\r\n  return (\r\n    <Tag color={props.name === \"james\" ? \"processing\" : \"success\"}>\r\n      {UserName[props.name]}\r\n    </Tag>\r\n  );\r\n};\r\n","export const toKrDateString = (date: Date) : string => {\r\n    return date.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n      });    \r\n}\r\n\r\nexport const normalizeTimeToday = (date : Date) => {\r\n  const l_date = new Date();\r\n  l_date.setHours(date.getHours());\r\n  l_date.setMinutes(date.getMinutes());\r\n\r\n  return l_date;\r\n}","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const EventUser = () => {\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>\r\n        마지막으로 <NameTag name={eventUser.name} />가{\" \"}\r\n        {toKrDateString(new Date(eventUser.date))} 에 사용했습니다.\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  CheckSquareOutlined,\r\n  CalendarOutlined,\r\n  ClockCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nexport const HomeNavigation = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\r\n      <Menu.Item key=\"/bath\">\r\n        <Link to=\"/bath\">\r\n          <CalendarOutlined /> 화장실\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/wordtest\">\r\n        <Link to=\"/wordtest\">\r\n          <CheckSquareOutlined /> 단어시험\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/timeline\">\r\n        <Link to=\"/timeline\">\r\n          <ClockCircleOutlined /> 스케줄\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"/scheduler\">\r\n        <Link to=\"/scheduler\">\r\n          <ClockCircleOutlined /> 스케줄 등록\r\n        </Link>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Layout as L, Menu, Space } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserView, MobileView } from \"react-device-detect\";\r\n\r\nimport \"./style.css\";\r\nimport { HomeNavigation } from \"component/HomeNavigation\";\r\n\r\nconst { Header, Sider, Content, Footer } = L;\r\n\r\ntype Props = {};\r\n\r\nexport const Layout: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <L style={{ minHeight: \"100vh\" }}>\r\n      <Header className=\"layout-print-display-none\">\r\n        <Menu theme=\"dark\">\r\n          <Menu.Item key=\"header\">\r\n            <Space align=\"center\">\r\n              <img\r\n                src=\"https://cdn-icons-png.flaticon.com/512/6272/6272776.png\"\r\n                width=\"28px\"\r\n                height=\"auto\"\r\n                alt=\"funny\"\r\n              />\r\n              Home Funny\r\n            </Space>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <BrowserView>\r\n        <L>\r\n          <Sider theme=\"light\" className=\"layout-print-display-none\">\r\n            <Menu mode=\"vertical\">\r\n              <Menu.Item key=\"bath\">\r\n                <Link to=\"/bath\">오늘의 화장실</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"wordtest\">\r\n                <Link to=\"/wordtest\">정상 단어 테스트</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"timeline\">\r\n                <Link to=\"/timeline\">스케줄</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"scheduler\">\r\n                <Link to=\"/scheduler\">스케줄 등록</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Content className=\"layout-content\">{children}</Content>\r\n        </L>\r\n      </BrowserView>\r\n      <MobileView>\r\n        <L className=\"layout-print-display-none\">\r\n          <HomeNavigation />\r\n        </L>\r\n        <Content className=\"layout-content\">{children}</Content>\r\n      </MobileView>\r\n      <Footer className=\"layout-print-display-none\">\r\n        This is home funny, 2021\r\n      </Footer>\r\n    </L>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { Typography } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport Paragraph from \"antd/lib/typography/Paragraph\";\r\n\r\nexport const TodayBathUser = (props: { pickDate: Date }) => {\r\n  const bathUser = useSelector((state: RootState) => state.bathUser);\r\n\r\n  return (\r\n    <Typography>\r\n      <Paragraph>\r\n        <Typography.Title level={5}>\r\n          오늘은 <NameTag name={bathUser.name} /> 차례 입니다.\r\n        </Typography.Title>\r\n      </Paragraph>\r\n    </Typography>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { Card } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { getTodayBathUser } from \"logic/reducer/bathUser\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { TodayBathUser } from \"component/TodayBathUser\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\n\r\nconst Bath = () => {\r\n  const [pickDate] = useState(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  const updateTodayUser = useCallback(\r\n    (date: Date) => {\r\n      dispatch(\r\n        getTodayBathUser({\r\n          type: \"request/whois\",\r\n          date: date.getTime(),\r\n          eventUser: eventUser,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, eventUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventUserThuck());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateTodayUser(pickDate);\r\n    // 이벤트 핸들러에 해당한다.\r\n  }, [pickDate, eventUser, updateTodayUser]);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"bath-app\">\r\n        <Card title={toKrDateString(pickDate)}>\r\n          <TodayBathUser pickDate={pickDate} />\r\n          <EventUser />\r\n        </Card>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import store, { getCollectionSnapshot } from \"../firebase\";\r\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore/lite\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const getTestLevelList = async () => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const storeCollection = collection(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST\r\n      );\r\n\r\n      const storeSnapshot = await getDocs(storeCollection);\r\n\r\n      let list = Array<string>();\r\n      storeSnapshot.forEach((e) => list.push(e.id));\r\n\r\n      return list;\r\n    } else {\r\n      return Array<string>();\r\n    }\r\n  } catch {\r\n    return Array<string>();\r\n  }\r\n};\r\n\r\nconst getWordTestSnapshot = async (level: string) => {\r\n  if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n    return getCollectionSnapshot(\r\n      process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n      level\r\n    );\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getWordTest = async (level: string): Promise<WordTestType> => {\r\n  try {\r\n    let testObject = await getWordTestSnapshot(level);\r\n    if (testObject) {\r\n      let test: WordTestType = {};\r\n      for (const key of Object.keys(testObject)) {\r\n        test[key] = testObject[key];\r\n      }\r\n      return test;\r\n    }\r\n  } catch {}\r\n\r\n  return {};\r\n};\r\n\r\nexport const addWordTest = async (level: string, list: Array<WordTestType>) => {\r\n  try {\r\n    if (process.env.REACT_APP_COLLECTION_WORD_TEST) {\r\n      const stateLogDocRef = doc(\r\n        store,\r\n        process.env.REACT_APP_COLLECTION_WORD_TEST,\r\n        level\r\n      );\r\n\r\n      let docData = {};\r\n      list.map((e) => {\r\n        docData = { ...docData, [e.word]: e.desc };\r\n        return e;\r\n      });\r\n\r\n      await setDoc(stateLogDocRef, docData);\r\n    }\r\n\r\n    return true;\r\n  } catch {}\r\n\r\n  return false;\r\n};\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst BlankWords = ({ list }: { list: Array<WordType> }) => {\r\n  return (\r\n    <div className=\"blank-words-container\">\r\n      {list.map((word) => (\r\n        <span key={word.word}>{word.word}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const FillTheBlanks = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const dataSource = list.map((e, index) => {\r\n    // 이건 잘 안된다.\r\n    // 사전에서 검색하는 예제는 시제가 적요된 경우가 있어서 그대로 쓸 수 없다.\r\n    if (e.example) {\r\n      const partial = e.example.split(e.word);\r\n\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: (\r\n          <div className=\"fill-blank-table-row\">\r\n            {partial[0]}\r\n            <span> </span>\r\n            {answerVisiblity ? (\r\n              <span className=\"fill-blank-table-answer\">{e.word}</span>\r\n            ) : (\r\n              <span className=\"fill-blank-table-blank\">\r\n                {Array(e.word.length).fill(\"__\").join(\"\")}\r\n              </span>\r\n            )}\r\n            <span> </span>\r\n            {partial[1]}\r\n          </div>\r\n        ),\r\n      };\r\n    } else {\r\n      return {\r\n        key: e.word,\r\n        order: `${index + 1}.`,\r\n        sentance: <div className=\"fill-blank-table-row\">{e.definition}</div>,\r\n      };\r\n    }\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Sentance\",\r\n      dataIndex: \"sentance\",\r\n      key: \"key\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"fill-blank-test-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the correct\r\n        word from the below.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        showHeader={false}\r\n        pagination={{ position: [] }}\r\n      />\r\n      <BlankWords list={list} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FillTheBlanks;\r\n","import { Table } from \"antd\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const Dictation = ({\r\n  list,\r\n  answerVisiblity,\r\n}: {\r\n  list: Array<WordType>;\r\n  answerVisiblity: boolean;\r\n}) => {\r\n  const pronunce = (audio: string) => {\r\n    new Audio(audio).play();\r\n  };\r\n\r\n  const dataSource = list.map((e, index) => {\r\n    return {\r\n      key: e.word,\r\n      order: `${index + 1}.`,\r\n      definition: (\r\n        <div\r\n          onClick={() => pronunce(e.pronunciations)}\r\n          className=\"dictation-table-definition-row\"\r\n        >\r\n          <span>{e.partOfSpeech}.</span>\r\n          <span> </span>\r\n          <span>{index % 2 === 1 ? e.definition : e.translation}</span>\r\n        </div>\r\n      ),\r\n      answer: (\r\n        <div className=\"dictation-table-answer-row\">\r\n          <div className=\"dictation-table-answer-row-word\">\r\n            {answerVisiblity ? e.word : \"\"}\r\n          </div>\r\n          <div className=\"dictation-table-answer-row-translate\">\r\n            {answerVisiblity ? e.translation : \"\"}\r\n          </div>\r\n        </div>\r\n      ),\r\n    };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"order\",\r\n      key: \"order\",\r\n      width: \"5%\",\r\n    },\r\n    {\r\n      title: \"Definition\",\r\n      dataIndex: \"definition\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"English Word\",\r\n      dataIndex: \"answer\",\r\n      key: \"key\",\r\n      width: \"25%\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"word-test-dictation\">\r\n      <h2 className=\"word-test-dictation-title\">\r\n        <EditOutlined style={{ fontSize: \"big\" }} /> Read and write the words.\r\n        Write both Present and Past forms for verbs.\r\n      </h2>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={{ position: [] }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dictation;\r\n","import { WordType } from \"logic/api/ox\";\r\nimport { getWordTest } from \"logic/api/wordTest\";\r\nimport { WordTestType } from \"logic/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport FillTheBlanks from \"./FillTheBlanks\";\r\nimport Dictation from \"./Dictation\";\r\n\r\nimport \"./style.css\";\r\nimport { Button, Space } from \"antd\";\r\n\r\nconst shuffle = (array: any[]) => {\r\n  let currentIndex = array.length;\r\n  let randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\ntype SaveType = {\r\n  part1: Array<WordType>;\r\n  part2: Array<WordType>;\r\n};\r\n\r\nexport const WordTestPaper = ({ level }: { level?: string }) => {\r\n  const [test, setTest] = useState<SaveType>({ part1: [], part2: [] });\r\n  const [answerVisiblity, showAnswer] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let testList = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          testList.push(wordType);\r\n        }\r\n\r\n        const q = shuffle(testList);\r\n        const count = Math.round(testList.length / 2);\r\n\r\n        setTest({ part1: q.slice(0, count), part2: q.slice(count) });\r\n      });\r\n    }\r\n  }, [level]);\r\n\r\n  const onClickShowAnswer = (visible: boolean) => {\r\n    showAnswer(visible);\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-test-layout\">\r\n      <h2>{`<${level}>`}</h2>\r\n      <Dictation list={[...test.part1]} answerVisiblity={answerVisiblity} />\r\n      <br />\r\n      <FillTheBlanks list={[...test.part2]} answerVisiblity={answerVisiblity} />\r\n      <Space className=\"word-test-option\">\r\n        <Button onClick={() => onClickShowAnswer(!answerVisiblity)}>\r\n          정답보기\r\n        </Button>\r\n        <Button onClick={() => window.print()}>시험지 출력하기</Button>\r\n      </Space>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestPaper } from \"component/WordTestPaper\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTest = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestPaper {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTest;\r\n","import { Button, Menu } from \"antd\";\r\nimport { getTestLevelList } from \"logic/api/wordTest\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestLevelList = () => {\r\n  const [list, setList] = useState<Array<string>>([]);\r\n\r\n  useEffect(() => {\r\n    getTestLevelList().then((testList) => {\r\n      setList(testList);\r\n    });\r\n  }, []);\r\n\r\n  const deleteLevel = (level: string) => {};\r\n\r\n  return (\r\n    <Menu>\r\n      {list.map((level) => (\r\n        <Menu.Item key={level}>\r\n          <div className=\"word-test-level-list-link-container\">\r\n            <Link to={`/wordtest/test/${level}`}>{level}</Link>\r\n            <div className=\"word-test-level-list-option\">\r\n              <Button type=\"link\">\r\n                <Link to={`/wordtest/regist/${level}`}>수정</Link>\r\n              </Button>\r\n              <Button type=\"link\" onClick={() => deleteLevel(level)}>\r\n                삭제\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { WordTestLevelList } from \"component/WordTestLevelList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestHome = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-home-content-container\">\r\n        <div>\r\n          <Button>\r\n            <Link to=\"/wordtest/regist\">\r\n              새 시험 등록 <PlusCircleTwoTone />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n        <div className=\"word-test-home-content-row\">\r\n          <WordTestLevelList />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestHome;\r\n","import \"./style.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Paragraph, Title } = Typography;\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <Layout>\r\n      <div className=\"home-content-container\">\r\n        <Typography>\r\n          <Paragraph>Welcome to Home Funny !</Paragraph>\r\n          <Paragraph>\r\n            <Title level={4}>오늘의 화장실</Title>\r\n            화장실 순번 보기, 간단한 메모\r\n          </Paragraph>\r\n          <Paragraph>\r\n            <Title level={4}>정상 단어 테스트</Title>\r\n            정상 단어 테스트 시험지 출력\r\n          </Paragraph>\r\n        </Typography>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export type WordType = {\r\n  word: string;\r\n  partOfSpeech: string;\r\n  definition: string;\r\n  translation: string;\r\n  example: string;\r\n  pronunciations: string;\r\n};\r\n\r\nexport const initialWord: WordType = {\r\n  word: \"\",\r\n  partOfSpeech: \"Noun\",\r\n  definition: \"\",\r\n  translation: \"\",\r\n  example: \"\",\r\n  pronunciations: \"\",\r\n};\r\n\r\ntype OxEntryType = {\r\n  etymologies: Array<any>;\r\n  language: string;\r\n  pronunciations: Array<any>;\r\n  senses: Array<any>;\r\n};\r\n\r\ntype OxResultType = {\r\n  text: string;\r\n  lexicalCategory: { id: string; text: string };\r\n  entries: Array<OxEntryType>;\r\n};\r\n\r\nconst fromEnties = ({\r\n  text,\r\n  lexicalCategory,\r\n  entries,\r\n}: OxResultType): WordType | undefined => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n    const pronunciations = entry.pronunciations[\"0\"].audioFile;\r\n\r\n    let definitions = Array<{ text: string; example: string }>();\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.definitions) {\r\n        definitions.push({\r\n          text: sense.definitions[0],\r\n          example: sense.examples![0].text,\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      word: text,\r\n      partOfSpeech: lexicalCategory.text,\r\n      definition: definitions[0].text,\r\n      translation: \"\",\r\n      example: definitions[0].example,\r\n      pronunciations: pronunciations,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunce = ({ entries }: OxResultType) : string | undefined => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    return entry.pronunciations[\"0\"].audioFile;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getPronunceAndExample = ({ text, entries }: OxResultType) => {\r\n  try {\r\n    const entry = entries[\"0\"];\r\n\r\n    for (const sense of entry.senses) {\r\n      if (sense.examples) {\r\n        // 예문의 경우 시제가 다르게 들어갈 수 있어서 깔끔하게 되지 않는다.\r\n\r\n        for (const exam of sense.examples) {\r\n          if (exam.text.includes(text)) {\r\n            return {\r\n              pronounce: entry.pronunciations[\"0\"].audioFile,\r\n              example: exam.text,\r\n            };\r\n          }\r\n        }\r\n\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n          example: sense.examples[\"0\"].text,\r\n        };\r\n      } else {\r\n        return {\r\n          pronounce: entry.pronunciations[\"0\"].audioFile,\r\n        };\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const fetchWordFromOx = async (text: string) => {\r\n  if (process.env.REACT_APP_OX_APP_ID && process.env.REACT_APP_OX_APP_KEY) {\r\n    const language = \"en-gb\";\r\n    const word_id = text;\r\n    const apiurl = `https://od-api.oxforddictionaries.com:443/api/v2/entries/${language}/${word_id.toLowerCase()}`;\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        app_id: process.env.REACT_APP_OX_APP_ID,\r\n        app_key: process.env.REACT_APP_OX_APP_KEY,\r\n      },\r\n    };\r\n\r\n    const crosproxy = `https://home-funny-server.herokuapp.com/${apiurl}`;\r\n\r\n    const result = await fetch(crosproxy, options);\r\n    const json = await result.json();\r\n    if (json.results) {\r\n      return json.results;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const searchWord = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n\r\n  let wordDefinition = Array<WordType>();\r\n\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      const cov = fromEnties(e);\r\n      cov && wordDefinition.push(cov);\r\n    }\r\n  }\r\n\r\n  return wordDefinition;\r\n};\r\n\r\nexport const fetchPronunciations = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunce(e);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport const fetchPronunceAndExample = async (text: string) => {\r\n  const results = await fetchWordFromOx(text);\r\n  if (results) {\r\n    const enties = results[\"0\"]!.lexicalEntries;\r\n    for (const e of enties) {\r\n      return getPronunceAndExample(e);\r\n    }\r\n  }\r\n\r\n  return {\r\n    pronounce: \"\",\r\n    example: \"\",\r\n  };\r\n};\r\n","import { Button, Form, Input, Select, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { WordType } from \"logic/api/ox\";\r\nimport { MinusCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport \"./style.css\";\r\n\r\ntype Props = {\r\n  index: number;\r\n  deleteItem: (index: number) => void;\r\n};\r\n\r\nconst WordInputCardFormItem = ({ index, deleteItem }: Props) => {\r\n  const { Option } = Select;\r\n\r\n  const labels: WordType = {\r\n    word: \"단어\",\r\n    partOfSpeech: \"품사\",\r\n    definition: \"영문 뜻\",\r\n    translation: \"한글 뜻\",\r\n    example: \"예제\",\r\n    pronunciations: \"\",\r\n  };\r\n\r\n  return (\r\n    <Form.Item label={`Q.${index + 1}`}>\r\n      <Space align=\"start\">\r\n        <Form.Item name={[index, \"word\"]} rules={[{ required: true }]}>\r\n          <Input placeholder={labels[\"word\"]} allowClear />\r\n        </Form.Item>\r\n        <Form.Item name={[index, \"partOfSpeech\"]}>\r\n          <Select placeholder={labels[\"partOfSpeech\"]}>\r\n            <Option value=\"Noun\">Noun</Option>\r\n            <Option value=\"Verb\">Verb</Option>\r\n            <Option value=\"Adjective\">Adjective</Option>\r\n            <Option value=\"Adverb\">Adverb</Option>\r\n            <Option value=\"Pronoun\">Pronoun</Option>\r\n            <Option value=\"Conjunction\">Conjunction</Option>\r\n            <Option value=\"Preposition\">Preposition</Option>\r\n            <Option value=\"Interjection\">Interjection</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Button onClick={() => deleteItem(index)}>\r\n          <MinusCircleTwoTone /> 삭제\r\n        </Button>\r\n      </Space>\r\n      <Form.Item name={[index, \"definition\"]}>\r\n        <TextArea placeholder={labels[\"definition\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"translation\"]}>\r\n        <Input placeholder={labels[\"translation\"]} allowClear></Input>\r\n      </Form.Item>\r\n      <Form.Item name={[index, \"example\"]}>\r\n        <TextArea placeholder={labels[\"example\"]} allowClear></TextArea>\r\n      </Form.Item>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default WordInputCardFormItem;\r\n","import { Button, Form, FormInstance, Input, message, Space } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\r\nimport { addWordTest, getWordTest } from \"logic/api/wordTest\";\r\nimport { fetchPronunceAndExample, initialWord, WordType } from \"logic/api/ox\";\r\nimport WordInputCardFormItem from \"./WordInputCardFormItem\";\r\nimport { WordTestType } from \"logic/type\";\r\n\r\nexport const WordTestWordRegist = ({ level }: { level?: string }) => {\r\n  const [testlist, setTestlist] = useState<Array<WordType>>([initialWord]);\r\n  const formRef = useRef<FormInstance>(null);\r\n\r\n  useEffect(() => {\r\n    if (level) {\r\n      getWordTest(level).then((test: WordTestType) => {\r\n        let list = Array<WordType>();\r\n        for (const word of Object.keys(test)) {\r\n          const wordType: WordType = JSON.parse(test[word]);\r\n          list.push(wordType);\r\n        }\r\n\r\n        setTestlist(list);\r\n      });\r\n    }\r\n  }, [level]);\r\n\r\n  useEffect(() => {\r\n    // 3회에 걸쳐 리렌더가 일어난다.\r\n    // 근데 삭제할 경우 이 코드가 없으면 하나씩 밀리지 중간 입력이 삭제되지 않는다.\r\n    if (formRef.current) {\r\n      testlist.map((word, index) => {\r\n        formRef.current?.setFieldsValue({\r\n          [index]: {\r\n            ...word,\r\n          },\r\n        });\r\n        return word;\r\n      });\r\n    }\r\n  }, [testlist]);\r\n\r\n  const saveCurrentForm = () => {\r\n    if (formRef.current) {\r\n      const values = formRef.current.getFieldsValue(true);\r\n      saveValues(values);\r\n    }\r\n  };\r\n\r\n  const saveValues = (values: any) => {\r\n    for (const key in values) {\r\n      setTestlist((list) => {\r\n        const index = parseInt(key);\r\n        list[index] = {\r\n          ...list[index],\r\n          ...values[key],\r\n        };\r\n        return [...list];\r\n      });\r\n    }\r\n  };\r\n\r\n  const addInputWord = () => {\r\n    saveCurrentForm();\r\n\r\n    setTestlist((list) => [...list, initialWord]);\r\n  };\r\n\r\n  const onValuesChange = async (changedValues: any, allValues: any) => {\r\n    for (const key in changedValues) {\r\n      setTestlist((list) => {\r\n        const index = parseInt(key);\r\n        list[index] = {\r\n          ...list[index],\r\n          ...changedValues[key],\r\n        };\r\n        return [...list];\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveTest = async (values: any) => {\r\n    message.loading({\r\n      content: \"저장을 하고 있습니다...\",\r\n      key: \"updatable\",\r\n      duration: 0,\r\n    });\r\n\r\n    const docName = values[\"title\"];\r\n\r\n    let completed = true;\r\n    let saveForm = Array<WordTestType>();\r\n\r\n    for (const key in values) {\r\n      if (key === \"title\") {\r\n        continue;\r\n      }\r\n\r\n      const { word, partOfSpeech, definition, translation, example } =\r\n        values[key];\r\n      if (!word) {\r\n        continue;\r\n      }\r\n\r\n      const result = await fetchPronunceAndExample(word);\r\n      if (result) {\r\n        const override: WordType = {\r\n          word: word,\r\n          partOfSpeech: partOfSpeech,\r\n          definition: definition,\r\n          translation: translation,\r\n          example: example ? example : result.example,\r\n          pronunciations: result.pronounce,\r\n        };\r\n\r\n        saveForm.push({\r\n          word: word,\r\n          desc: JSON.stringify(override),\r\n        });\r\n      } else {\r\n        //alert(`${word} 잘못된 단어가 있습니다.`);\r\n        message.error({\r\n          content: `${word} 잘못된 단어가 있습니다.`,\r\n          key: \"updatable\",\r\n          duration: 5,\r\n        });\r\n\r\n        completed = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (completed) {\r\n      const result = await addWordTest(docName, saveForm);\r\n      if (result) {\r\n        message.success({\r\n          content: \"저장했습니다.\",\r\n          key: \"updatable\",\r\n          duration: 2,\r\n        });\r\n      } else {\r\n        message.error({ content: \"서버에 접속할 수 없습니다.\", duration: 2 });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteFormItem = (index: number) => {\r\n    saveCurrentForm();\r\n\r\n    setTestlist((list) => {\r\n      list.splice(index, 1);\r\n      return [...list];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", alignItems: \"flex-end\", padding: \"1rem\" }}>\r\n      <Form\r\n        onFinish={saveTest}\r\n        //onValuesChange={onValuesChange}\r\n        layout=\"vertical\"\r\n        ref={formRef}\r\n        style={{ flexGrow: \"1\" }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true }]}\r\n          label=\"테스트이름\"\r\n          initialValue={level}\r\n        >\r\n          <Input placeholder=\"정상 레벨 또는 워크북 페이지\" />\r\n        </Form.Item>\r\n        {testlist.map((e, index) => (\r\n          <WordInputCardFormItem\r\n            key={index}\r\n            index={index}\r\n            deleteItem={deleteFormItem}\r\n          />\r\n        ))}\r\n        <Space size={40}>\r\n          <Button onClick={addInputWord}>\r\n            단어 추가 <PlusCircleTwoTone />\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            저장\r\n          </Button>\r\n        </Space>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Layout from \"component/Layout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WordTestWordRegist } from \"component/WordTestWordRegist\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const WordTestRegist = () => {\r\n  const params = useParams();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"word-test-content-container\">\r\n        <WordTestWordRegist {...params} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WordTestRegist;\r\n","import React, { useState } from \"react\";\r\nimport { Slider, Timeline as Time } from \"antd\";\r\nimport { EventLogType } from \"logic/api/eventLog\";\r\nimport { NameTag } from \"component/NameTag\";\r\n\r\nimport \"./style.css\";\r\nimport { normalizeTimeToday } from \"logic/api/misc\";\r\n\r\nconst dingAudio = new Audio(\r\n  \"http://www.besplatnestvari.net/zvuci_1/mp3SMS/Sonic.Ring.mp3\"\r\n);\r\n\r\ntype TimelineProps = {\r\n  logs: Array<EventLogType>;\r\n};\r\n\r\nexport const Timeline = ({ logs }: TimelineProps) => {\r\n  const [alarmed, setAlarmed] = useState(false);\r\n\r\n  logs.sort((a, b): number => {\r\n    // 이미 잘못 저장된 DB 를 수정하지 못해서 코드에서 대응하는 것으로...\r\n    const l_date = normalizeTimeToday(a.eventTime);\r\n    const r_date = normalizeTimeToday(b.eventTime);\r\n\r\n    if (l_date > r_date) {\r\n      return 1;\r\n    } else if (l_date < r_date) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n\r\n  if (logs.length > 0) {\r\n    try {\r\n      const user = logs[0].eventUser;\r\n\r\n      const style = {\r\n        backgroundColor: user === \"james\" ? \"white\" : \"ghostwhite\",\r\n      };\r\n\r\n      const now = new Date();\r\n\r\n      let currentActived = 0;\r\n      logs.map((log, index) => {\r\n        const tagTime = normalizeTimeToday(log.eventTime);\r\n        if (tagTime < now) {\r\n          currentActived = index;\r\n        }\r\n\r\n        return log;\r\n      });\r\n\r\n      let value = 0;\r\n\r\n      if (currentActived + 1 < logs.length) {\r\n        const from = normalizeTimeToday(logs[currentActived].eventTime);\r\n        const to = normalizeTimeToday(logs[currentActived + 1].eventTime);\r\n\r\n        const duration = to.valueOf() - from.valueOf();\r\n        const pregressed = new Date().valueOf() - from.valueOf();\r\n\r\n        value = (pregressed / duration) * 100;\r\n\r\n        if (value > 90) {\r\n          if (!alarmed) {\r\n            dingAudio.play();\r\n\r\n            setAlarmed(true);\r\n          }\r\n        } else if (alarmed) {\r\n          setAlarmed(false);\r\n        }\r\n      }\r\n\r\n      const currentWork = (\r\n        <>\r\n          <div className=\"timeline-current\">{logs[currentActived].logText}</div>\r\n          <div className=\"icon-wrapper\">\r\n            <Slider value={value} />\r\n          </div>\r\n        </>\r\n      );\r\n\r\n      return (\r\n        <div className=\"timeline-pannel\" style={style}>\r\n          <p>\r\n            <NameTag name={user} />\r\n          </p>\r\n          <p>{currentWork}</p>\r\n          <Time>\r\n            {logs.map((log, index) => {\r\n              const tagTime = normalizeTimeToday(log.eventTime);\r\n\r\n              let color = \"blue\";\r\n              if (currentActived !== index && tagTime < now) {\r\n                color = \"green\";\r\n              } else if (tagTime > now) {\r\n                color = \"gray\";\r\n              }\r\n\r\n              return (\r\n                <Time.Item key={index} color={color}>\r\n                  <span>{log.eventTime.toLocaleTimeString()}</span>{\" \"}\r\n                  <NameTag name={log.eventUser} /> <span>{log.logText}</span>\r\n                </Time.Item>\r\n              );\r\n            })}\r\n          </Time>\r\n        </div>\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  return <div></div>;\r\n};\r\n","import Layout from \"component/Layout\";\r\nimport { Timeline } from \"component/Timeline\";\r\nimport { EventLogType, getTodayEvent } from \"logic/api/eventLog\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const TimelineView = () => {\r\n  const [todayEvent, setTodayEvent] = useState<Array<EventLogType>>([]);\r\n  const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n\r\n  useEffect(() => {\r\n    getTodayEvent().then((log) => {\r\n      console.log(log);\r\n\r\n      setTodayEvent(log);\r\n    });\r\n\r\n    window.setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n  }, []);\r\n\r\n  const filteredLogs = (name: string): Array<EventLogType> => {\r\n    return todayEvent.filter((log) => {\r\n      const { eventType, eventUser } = log;\r\n      if (eventType === \"custom\" && eventUser === name) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n\r\n  const james = filteredLogs(\"james\");\r\n  const henry = filteredLogs(\"henry\");\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"timeline-container\">\r\n        <div className=\"timeline-clock\">{time}</div>\r\n        <div className=\"timeline-contents\">\r\n          <Timeline logs={james} />\r\n          <Timeline logs={henry} />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TimelineView;\r\n","import { Calendar as DatePicker } from \"antd\";\r\n\r\nexport const Calendar = (props: { setNewDate: any }) => {\r\n  const onDateChanged = (date: Date) => {\r\n    props.setNewDate(date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-calendar-container\">\r\n      <DatePicker\r\n        fullscreen={false}\r\n        onSelect={(date: moment.Moment) => {\r\n          onDateChanged(date.toDate());\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { NameTag } from \"component/NameTag\";\r\nimport { EventLogType } from \"logic/api/eventLog\";\r\nimport React from \"react\";\r\n\r\nexport const LogParser = ({\r\n  loggingTime,\r\n  eventType,\r\n  eventTime,\r\n  eventUser,\r\n  logText,\r\n}: EventLogType) => {\r\n  let message = \"\";\r\n  switch (eventType) {\r\n    case \"bath\":\r\n      message = \"화장실 쓰는 날\";\r\n      break;\r\n    case \"ban\":\r\n      message = `${logText} 금지`;\r\n      break;\r\n    default:\r\n      message = logText;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <NameTag name={eventUser} />\r\n      {message}\r\n    </span>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { EventLogType, getEventLog } from \"../../logic/api/eventLog\";\r\nimport { Collapse, Timeline } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"logic/store\";\r\nimport { LogParser } from \"component/LogParser\";\r\n\r\nexport const EventLog = () => {\r\n  const [logState, setLogState] = useState<Array<EventLogType>>([]);\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  useEffect(() => {\r\n    getEventLog().then((log) => {\r\n      setLogState(log);\r\n    });\r\n  }, [eventUser]);\r\n\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={[1]}>\r\n        <Collapse.Panel header=\"Event Log\" key=\"1\">\r\n          <Timeline>\r\n            {logState.map((log, i: number) => {\r\n              return (\r\n                <Timeline.Item key={i++}>\r\n                  {log.loggingTime.toLocaleString()} <LogParser {...log} />\r\n                </Timeline.Item>\r\n              );\r\n            })}\r\n          </Timeline>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Select,\r\n  message,\r\n  Button,\r\n  TimePicker,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { addEvent, EventLogType } from \"logic/api/eventLog\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { toKrDateString } from \"logic/api/misc\";\r\nimport moment from \"moment\";\r\n\r\ntype AddEventProp = {\r\n  date: Date;\r\n};\r\n\r\nexport const AddEvent = ({ date }: AddEventProp) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinish = (values: any) => {\r\n    const newLog: EventLogType = {\r\n      loggingTime: new Date(),\r\n      eventType: values.event,\r\n      eventTime: values.eventTime.toDate(),\r\n      eventUser: values.who,\r\n      logText: values.log,\r\n      repeat: values.repeat,\r\n    };\r\n\r\n    console.log(newLog);\r\n\r\n    addEvent(newLog).then((ret) => {\r\n      if (ret) {\r\n        addToast(\r\n          `${toKrDateString(ret.eventTime)}, ${\r\n            ret.logText\r\n          } 이벤트를 등록했습니다.`\r\n        );\r\n\r\n        dispatch(eventUserThuck());\r\n      } else {\r\n        console.log(\"add event failed\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const addToast = (text: string) => {\r\n    message.success(text);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: { span: 4 },\r\n    //wrapperCol: { span: 8 },\r\n  };\r\n\r\n  const repeatDay = [\r\n    { label: \"월\", value: \"mon\" },\r\n    { label: \"화\", value: \"tue\" },\r\n    { label: \"수\", value: \"wed\" },\r\n    { label: \"목\", value: \"thr\" },\r\n    { label: \"금\", value: \"fri\" },\r\n    { label: \"토\", value: \"sat\" },\r\n    { label: \"일\", value: \"sun\" },\r\n  ];\r\n\r\n  return (\r\n    <Form {...layout} onFinish={onFinish}>\r\n      <Form.Item name=\"event\" label=\"무슨일?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"무슨일?\">\r\n          <Select.Option value=\"bath\">화장실 사용하는 날</Select.Option>\r\n          <Select.Option value=\"ban\">금지</Select.Option>\r\n          <Select.Option value=\"custom\">직접입력</Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item name=\"who\" label=\"누구?\" rules={[{ required: true }]}>\r\n        <Select placeholder=\"누구?\">\r\n          <Select.Option value=\"james\">\r\n            <NameTag name=\"james\" />\r\n          </Select.Option>\r\n          <Select.Option value=\"henry\">\r\n            <NameTag name=\"henry\" />\r\n          </Select.Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item name=\"eventTime\" label=\"시간\">\r\n        <TimePicker\r\n          defaultPickerValue={moment(\"12:00 am\", \"HH:mm a\")}\r\n          use12Hours\r\n          format=\"h:mm a\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        noStyle\r\n        shouldUpdate={(prevValues, currentValues) =>\r\n          prevValues.event !== currentValues.event\r\n        }\r\n      >\r\n        {({ getFieldValue }) =>\r\n          getFieldValue(\"event\") !== \"bath\" ? (\r\n            <Form.Item name=\"log\" label=\"기록\" rules={[{ required: true }]}>\r\n              <Input placeholder=\"직접입력\" />\r\n            </Form.Item>\r\n          ) : null\r\n        }\r\n      </Form.Item>\r\n      <Form.Item name=\"repeat\" label=\"반복\">\r\n        <Checkbox.Group options={repeatDay} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          등록\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport { Divider, Space } from \"antd\";\r\nimport { RootState } from \"logic/store\";\r\nimport { eventUserThuck } from \"logic/reducer/eventUser\";\r\nimport { getTodayBathUser } from \"logic/reducer/bathUser\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Layout from \"component/Layout\";\r\nimport { AddEvent } from \"component/AddEvent\";\r\n\r\nconst Scheduler = () => {\r\n  const [pickDate, setDate] = useState<Date>(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const eventUser = useSelector((state: RootState) => state.eventUser);\r\n\r\n  const updateTodayUser = useCallback(\r\n    (date: Date) => {\r\n      dispatch(\r\n        getTodayBathUser({\r\n          type: \"request/whois\",\r\n          date: date.getTime(),\r\n          eventUser: eventUser,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, eventUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventUserThuck());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    updateTodayUser(pickDate);\r\n    // 이벤트 핸들러에 해당한다.\r\n  }, [pickDate, eventUser, updateTodayUser]);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"bath-app\">\r\n        <Space direction=\"vertical\">\r\n          <Calendar setNewDate={setDate} />\r\n\r\n          <AddEvent date={pickDate} />\r\n        </Space>\r\n        <Divider />\r\n        <EventLog />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Scheduler;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"logic/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Bath from \"pages/Bath\";\r\nimport WordTest from \"pages/WordTest\";\r\nimport WordTestHome from \"pages/WordTestHome\";\r\nimport Home from \"pages/Home\";\r\n\r\nimport \"./index.css\";\r\nimport WordTestRegist from \"pages/WordTestRegist\";\r\nimport { TimelineView } from \"pages/TimelineView\";\r\nimport Scheduler from \"pages/Scheduler\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename=\"/homefunny\">\r\n        <Routes>\r\n          <Route index element={<Home />} />\r\n          <Route path=\"/bath\" element={<Bath />} />\r\n          <Route path=\"/wordtest\" element={<WordTestHome />} />\r\n          <Route path=\"/wordtest/regist/\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/regist/:level\" element={<WordTestRegist />} />\r\n          <Route path=\"/wordtest/test/:level\" element={<WordTest />} />\r\n          <Route path=\"/timeline\" element={<TimelineView />} />\r\n          <Route path=\"/scheduler\" element={<Scheduler />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}