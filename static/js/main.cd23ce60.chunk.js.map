{"version":3,"sources":["component/NameTag/index.tsx","component/Calendar/index.tsx","logic/firebase.tsx","logic/access.tsx","component/EventUser/index.tsx","component/EventLog/index.tsx","component/Bath/index.tsx","index.js"],"names":["NameTag","props","name","Calendar","timePickerProps","date","Date","highlightCurrentDay","reverseMonthAndYearMenus","shortcuts","showActionsBar","showTimeArrowButtons","timePrecision","undefined","useAmPm","className","Classes","ELEVATION_1","onChange","setNewDate","firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","store","getFirestore","eventLogIndex","getAppStateSnapshot","documentName","a","docRef","doc","getDoc","docSnapshot","exists","data","getEventLogSnapshot","storeCollection","collection","storeQuery","query","orderBy","getDocs","storeSnapshot","docs","map","getEventLog","eventDateLog","convertedDataform","log","EventTime","seconds","text","EventLog","length","getEventState","list","eventDate","EventDate","eventName","EventName","addEvent","currentDate","userName","stateLogDocRef","setDoc","eventLogDocRef","EventUser","useEffect","getEventContext","console","setEventUser","Fragment","eventUser","toLocaleDateString","useState","logState","setLogState","logVisiblity","setLogVisiblity","then","onClick","minimal","outlined","isOpen","e","i","toLocaleString","Bath","from","checkDate","setDate","day_count","Math","round","getTime","person","days","whoIs","align","Alignment","LEFT","MINIMAL","icon","intent","vertical","large","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd23ce60.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Text } from '@blueprintjs/core'\r\n\r\nexport const NameTag = (props: {name:string}) => {\r\n    return (\r\n        <Text>\r\n            {props.name}\r\n        </Text>\r\n    )\r\n}\r\n","import { Classes } from '@blueprintjs/core';\r\nimport { DatePicker } from \"@blueprintjs/datetime\"\r\n\r\nexport const Calendar = (props:{setNewDate:any}) => {\r\n    const onDateChanged = (date:Date) => {\r\n        if (date) {\r\n            props.setNewDate(date);\r\n        }\r\n    }\r\n\r\n    const timePickerProps = {\r\n        date: new Date(),\r\n        highlightCurrentDay: true,\r\n        reverseMonthAndYearMenus: false,\r\n        shortcuts: false,\r\n        showActionsBar: false,\r\n        showTimeArrowButtons: false,\r\n        timePrecision: undefined,\r\n        useAmPm: false,\r\n    };\r\n\r\n    return (\r\n        <div className=\"bath-calendar-container\">\r\n            <DatePicker\r\n                className={Classes.ELEVATION_1}\r\n                onChange={onDateChanged}\r\n                {...timePickerProps}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp, } from \"firebase/app\";\r\n//import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n//const analytics = getAnalytics(firebaseApp);\r\n\r\nexport default firebaseApp;\r\n","import firebaseApp from \"./firebase\";\r\nimport { getFirestore, collection, getDocs, query, where, doc, getDoc, setDoc, DocumentData, orderBy } from \"firebase/firestore/lite\";\r\n\r\nconst store = getFirestore(firebaseApp);\r\nlet eventLogIndex = 0;\r\n\r\nconst getAppStateSnapshot = async (documentName:string) => {\r\n    if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n        const docRef = doc(store, process.env.REACT_APP_COLLECTION_APP_STATE, documentName);\r\n        const docSnapshot = await getDoc(docRef);\r\n        if (docSnapshot.exists()) {\r\n            return docSnapshot.data();\r\n        }\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst getEventLogSnapshot = async () => {\r\n    if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n        const storeCollection = collection(store, process.env.REACT_APP_COLLECTION_EVENT_LOG);\r\n        //const storeSnapshot = await getDocs(storeCollection);\r\n        const storeQuery = query(storeCollection, orderBy(\"EventTime\", \"desc\"));\r\n        const storeSnapshot = await getDocs(storeQuery);\r\n        return storeSnapshot.docs.map(doc => doc.data());\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const getEventLog = async () => {\r\n    let eventDateLog = await getEventLogSnapshot();\r\n    if (eventDateLog) {\r\n        const convertedDataform = eventDateLog.map(log => {\r\n            return {\r\n                date: new Date(log.EventTime.seconds * 1000),\r\n                text: log.EventLog\r\n            };\r\n        });\r\n\r\n        eventLogIndex = convertedDataform.length + 1;\r\n        return convertedDataform;\r\n    }\r\n    else { \r\n        return[];\r\n    }\r\n}\r\n\r\nexport const getEventState = async () => {\r\n    let list = await getAppStateSnapshot(\"stateLog\");\r\n    if (list) {\r\n        return {\r\n            eventDate: new Date(list.EventDate.seconds * 1000),\r\n            eventName: list.EventName\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            eventDate: new Date(\"1917-1-1\"),\r\n            eventName: \"undefined\"\r\n        }\r\n    }\r\n}\r\n\r\nexport const queryDocument = async (eventId:number) => {\r\n    if (process.env.REACT_APP_COLLECTION_NAME) {\r\n        const collectionStore = collection(store, process.env.REACT_APP_COLLECTION_NAME);\r\n        const queried = query(collectionStore, where(\"eventId\", \"==\", eventId));\r\n    \r\n        const querySnapshot = await getDocs(queried);\r\n        querySnapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, \"=>\", data);\r\n        });\r\n    }\r\n}\r\n\r\nclass EventLog {\r\n    date: Date;\r\n    log: string;\r\n\r\n    constructor(date:Date, log:string) {\r\n        this.date = date;\r\n        this.log = log;\r\n    }\r\n}\r\n\r\nconst EventLogSerializer = {\r\n    toFirebase: (eventLog : EventLog) => {\r\n        return {\r\n            date: eventLog.date,\r\n            log: eventLog.log,\r\n        }\r\n    },\r\n    fromFirebase: (snapshot: DocumentData, options: any) => {\r\n        const data = snapshot.data(options);\r\n        return new EventLog(data.date, data.log);\r\n    }\r\n};\r\n\r\nexport const addEvent = async (currentDate:Date, userName:string) => {\r\n    if (process.env.REACT_APP_COLLECTION_APP_STATE) {\r\n        const stateLogDocRef = doc(store, process.env.REACT_APP_COLLECTION_APP_STATE, \"stateLog\");\r\n        await setDoc(stateLogDocRef, {\r\n            EventDate: currentDate,\r\n            EventName: userName\r\n        });\r\n\r\n        if (process.env.REACT_APP_COLLECTION_EVENT_LOG) {\r\n            const eventLogDocRef = doc(store, process.env.REACT_APP_COLLECTION_EVENT_LOG, `event${eventLogIndex}`);\r\n            await setDoc(eventLogDocRef, {\r\n                EventTime: currentDate,\r\n                EventLog: `set ${userName}`,\r\n            });\r\n        }\r\n\r\n        return {date:currentDate, name:userName};\r\n    }\r\n    else\r\n    {\r\n        return undefined;\r\n    }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { getEventState } from \"../../logic/access\";\r\n\r\nexport const EventUser = (props: {eventUser: {date: Date, name: string}, setEventUser: any}) => {\r\n\r\n    useEffect(() => {\r\n        const getEventContext = async () => {\r\n            const { eventDate, eventName } = await getEventState();\r\n\r\n            const log = `get context {${eventDate}: ${eventName}}`;\r\n            console.log(log);\r\n    \r\n            props.setEventUser({date:eventDate, name:eventName});\r\n        }\r\n\r\n        getEventContext();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3>{props.eventUser.name} was use {props.eventUser.date.toLocaleDateString()}</h3>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getEventLog } from \"../../logic/access\";\r\nimport { Text, Collapse, Button } from '@blueprintjs/core';\r\n\r\nexport const EventLog = (props: {date:Date, name:string}) => {\r\n    const type : {date:Date, text:string}[] = [];\r\n    const [logState, setLogState] = useState(type);\r\n    const [logVisiblity, setLogVisiblity] = useState(true)\r\n\r\n    useEffect(() => {\r\n        getEventLog().then(log => {\r\n            console.log(log);\r\n\r\n            setLogState(log);\r\n        });\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => setLogVisiblity(!logVisiblity)} minimal={true} outlined={true}>\r\n                {logVisiblity ? \"감추기\" : \"보이기\"}\r\n            </Button>\r\n            <Collapse isOpen={logVisiblity}>\r\n                <pre>\r\n                    {logState.map((e, i:number) => {\r\n                        return <Text key={i++}>[{e.date.toLocaleString()}] {e.text}</Text>;\r\n                    })}\r\n                </pre>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { NameTag } from \"component/NameTag\";\r\nimport { Calendar } from \"component/Calendar\";\r\nimport { EventUser } from \"component/EventUser\";\r\nimport { EventLog } from \"component/EventLog\";\r\nimport { Card, ButtonGroup, Button, Divider, Navbar, NavbarGroup, NavbarHeading, NavbarDivider, Alignment, Classes } from \"@blueprintjs/core\";\r\nimport { addEvent } from \"logic/access\";\r\nimport \"./style.css\";\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\n\r\nconst countingDays = (date: Date, from: Date) => {\r\n  const one_day = 1000 * 60 * 60 * 24;\r\n  return Math.round((date.getTime() - from.getTime()) / one_day);\r\n};\r\n\r\nconst whoIs = (days: number, from: string) => {\r\n  if (days % 2 === 0) {\r\n    if (from === \"james\") {\r\n      return \"james\";\r\n    } else {\r\n      return \"henry\";\r\n    }\r\n  } else {\r\n    if (from === \"james\") {\r\n      return \"henry\";\r\n    } else {\r\n      return \"james\";\r\n    }\r\n  }\r\n};\r\n\r\nconst Bath = () => {\r\n  const [checkDate, setDate] = useState<Date>(new Date());\r\n  const [eventUser, setEventUser] = useState({\r\n    date: new Date(\"1997-1-1\"),\r\n    name: \"undefined\",\r\n  });\r\n\r\n  const day_count = countingDays(checkDate, eventUser.date);\r\n  const person = whoIs(day_count, eventUser.name);\r\n\r\n  const onClick = (name: string) => {\r\n    addEvent(new Date(), name).then((e) => {\r\n      if (e) {\r\n        console.log(`${e.date}, ${e.name}`);\r\n\r\n        setEventUser(e);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bath-app\">\r\n      <Navbar>\r\n        <NavbarGroup align={Alignment.LEFT}>\r\n          <NavbarHeading>Home Funny</NavbarHeading>\r\n          <NavbarDivider />\r\n          <Button className={Classes.MINIMAL} icon=\"home\" text=\"Home\" intent=\"primary\" />\r\n          <Button className={Classes.MINIMAL} icon=\"calendar\" text=\"My Bath\" />\r\n        </NavbarGroup>\r\n      </Navbar>\r\n      <div>\r\n        <Card className=\"bp3-text-large bp3-running-text\">\r\n          <EventUser eventUser={eventUser} setEventUser={setEventUser} />\r\n          <blockquote>\r\n            <div>{day_count} days passed</div>\r\n            <NameTag name={person} />\r\n          </blockquote>\r\n          <br />\r\n          <Calendar setNewDate={setDate} />\r\n        </Card>\r\n      </div>\r\n\r\n      <ButtonGroup vertical={true} large={true}>\r\n        <Divider />\r\n        <Button intent={\"success\"} onClick={() => onClick(\"james\")}>\r\n          james confirm\r\n        </Button>\r\n        <Button intent={\"primary\"} onClick={() => onClick(\"henry\")}>\r\n          henry confirm\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <div>\r\n        <EventLog {...eventUser} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bath;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Bath from \"component/Bath\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Bath />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}